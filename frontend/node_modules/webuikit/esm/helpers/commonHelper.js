"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onKeySelect = exports.getCDN = exports.camelize = exports.iconStyle = exports.svgStyle = exports.cloneChildren = exports.getRGBAFromHex = exports.hexToRgb = exports.transitionToAuto = exports.transitionFromAuto = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = require("styled-components");

var hexToRgb = function hexToRgb(hex) {
  if (!hex) {
    return null;
  } // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")


  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function (m, r, g, b) {
    return r + r + g + g + b + b;
  });
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  var rgbObj = {
    r: result && parseInt(result[1], 16),
    g: result && parseInt(result[2], 16),
    b: result && parseInt(result[3], 16)
  };
  return result ? rgbObj : null;
};

exports.hexToRgb = hexToRgb;

var getRGBAFromHex = function getRGBAFromHex(hex, alpha) {
  var rgbObj = hexToRgb(hex);
  return hex ? "rgba(".concat(rgbObj.r, ",").concat(rgbObj.g, ",").concat(rgbObj.b, ",").concat(alpha, ")") : null;
};

exports.getRGBAFromHex = getRGBAFromHex;

var cloneChildren = function cloneChildren(children, handler) {
  if (Array.isArray(children)) {
    return children.map(function (ch) {
      return _react["default"].cloneElement(ch, handler);
    });
  }

  return _react["default"].cloneElement(children, handler);
};

exports.cloneChildren = cloneChildren;
var svgStyle = (0, _styledComponents.css)(["display:inline-block;vertical-align:middle;line-height:1;width:", "px;height:", "px;"], function (props) {
  return props.width;
}, function (props) {
  return props.height;
});
exports.svgStyle = svgStyle;
var iconStyle = (0, _styledComponents.css)(["display:flex;align-items:center;cursor:", ";"], function (props) {
  return props.showPointer ? "pointer" : "inherit";
});
exports.iconStyle = iconStyle;

var camelize = function camelize() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return name.replace(/(?:^\w|[A-Z]|\b\w)/g, function (word, index) {
    return index === 0 ? word.toLowerCase() : word.toUpperCase();
  }).replace(/\s|[-.]+/g, "");
};

exports.camelize = camelize;

var transitionFromAuto = function transitionFromAuto(el, endHeight) {
  el.style.height = window.getComputedStyle(el).height; // Force repaint
  //eslint-disable-next-line no-unused-expressions

  el.offsetHeight;
  el.style.height = endHeight + "px"; // el.style.overflow = 'hidden'
};

exports.transitionFromAuto = transitionFromAuto;

var transitionToAuto = function transitionToAuto(el) {
  var prevHeight = el.style.height;
  el.style.height = "auto";
  var endHeight = window.getComputedStyle(el).height;
  el.style.height = prevHeight; // Force repaint
  //eslint-disable-next-line no-unused-expressions

  el.offsetHeight;
  el.style.height = endHeight;
};

exports.transitionToAuto = transitionToAuto;

var getCDN = function getCDN(link) {
  return "https://b.zmtcdn.com/".concat(link);
};

exports.getCDN = getCDN;

var onKeySelect = function onKeySelect(func) {
  return function (e) {
    if (e.key === "Enter" || e.keyCode === 32) func(e);
  };
};

exports.onKeySelect = onKeySelect;