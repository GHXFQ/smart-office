"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodashEs = require("lodash-es");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _svgs = _interopRequireDefault(require("../Icon/svgs"));

var _commonHelper = require("../helpers/commonHelper");

var _buttonHelper = require("./buttonHelper");

var _misc = _interopRequireDefault(require("../tokens/misc"));

var _Spinner = _interopRequireWildcard(require("../Spinner"));

var _typography = require("../tokens/typography");

/* eslint-disable react/prop-types */
// libraries
// helpers
var GetButtonContent = function GetButtonContent(props) {
  var content = []; // Button text
  // eslint-disable-next-line react/prop-types

  if (props.text) content.push(_react["default"].createElement(Button.Text, {
    key: "text"
  }, props.text));
  var normalSpinner = [_react["default"].createElement(_Spinner["default"], {
    inverse: props.appearance !== _misc["default"].button.appearances.outline,
    color: (0, _buttonHelper.getBtnAttributes)(props).hoverText || (0, _buttonHelper.getBtnAttributes)(props).text,
    key: "loading",
    width: (0, _buttonHelper.getBtnAttributes)(props).iconSize
  })];
  var cricularSpinner = [_react["default"].createElement(_Spinner.SpinnerCircular, {
    inverse: props.appearance !== _misc["default"].button.appearances.outline,
    color: (0, _buttonHelper.getBtnAttributes)(props).hoverText || (0, _buttonHelper.getBtnAttributes)(props).text,
    key: "loading",
    size: "small"
  })];

  if (!props.disabled && props.loading) {
    content = !(props.icon && !props.children) ? normalSpinner : cricularSpinner;
  }

  if (props.icon && !props.loading) {
    var iconEle = _react["default"].createElement(_Icon["default"].Element, null, _react["default"].createElement(SVG, {
      xmlns: "http://www.w3.org/2000/svg",
      fill: (0, _buttonHelper.getBtnAttributes)(props).text,
      width: (0, _buttonHelper.getBtnAttributes)(props).iconSize,
      height: (0, _buttonHelper.getBtnAttributes)(props).iconSize,
      viewBox: "0 0 20 20" // don't change this
      ,
      hoverColor: (0, _buttonHelper.getBtnAttributes)(props).hoverText
    }, (0, _svgs["default"])(props.icon)));

    props.iconAlign == "right" ? content.push(iconEle) : content.unshift(iconEle);
  }

  return _react["default"].createElement(Button.Element, (0, _extends2["default"])({
    role: "button"
  }, props), content);
};

var Button = function Button(_ref) {
  var children = _ref.children,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children"]);
  return _react["default"].createElement(GetButtonContent, (0, _extends2["default"])({}, props, {
    text: children
  }));
};

Button.Element = _styledComponents["default"].button.withConfig({
  displayName: "Button__Element",
  componentId: "xwj6nc-0"
})(["display:inline-flex;vertical-align:middle;align-items:center;justify-content:center;min-width:", ";min-height:", ";line-height:", ";margin-top:0;margin-left:0;white-space:nowrap;font-size:", ";font-weight:", ";background:", ";border-color:", ";border-width:", ";border-style:solid;border-radius:", ";color:", ";padding:0 ", ";opacity:", ";cursor:", ";pointer-events:", ";transition:transform ", ",opacity ", ";> *:not(:last-child):not(:only-child){margin-right:", ";}@media (hover:hover){", " &:hover{color:", ";background:", ";border-color:", ";}}&:active{background:", ";border-color:", ";outline:0;box-shadow:", ";}@media (hover:none){", "}"], (0, _buttonHelper.getAttr)("minWidth"), (0, _buttonHelper.getAttr)("lineHeight"), (0, _buttonHelper.getAttr)("lineHeight"), (0, _buttonHelper.getAttr)("fontSize"), _typography.fontWeights.light, (0, _buttonHelper.getAttr)("background"), (0, _buttonHelper.getAttr)("border"), (0, _buttonHelper.getAttr)("borderWidth"), _misc["default"].radius, (0, _buttonHelper.getAttr)("text"), (0, _buttonHelper.getAttr)("padding"), function (props) {
  return props.disabled ? 0.5 : 1;
}, function (props) {
  return props.disabled ? "not-allowed" : "pointer";
}, function (props) {
  return props.disabled || props.loading || props.success ? "none" : null;
}, _misc["default"].animationDuration, _misc["default"].animationDuration, _buttonHelper.getBtnSpacing, ""
/* css for non touch devices, (hover enabled screens to be precised) goes here  */
, (0, _buttonHelper.getAttr)("hoverText") || (0, _buttonHelper.getAttr)("text"), (0, _buttonHelper.getAttr)("hoverBackground"), (0, _buttonHelper.getAttr)("hoverBorder"), (0, _buttonHelper.getAttr)("activeBackground"), (0, _buttonHelper.getAttr)("activeBorder"), function (props) {
  return (0, _buttonHelper.getBtnAttributes)(props).customBoxShadow;
}, ""
/* css for touch devices, (non-hover screens to be precised) goes here  */
);
Button.Text = _styledComponents["default"].span.withConfig({
  displayName: "Button__Text",
  componentId: "xwj6nc-1"
})(["display:inline-block;vertical-align:middle;line-height:normal;font-size:inherit;"]);
Button.LinkElement = (0, _styledComponents["default"])(Button.Element.withComponent("a")).withConfig({
  displayName: "Button__LinkElement",
  componentId: "xwj6nc-2"
})(["text-decoration:none;"]);
Button.propTypes = {
  /** Add a callback on click of button component */
  onClick: _propTypes["default"].func,
  title: _propTypes["default"].string,

  /** Condidtionally disable / Enable a Button */
  disabled: _propTypes["default"].bool,

  /** color of button, should be one of primary colors */
  btnColor: _propTypes["default"].oneOf(["red", "green", "blue", "yellow", "purple"]),

  /** Whether button should appears to be solid or White button with given color boundry and Text */
  appearance: _propTypes["default"].oneOf(["outline", "solid"]),

  /** Switch Loading state on/off */
  loading: _propTypes["default"].bool,

  /** Size of button */
  size: _propTypes["default"].oneOf(["large", "default", "compressed", "small"]),

  /** Icon which goes on button along with Text */
  icon: _propTypes["default"].string,

  /** Position of icon, before or after text */
  iconAlign: _propTypes["default"].oneOf(["left", "right"])
};
Button.defaultProps = {
  onClick: _lodashEs.noop,
  disabled: false,
  loading: false,
  appearance: "solid",
  size: "medium",
  iconAlign: "left",
  btnColor: "green"
};

var SVG = _styledComponents["default"].svg.withConfig({
  displayName: "Button__SVG",
  componentId: "xwj6nc-3"
})(["", ";", ":hover &{fill:", ";}"], _commonHelper.svgStyle, Button.Element, function (props) {
  return props.hoverColor;
});

var _default = Button;
exports["default"] = _default;