"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onBlurred = exports.onValueChange = exports.getHelperText = exports.getState = exports.getLabelAttr = exports.getAttributes = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _colors = require("../tokens/colors");

var _sizes = require("../tokens/sizes");

var _lodashEs = require("lodash-es");

var getPadding = function getPadding(top, right, bottom, left) {
  return "".concat(top, "rem ").concat(right, "rem ").concat(bottom, "rem ").concat(left, "rem");
};

var getInputAttributes = function getInputAttributes(props) {
  // Get the styles for the button's selected size.
  var colorStyle = _colors.input[props.state];
  var vPadding = _sizes.inputPadding.vPadding,
      hzPadding = _sizes.inputPadding.hzPadding;
  var pright = props.icon ? hzPadding + 2.3 : hzPadding;
  var focusedPadding = getPadding(vPadding - 0.05, pright - 0.05, vPadding - 0.05, hzPadding - 0.05);
  var padding = props.state == "focused" ? focusedPadding : getPadding(vPadding, pright, vPadding, hzPadding);
  var width = props.fullWidth ? "100%" : props.width;
  return (0, _objectSpread2["default"])({}, colorStyle, _sizes.input, {
    width: width,
    padding: padding
  });
};

var getLabelAttributes = function getLabelAttributes(props) {
  if (props.state === "disabled") {
    return (0, _objectSpread2["default"])({}, _sizes.inputPhFocused, {
      labelBackground: _colors.input.disabled.background
    });
  }

  if (props.showLbl) {
    return (0, _objectSpread2["default"])({}, _sizes.inputPhFocused, {
      background: _colors.input["default"].background
    });
  }

  return (0, _objectSpread2["default"])({}, _sizes.inputPhDefault, {
    background: _colors.input["default"].background
  });
};

var getHelperText = function getHelperText(helperText, errorMsg) {
  if (errorMsg) {
    return errorMsg;
  }

  if (helperText) {
    return helperText;
  }

  return "";
};

exports.getHelperText = getHelperText;

var getAttributes = function getAttributes(key) {
  return function (props) {
    return getInputAttributes(props)[key];
  };
};

exports.getAttributes = getAttributes;

var getLabelAttr = function getLabelAttr(key) {
  return function (props) {
    return getLabelAttributes(props)[key];
  };
};

exports.getLabelAttr = getLabelAttr;

var getState = function getState(props, focused, error) {
  if (props.disabled) {
    return "disabled";
  }

  if (error) {
    return "error";
  }

  if (focused) {
    return "focused";
  }

  return "default";
};

exports.getState = getState;
var updateResult = (0, _lodashEs.debounce)(function (props, newValue, setErrMsg) {
  var result = props.onChange(newValue);
  setErrMsg((0, _lodashEs.get)(result, "errorMsg", ""));
}, 250);

var onValueChange = function onValueChange(props, valueChange, setErrMsg) {
  return function (e) {
    var newValue = (0, _lodashEs.get)(e, "target.value");
    valueChange(newValue);
    updateResult(props, newValue, setErrMsg);
  };
};

exports.onValueChange = onValueChange;

var onBlurred = function onBlurred(props, valueChange, setErrMsg, onFocusToggle) {
  return function (e) {
    var newValue = (0, _lodashEs.get)(e, "target.value");
    valueChange(newValue);
    onFocusToggle();
    var result = props.onBlur(newValue);
    setErrMsg((0, _lodashEs.get)(result, "errorMsg", ""));
  };
};

exports.onBlurred = onBlurred;