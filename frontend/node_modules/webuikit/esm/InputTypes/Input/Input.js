"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodashEs = require("lodash-es");

var _Icon = _interopRequireDefault(require("../../Icon"));

var _svgs = _interopRequireDefault(require("../../Icon/svgs"));

var _commonHelper = require("../../helpers/commonHelper");

var _inputHelper = require("../inputHelper");

var _misc = _interopRequireDefault(require("../../tokens/misc"));

// libraries
// components
// helpers
var Input = function Input(props) {
  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      focused = _useState2[0],
      toggleFocus = _useState2[1];

  var _useState3 = (0, _react.useState)(props.value),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      value = _useState4[0],
      valueChange = _useState4[1];

  var _useState5 = (0, _react.useState)(""),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      errMsg = _useState6[0],
      setErrMsg = _useState6[1]; // eslint-disable-next-line no-unused-vars


  var onFocusToggle = function onFocusToggle(_) {
    toggleFocus(!focused);
  };

  var state = (0, _inputHelper.getState)(props, focused, errMsg);
  var helperTxt = (0, _inputHelper.getHelperText)(props.helperText, errMsg);
  var inputProps = {
    width: props.width,
    icon: props.icon,
    disabled: props.disabled
  };
  return _react["default"].createElement(Input.Wrapper, {
    fullWidth: props.fullWidth,
    onFocus: onFocusToggle,
    onBlur: (0, _inputHelper.onBlurred)(props, valueChange, setErrMsg, onFocusToggle),
    onChange: (0, _inputHelper.onValueChange)(props, valueChange, setErrMsg)
  }, _react["default"].createElement(Input.ElementWrapper, {
    width: props.width
  }, _react["default"].createElement(Input.Element, (0, _extends2["default"])({}, inputProps, {
    value: value,
    state: state,
    autoComplete: props.autocomplete ? "on" : "nope"
  })), props.icon && _react["default"].createElement(_Icon["default"].Element, null, _react["default"].createElement(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    fill: props.iconColor,
    width: 17,
    height: 17,
    viewBox: "0 0 20 20" // don't change this

  }, (0, _svgs["default"])(props.icon)))), props.disabled ? _react["default"].createElement(Input.LabelDisabled, {
    showLbl: true,
    state: state
  }, props.label) : _react["default"].createElement(Input.Label, {
    showLbl: focused || !!value,
    state: state
  }, props.label), helperTxt && _react["default"].createElement(Input.Helper, {
    state: state
  }, helperTxt));
};

Input.ElementWrapper = _styledComponents["default"].section.withConfig({
  displayName: "Input__ElementWrapper",
  componentId: "sc-1oud1al-0"
})(["position:relative;margin:0;width:", ";"], (0, _inputHelper.getAttributes)("width"));
Input.Helper = _styledComponents["default"].div.withConfig({
  displayName: "Input__Helper",
  componentId: "sc-1oud1al-1"
})(["height:13px;color:", ";font-size:11px;line-height:13px;margin-top:8px;"], (0, _inputHelper.getAttributes)("helperColor"));
Input.Wrapper = _styledComponents["default"].section.withConfig({
  displayName: "Input__Wrapper",
  componentId: "sc-1oud1al-2"
})(["position:relative;width:", ";"], function (props) {
  return props.fullWidth ? "100%" : "auto";
});
Input.Label = _styledComponents["default"].label.withConfig({
  displayName: "Input__Label",
  componentId: "sc-1oud1al-3"
})(["position:absolute;pointer-events:none;transition:0.2s ease all;color:", ";top:", ";left:", ";font-size:", ";background:", ";padding:", ";"], (0, _inputHelper.getAttributes)("placeholder"), (0, _inputHelper.getLabelAttr)("top"), (0, _inputHelper.getLabelAttr)("left"), (0, _inputHelper.getLabelAttr)("fontSize"), (0, _inputHelper.getLabelAttr)("background"), (0, _inputHelper.getLabelAttr)("padding"));
Input.LabelDisabled = _styledComponents["default"].label.withConfig({
  displayName: "Input__LabelDisabled",
  componentId: "sc-1oud1al-4"
})(["position:absolute;pointer-events:none;color:", ";top:", ";left:", ";font-size:", ";background:", ";padding:", ";"], (0, _inputHelper.getAttributes)("placeholder"), (0, _inputHelper.getLabelAttr)("top"), (0, _inputHelper.getLabelAttr)("left"), (0, _inputHelper.getLabelAttr)("fontSize"), (0, _inputHelper.getLabelAttr)("labelBackground"), (0, _inputHelper.getLabelAttr)("padding"));
Input.Element = _styledComponents["default"].input.withConfig({
  displayName: "Input__Element",
  componentId: "sc-1oud1al-5"
})(["padding:", ";background:", ";border:", " ", ";font-size:", ";width:", ";outline:none;&::-webkit-input-placeholder{color:#a9a9a9;}box-sizing:border-box;border-radius:", ";color:", ";"], (0, _inputHelper.getAttributes)("padding"), (0, _inputHelper.getAttributes)("background"), (0, _inputHelper.getAttributes)("borderWidth"), (0, _inputHelper.getAttributes)("borderColor"), (0, _inputHelper.getAttributes)("fontSize"), (0, _inputHelper.getAttributes)("width"), _misc["default"].radius, (0, _inputHelper.getAttributes)("text"));
Input.propTypes = {
  label: _propTypes["default"].string.isRequired,
  value: _propTypes["default"].string,
  type: _propTypes["default"].string,
  width: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  onBlur: _propTypes["default"].func,
  disabled: _propTypes["default"].bool,
  helperText: _propTypes["default"].string,
  icon: _propTypes["default"].string,
  iconColor: _propTypes["default"].string,
  autocomplete: _propTypes["default"].bool,
  fullWidth: _propTypes["default"].bool
};
Input.defaultProps = {
  color: "white",
  disabled: false,
  value: "",
  type: "text",
  onChange: _lodashEs.noop,
  onBlur: _lodashEs.noop,
  helperText: "",
  iconColor: "#B5B5B5",
  autocomplete: true,
  fullWidth: false
};

var SVG = _styledComponents["default"].svg.withConfig({
  displayName: "Input__SVG",
  componentId: "sc-1oud1al-6"
})(["", ";position:absolute;top:15px;right:10px;"], _commonHelper.svgStyle);

var _default = Input;
exports["default"] = _default;