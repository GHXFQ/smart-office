"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodashEs = require("lodash-es");

var _reactDateRange = require("react-date-range");

require("style-loader!react-date-range/dist/styles.css");

require("style-loader!react-date-range/dist/theme/default.css");

// libraries
// components
// styles
var getDefaultColor = function getDefaultColor(key) {
  return function (props) {
    return props[key];
  };
};

var ComponentWrapper = _styledComponents["default"].section.withConfig({
  displayName: "DateRange__ComponentWrapper",
  componentId: "sc-1px9qac-0"
})(["&&& .rdrInRange{color:", " !important;top:6px;bottom:6px;left:0;right:0;}.rdrMonth{width:32rem;}.rdrDayToday .rdrDayNumber span:after{background:", " !important;}.rdrDayNumber span{color:#1c1c1c !important;}.rdrEndEdge,.rdrStartEdge{right:5.5px !important;left:5.5px !important;border-radius:50% !important;top:3px;bottom:5px;z-index:1;}.rdrDay{height:2.428em;}.rdrCalendarWrapper:not(.rdrDateRangeWrapper) .rdrDayHovered .rdrDayNumber:after{border-radius:50% !important;left:5px !important;right:5px !important;}.rdrDayStartPreview{left:5px !important;border-top-left-radius:50% !important;border-bottom-left-radius:50% !important;}.rdrDayEndPreview{right:5px !important;border-top-right-radius:50% !important;border-bottom-right-radius:50% !important;}.rdrDay:not(.rdrDayPassive) .rdrStartEdge ~ .rdrDayNumber span,.rdrDay:not(.rdrDayPassive) .rdrEndEdge ~ .rdrDayNumber span{color:#fff !important;}.rdrDay:not(.rdrDayPassive) .rdrStartEdge ~ .rdrDayNumber span,.rdrDay:not(.rdrDayPassive) .rdrEndEdge ~ .rdrDayNumber span{z-index:2;}.rdrDay:not(.rdrDayPassive) .rdrStartEdge:not(.rdrEndEdge) ~ .rdrDayNumber{background-color:", ";border-top-left-radius:50%;border-bottom-left-radius:50%;left:5.5px;top:6px;bottom:6px;span{padding-right:5px;}}.rdrDay:not(.rdrDayPassive) .rdrEndEdge:not(.rdrStartEdge) ~ .rdrDayNumber{background-color:", ";border-top-right-radius:50%;border-bottom-right-radius:50%;right:5.5px;top:6px;bottom:6px;span{padding-left:5px;}}.rdrDayPassive .rdrDayNumber span{color:#b5b5b5 !important;}"], getDefaultColor("rangeColor"), getDefaultColor("color"), getDefaultColor("rangeColor"), getDefaultColor("rangeColor"));

var DateRange = function DateRange(props) {
  var selectionRange = {
    startDate: props.startDate,
    endDate: props.endDate,
    key: "selection"
  };

  var _useState = (0, _react.useState)(selectionRange),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      date = _useState2[0],
      setDatePreview = _useState2[1];

  var onChange = function onChange(newDate) {
    setDatePreview((0, _objectSpread2["default"])({}, date, newDate.selection));
    props.onChange();
  };

  var Component = props.showRangePicker ? _reactDateRange.DateRangePicker : _reactDateRange.DateRange;
  return _react["default"].createElement(ComponentWrapper, {
    color: props.color,
    rangeColor: props.rangeColor
  }, _react["default"].createElement(Component, {
    ranges: [date],
    onChange: onChange,
    months: props.months,
    rangeColors: [props.color],
    scroll: {
      enabled: false,
      monthHeight: props.monthHeight,
      longMonthHeight: props.longMonthHeight
    },
    disabledDates: props.disabledDates,
    showDateDisplay: props.showDateDisplay
  }));
};

DateRange.propTypes = {
  startDate: _propTypes["default"].date,
  endDate: _propTypes["default"].date,
  showRangePicker: _propTypes["default"].bool,
  // infiniteScroll: PropTypes.bool,
  months: _propTypes["default"].number,
  color: _propTypes["default"].string,
  rangeColor: _propTypes["default"].string,
  disabledDates: _propTypes["default"].array,
  showDateDisplay: _propTypes["default"].bool,
  onChange: _propTypes["default"].func,
  monthHeight: _propTypes["default"].number,
  longMonthHeight: _propTypes["default"].number
};
DateRange.defaultProps = {
  startDate: new Date(),
  endDate: new Date(),
  showRangePicker: false,
  // infiniteScroll: false,
  months: 1,
  color: "#28A745",
  rangeColor: "#dcffe4",
  disabledDates: [],
  showDateDisplay: true,
  onChange: _lodashEs.noop,
  monthHeight: 300,
  longMonthHeight: 330
};
var _default = DateRange;
exports["default"] = _default;