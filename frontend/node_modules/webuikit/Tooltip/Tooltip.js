"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _misc = _interopRequireDefault(require("../tokens/misc"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tooltipTokens = require("../tokens/tooltipTokens");

var _TooltipUtil = require("./TooltipUtil");

/* eslint-disable indent */
var Tooltip = function Tooltip(props) {
  // eslint-disable-next-line react/prop-types
  var children = props.children,
      label = props.label,
      size = props.size,
      appearance = props.appearance;

  if (label.length === 0) {
    //do not show any tooltip if there is no label
    return _react["default"].createElement(_react["default"].Fragment, null, children);
  }

  var variant = _tooltipTokens.variants[size];
  var appearanceConfig = _tooltipTokens.appearanceConfigs[appearance];
  return _react["default"].createElement(Tooltip.container, null, children, _react["default"].createElement(Tooltip.Ele, (0, _extends2["default"])({}, props, {
    variant: variant,
    appearanceConfig: appearanceConfig
  }), props.label));
};

Tooltip.container = _styledComponents["default"].div.withConfig({
  displayName: "Tooltip__container",
  componentId: "sc-6un7j6-0"
})(["position:relative;display:inline-block;padding:0.2rem;cursor:pointer;"]);
Tooltip.Ele = _styledComponents["default"].span.withConfig({
  displayName: "Tooltip__Ele",
  componentId: "sc-6un7j6-1"
})(["visibility:hidden;position:absolute;width:", "rem;height:", ";background-color:", ";color:", ";text-align:center;padding:", ";border-radius:", "rem;z-index:1;opacity:0;border-width:0.2rem;border-style:solid;border-color:", ";transition:opacity ", ";:after{content:\"\";position:absolute;top:", ";left:", ";right:", ";background-color:", ";width:", "px;height:", "px;transform:rotate(-45deg);box-sizing:border-box;border-style:solid;border-width:2px;border-color:", ";}", " ", ":hover &{visibility:visible;opacity:1;}"], (0, _TooltipUtil.getAttr)("minWidth"), (0, _TooltipUtil.getAttr)("minHeight") ? (0, _TooltipUtil.getAttr)("minHeight") + "px" : "auto", (0, _TooltipUtil.getAttr)("bgColor"), (0, _TooltipUtil.getAttr)("color"), (0, _TooltipUtil.getAttr)("padding"), (0, _TooltipUtil.getAttr)("borderRadius"), (0, _TooltipUtil.getAttr)("borderColor"), _misc["default"].animationDuration, (0, _TooltipUtil.getAttr)("arrowTop"), (0, _TooltipUtil.getAttr)("arrowLeft"), (0, _TooltipUtil.getAttr)("arrowRight"), (0, _TooltipUtil.getAttr)("bgColor"), (0, _TooltipUtil.getAttr)("arrowSize"), (0, _TooltipUtil.getAttr)("arrowSize"), (0, _TooltipUtil.getAttr)("arrowBorderColor"), function (props) {
  switch (props.position) {
    case "top":
      return (0, _styledComponents.css)(["left:-50%;margin-left:", ";bottom:", ";"], (0, _TooltipUtil.getAttr)("tooltipMarginLeft"), (0, _TooltipUtil.getAttr)("toolTipBottom"));

    case "left":
      return (0, _styledComponents.css)(["right:calc(100% + ", "px);top:calc(-50% - ", "px);"], (0, _TooltipUtil.getAttr)("arrowHeight"), (0, _TooltipUtil.getAttr)("arrowHeight"));

    case "bottom":
      return (0, _styledComponents.css)(["left:50%;margin-left:", ";", " top:calc(100% + ", "px);"], (0, _TooltipUtil.getAttr)("tooltipMarginLeft"), ""
      /* top:'unset'; */
      , (0, _TooltipUtil.getAttr)("arrowHeight"));

    case "right":
      return (0, _styledComponents.css)(["left:calc(100% + ", "px);top:calc(-50% - ", "px);"], (0, _TooltipUtil.getAttr)("arrowHeight"), (0, _TooltipUtil.getAttr)("arrowHeight"));
  }
}, Tooltip.container);
Tooltip.propTypes = {
  position: _propTypes["default"].oneOf(["top", "left", "bottom", "right"]),
  appearance: _propTypes["default"].oneOf(["dark", "light"]),
  size: _propTypes["default"].oneOf(["small", "big"]),
  label: _propTypes["default"].string.isRequired
};
Tooltip.defaultProps = {
  position: "top",
  appearance: "dark",
  size: "big",
  label: ""
};
var _default = Tooltip;
exports["default"] = _default;