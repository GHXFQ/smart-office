"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getToolTipAttr = exports.getArrowHeight = exports.getAttr = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

/* eslint-disable indent */
var getArrowHeight = function getArrowHeight(side) {
  // return Math.ceil(Math.sqrt(2 * side * side) / 2);
  return Math.floor(side / 2);
};

exports.getArrowHeight = getArrowHeight;

var getToolTipAttr = function getToolTipAttr(_ref) {
  var position = _ref.position,
      appearanceConfig = _ref.appearanceConfig,
      variant = _ref.variant;
  var styles = {};
  styles.arrow = {};
  var arrowHeight = getArrowHeight(variant.size.arrow);
  styles.arrow.height = styles.arrow.height = variant.size.arrow;
  styles.arrowSize = variant.size.arrow;

  switch (position) {
    case "top":
      styles.arrowTop = "calc(100% - ".concat(arrowHeight / 10, "rem)");
      styles.arrowLeft = "calc(50% - ".concat(arrowHeight / 10, "rem)");
      styles.arrowRight = "unset";
      styles.arrowBorderColor = "transparent transparent ".concat(appearanceConfig.borderColor, " ").concat(appearanceConfig.borderColor);
      styles.toolTipBottom = "calc(100% + ".concat(arrowHeight / 10, "rem)");
      styles.tooltipMarginLeft = "-".concat(Math.floor(variant.minWidth / 20), "rem");
      break;

    case "bottom":
      styles.arrowTop = "-".concat(arrowHeight / 10, "rem");
      styles.arrowLeft = "calc(50% - ".concat(variant.size.arrow / 10, "rem)");
      styles.arrowRight = "unset";
      styles.arrowBorderColor = "".concat(appearanceConfig.borderColor, " ").concat(appearanceConfig.borderColor, " transparent transparent");
      styles.tooltipMarginLeft = "-".concat(Math.floor(variant.minWidth / 20), "rem");
      styles.toolTipBottom = "calc(100% + ".concat(arrowHeight / 10, "rem)");
      break;

    case "left":
      styles.arrowTop = "calc(50% - ".concat(arrowHeight / 10, "rem)");
      styles.arrowLeft = "unset";
      styles.arrowRight = "-".concat(arrowHeight / 10, "rem");
      styles.arrowBorderColor = "transparent ".concat(appearanceConfig.borderColor, " ").concat(appearanceConfig.borderColor, " transparent");
      break;

    case "right":
      styles.arrowTop = "calc(50% - ".concat(arrowHeight / 10, "rem)");
      styles.arrowLeft = "-".concat(arrowHeight / 10, "rem");
      styles.arrowRight = "unset";
      styles.arrowBorderColor = "".concat(appearanceConfig.borderColor, " transparent transparent").concat(appearanceConfig.borderColor);
      break;
  }

  return (0, _objectSpread2["default"])({}, styles, appearanceConfig, variant, {
    arrowHeight: arrowHeight
  });
};

exports.getToolTipAttr = getToolTipAttr;

var getAttr = function getAttr(key) {
  return function (props) {
    return getToolTipAttr(props)[key];
  };
};

exports.getAttr = getAttr;