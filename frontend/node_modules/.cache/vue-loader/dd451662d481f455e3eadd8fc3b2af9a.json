{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\KnowledgeBuilder.vue?vue&type=template&id=400b446b&scoped=true","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\KnowledgeBuilder.vue","mtime":1747277378869},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1746431219000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1746431202000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0ia25vd2xlZGdlLWJ1aWxkZXIiPgogICAgPCEtLSDnn6Xor4blupPmnoTlu7rlr7nor53moYYgLS0+CiAgICA8ZWwtZGlhbG9nCiAgICAgIHYtbW9kZWw9InZpc2libGUiCiAgICAgIHRpdGxlPSLmnoTlu7rnn6Xor4blupMiCiAgICAgIHdpZHRoPSI2NTBweCIKICAgICAgOmNsb3NlLW9uLWNsaWNrLW1vZGFsPSJmYWxzZSIKICAgICAgOnNob3ctY2xvc2U9ImJ1aWxkaW5nU3RhdHVzICE9PSAncHJvY2Vzc2luZyciCiAgICAgIGNsYXNzPSJidWlsZGVyLWRpYWxvZyIKICAgID4KICAgICAgPGRpdiBjbGFzcz0iYnVpbGRpbmctc3RhdHVzIiA6a2V5PSJidWlsZGluZ1N0YXR1cyI+CiAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLWljb24iPgogICAgICAgICAgPGVsLWljb24gdi1pZj0iYnVpbGRpbmdTdGF0dXMgPT09ICdwcm9jZXNzaW5nJyIgY2xhc3M9InNwaW5uaW5nIj48TG9hZGluZyAvPjwvZWwtaWNvbj4KICAgICAgICAgIDxlbC1pY29uIHYtZWxzZS1pZj0iYnVpbGRpbmdTdGF0dXMgPT09ICdjb21wbGV0ZWQnIiBjbGFzcz0ic3VjY2VzcyI+PENpcmNsZUNoZWNrRmlsbGVkIC8+PC9lbC1pY29uPgogICAgICAgICAgPGVsLWljb24gdi1lbHNlLWlmPSJidWlsZGluZ1N0YXR1cyA9PT0gJ2ZhaWxlZCciIGNsYXNzPSJlcnJvciI+PENpcmNsZUNsb3NlRmlsbGVkIC8+PC9lbC1pY29uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InN0YXR1cy10ZXh0Ij4KICAgICAgICAgIDxoMz57eyBidWlsZGluZ1N0YXR1cyA9PT0gJ3BlbmRpbmcnID8gJ+WHhuWkh+aehOW7uuefpeivhuW6kycgOiAKICAgICAgICAgICAgICAgIGJ1aWxkaW5nU3RhdHVzID09PSAncHJvY2Vzc2luZycgPyAn5q2j5Zyo5p6E5bu655+l6K+G5bqTJyA6IAogICAgICAgICAgICAgICAgYnVpbGRpbmdTdGF0dXMgPT09ICdjb21wbGV0ZWQnID8gJ+efpeivhuW6k+aehOW7uuWujOaIkCcgOiAn55+l6K+G5bqT5p6E5bu65aSx6LSlJyB9fTwvaDM+CiAgICAgICAgICA8cD57eyBidWlsZGluZ01lc3NhZ2UgfX08L3A+CiAgICAgICAgICAKICAgICAgICAgIDxkaXYgdi1pZj0iYnVpbGRpbmdTdGF0dXMgPT09ICdwcm9jZXNzaW5nJyIgY2xhc3M9InByb2dyZXNzLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxlbC1wcm9ncmVzcyA6cGVyY2VudGFnZT0iYnVpbGRpbmdQcm9ncmVzcyIgOmZvcm1hdD0icCA9PiBgJHtwfSVgIj48L2VsLXByb2dyZXNzPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICAgICAgICAgIDxkaXYgdi1pZj0iYnVpbGRpbmdTdGF0dXMgPT09ICdwZW5kaW5nJyIgY2xhc3M9ImluZm8tY29udGFpbmVyIj4KICAgICAgICAgICAgPGVsLWFsZXJ0CiAgICAgICAgICAgICAgdGl0bGU9IuaehOW7uuefpeivhuW6k+WwhuWkhOeQhuaJgOacieW3suS4iuS8oOeahOaWh+aho++8jOW5tuWwhuWug+S7rOaVtOWQiOWIsOS4gOS4que7n+S4gOeahOefpeivhuW6k+S4rSIKICAgICAgICAgICAgICB0eXBlPSJpbmZvIgogICAgICAgICAgICAgIDpjbG9zYWJsZT0iZmFsc2UiCiAgICAgICAgICAgICAgc2hvdy1pY29uCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8cD7ov5nkuKrov4fnqIvlj6/og73pnIDopoHkuIDkupvml7bpl7TvvIzlj5blhrPkuo7mlofmoaPmlbDph4/lkozlpKflsI/jgII8L3A+CiAgICAgICAgICAgICAgPHA+5p6E5bu65a6M5oiQ5ZCO77yM5oKo5bCG6IO95aSf5L2/55So5pm66IO96Zeu562U5Yqf6IO95a+555+l6K+G5bqT6L+b6KGM5o+Q6Zeu44CCPC9wPgogICAgICAgICAgICA8L2VsLWFsZXJ0PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICAgICAgICAgIDxkaXYgdi1pZj0iYnVpbGRpbmdTdGF0dXMgPT09ICdjb21wbGV0ZWQnIiBjbGFzcz0ic3VjY2Vzcy1jb250YWluZXIiPgogICAgICAgICAgICA8ZWwtYWxlcnQKICAgICAgICAgICAgICB0aXRsZT0i55+l6K+G5bqT5bey5oiQ5Yqf5p6E5bu677yBIgogICAgICAgICAgICAgIHR5cGU9InN1Y2Nlc3MiCiAgICAgICAgICAgICAgOmNsb3NhYmxlPSJmYWxzZSIKICAgICAgICAgICAgICBzaG93LWljb24KICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxwPuaJgOacieaWh+aho+W3suiiq+WkhOeQhuW5tuaVtOWQiOWIsOefpeivhuW6k+S4re+8jOaCqOeOsOWcqOWPr+S7peS9v+eUqOaZuuiDvemXruetlOWKn+iDveOAgjwvcD4KICAgICAgICAgICAgPC9lbC1hbGVydD4KICAgICAgICAgICAgCiAgICAgICAgICAgIDwhLS0gR3JhcGhSQUflkb3ku6TovpPlh7rlhoXlrrkgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyYXBocmFnLW91dHB1dC1jb250YWluZXIiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0ib3V0cHV0LXRpdGxlIj5HcmFwaFJBRyDntKLlvJXmnoTlu7rovpPlh7o8L2g0PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyYXBocmFnLWNvbW1hbmQiPgogICAgICAgICAgICAgICAgPGVsLXRhZyB0eXBlPSJpbmZvIj5weXRob24gLW0gZ3JhcGhyYWcgaW5kZXggLS1yb290IC4vcmFndGVzdDwvZWwtdGFnPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im91dHB1dC1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxwcmUgdi1pZj0iYnVpbGRpbmdPdXRwdXQiIHJlZj0ib3V0cHV0UHJlIj57eyBidWlsZGluZ091dHB1dCB9fTwvcHJlPgogICAgICAgICAgICAgICAgPHByZSB2LWVsc2UtaWY9ImZ1bGxPdXRwdXQiIHJlZj0ib3V0cHV0UHJlIj57eyBmdWxsT3V0cHV0IH19PC9wcmU+CiAgICAgICAgICAgICAgICA8cCB2LWVsc2UgY2xhc3M9Im5vLW91dHB1dCI+5rKh5pyJ5Y+v55So55qE6L6T5Ye65YaF5a65PC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0iYnVpbGRpbmdTdGF0cyIgY2xhc3M9Im91dHB1dC1zdGF0cyI+CiAgICAgICAgICAgICAgICA8aDU+5p6E5bu657uf6K6hPC9oNT4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+5aSE55CG5pe26Ze0Ojwvc3Ryb25nPiB7eyBidWlsZGluZ1N0YXRzLmR1cmF0aW9uIHx8ICfmnKrnn6UnIH19PC9saT4KICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+5paH5qGj5oC75pWwOjwvc3Ryb25nPiB7eyBidWlsZGluZ1N0YXRzLnRvdGFsRG9jcyB8fCAwIH19PC9saT4KICAgICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+5YaF5a655Z2X5pWwOjwvc3Ryb25nPiB7eyBidWlsZGluZ1N0YXRzLnRvdGFsQ2h1bmtzIHx8IDAgfX08L2xpPgogICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz7lvIDlp4vml7bpl7Q6PC9zdHJvbmc+IHt7IGZvcm1hdEJ1aWxkVGltZShidWlsZGluZ1N0YXRzLnN0YXJ0VGltZSkgfX08L2xpPgogICAgICAgICAgICAgICAgICA8bGk+PHN0cm9uZz7lrozmiJDml7bpl7Q6PC9zdHJvbmc+IHt7IGZvcm1hdEJ1aWxkVGltZShidWlsZGluZ1N0YXRzLmVuZFRpbWUpIH19PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPCEtLSDntKLlvJXmlofku7bkvY3nva7kv6Hmga8gLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5kZXgtbG9jYXRpb24taW5mbyI+CiAgICAgICAgICAgICAgICA8ZWwtYWxlcnQKICAgICAgICAgICAgICAgICAgdGl0bGU9Iue0ouW8leaWh+S7tuS9jee9riIKICAgICAgICAgICAgICAgICAgdHlwZT0iaW5mbyIKICAgICAgICAgICAgICAgICAgOmNsb3NhYmxlPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgc2hvdy1pY29uCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxwPue0ouW8leaWh+S7tuW3suS/neWtmOWIsCA8Y29kZT5ncmFwaHJhZy1tYWluL3JhZ3Rlc3QvaW5kZXg8L2NvZGU+IOebruW9le+8jOWPr+eUqOS6juaZuuiDvemXruetlOezu+e7nzwvcD4KICAgICAgICAgICAgICAgICAgPHA+5ZG95LukOiA8Y29kZT5weXRob24gLW0gZ3JhcGhyYWcgaW5kZXggLS1yb290IC4vcmFndGVzdDwvY29kZT48L3A+CiAgICAgICAgICAgICAgICA8L2VsLWFsZXJ0PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgCiAgICAgICAgICA8ZGl2IHYtaWY9ImJ1aWxkaW5nU3RhdHVzID09PSAnZmFpbGVkJyIgY2xhc3M9ImVycm9yLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxlbC1hbGVydAogICAgICAgICAgICAgIHRpdGxlPSLnn6Xor4blupPmnoTlu7rlpLHotKUiCiAgICAgICAgICAgICAgdHlwZT0iZXJyb3IiCiAgICAgICAgICAgICAgOmNsb3NhYmxlPSJmYWxzZSIKICAgICAgICAgICAgICBzaG93LWljb24KICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxwPnt7IGJ1aWxkaW5nTWVzc2FnZSB9fTwvcD4KICAgICAgICAgICAgICA8cD7or7fmo4Dmn6Xml6Xlv5fmiJbogZTns7vnrqHnkIblkZjop6PlhrPpl67popjjgII8L3A+CiAgICAgICAgICAgIDwvZWwtYWxlcnQ+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDx0ZW1wbGF0ZSAjZm9vdGVyPgogICAgICAgIDxzcGFuIGNsYXNzPSJkaWFsb2ctZm9vdGVyIj4KICAgICAgICAgIDxlbC1idXR0b24gdi1pZj0iYnVpbGRpbmdTdGF0dXMgIT09ICdwcm9jZXNzaW5nJyIgQGNsaWNrPSJjbG9zZSI+5YWz6ZetPC9lbC1idXR0b24+CiAgICAgICAgICA8ZWwtYnV0dG9uIAogICAgICAgICAgICB2LWlmPSJidWlsZGluZ1N0YXR1cyA9PT0gJ3BlbmRpbmcnIiAKICAgICAgICAgICAgdHlwZT0icHJpbWFyeSIgCiAgICAgICAgICAgIEBjbGljaz0ic3RhcnRCdWlsZCI+5byA5aeL5p6E5bu6PC9lbC1idXR0b24+CiAgICAgICAgICA8ZWwtYnV0dG9uIAogICAgICAgICAgICB2LWlmPSJidWlsZGluZ1N0YXR1cyA9PT0gJ2ZhaWxlZCciIAogICAgICAgICAgICB0eXBlPSJwcmltYXJ5IiAKICAgICAgICAgICAgQGNsaWNrPSJzdGFydEJ1aWxkIj7ph43or5U8L2VsLWJ1dHRvbj4KICAgICAgICA8L3NwYW4+CiAgICAgIDwvdGVtcGxhdGU+CiAgICA8L2VsLWRpYWxvZz4KICA8L2Rpdj4K"},{"version":3,"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\KnowledgeBuilder.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB;MACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACrF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACltB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACnE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;UAE3B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACpC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC5C,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACvE,CAAC,CAAC,CAAC,CAAC,CAAC;cACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC1C,CAAC,CAAC,CAAC,CAAC,CAAC;cACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACZ,CAAC,CAAC,CAAC;kBACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kBAC7E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CA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","file":"C:/Users/18083/Desktop/CCIT/office/smart-office/frontend/src/components/KnowledgeBuilder.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"knowledge-builder\">\n    <!-- 知识库构建对话框 -->\n    <el-dialog\n      v-model=\"visible\"\n      title=\"构建知识库\"\n      width=\"650px\"\n      :close-on-click-modal=\"false\"\n      :show-close=\"buildingStatus !== 'processing'\"\n      class=\"builder-dialog\"\n    >\n      <div class=\"building-status\" :key=\"buildingStatus\">\n        <div class=\"status-icon\">\n          <el-icon v-if=\"buildingStatus === 'processing'\" class=\"spinning\"><Loading /></el-icon>\n          <el-icon v-else-if=\"buildingStatus === 'completed'\" class=\"success\"><CircleCheckFilled /></el-icon>\n          <el-icon v-else-if=\"buildingStatus === 'failed'\" class=\"error\"><CircleCloseFilled /></el-icon>\n        </div>\n        <div class=\"status-text\">\n          <h3>{{ buildingStatus === 'pending' ? '准备构建知识库' : \n                buildingStatus === 'processing' ? '正在构建知识库' : \n                buildingStatus === 'completed' ? '知识库构建完成' : '知识库构建失败' }}</h3>\n          <p>{{ buildingMessage }}</p>\n          \n          <div v-if=\"buildingStatus === 'processing'\" class=\"progress-container\">\n            <el-progress :percentage=\"buildingProgress\" :format=\"p => `${p}%`\"></el-progress>\n          </div>\n          \n          <div v-if=\"buildingStatus === 'pending'\" class=\"info-container\">\n            <el-alert\n              title=\"构建知识库将处理所有已上传的文档，并将它们整合到一个统一的知识库中\"\n              type=\"info\"\n              :closable=\"false\"\n              show-icon\n            >\n              <p>这个过程可能需要一些时间，取决于文档数量和大小。</p>\n              <p>构建完成后，您将能够使用智能问答功能对知识库进行提问。</p>\n            </el-alert>\n          </div>\n          \n          <div v-if=\"buildingStatus === 'completed'\" class=\"success-container\">\n            <el-alert\n              title=\"知识库已成功构建！\"\n              type=\"success\"\n              :closable=\"false\"\n              show-icon\n            >\n              <p>所有文档已被处理并整合到知识库中，您现在可以使用智能问答功能。</p>\n            </el-alert>\n            \n            <!-- GraphRAG命令输出内容 -->\n            <div class=\"graphrag-output-container\">\n              <h4 class=\"output-title\">GraphRAG 索引构建输出</h4>\n              <div class=\"graphrag-command\">\n                <el-tag type=\"info\">python -m graphrag index --root ./ragtest</el-tag>\n              </div>\n              <div class=\"output-content\">\n                <pre v-if=\"buildingOutput\" ref=\"outputPre\">{{ buildingOutput }}</pre>\n                <pre v-else-if=\"fullOutput\" ref=\"outputPre\">{{ fullOutput }}</pre>\n                <p v-else class=\"no-output\">没有可用的输出内容</p>\n              </div>\n              <div v-if=\"buildingStats\" class=\"output-stats\">\n                <h5>构建统计</h5>\n                <ul>\n                  <li><strong>处理时间:</strong> {{ buildingStats.duration || '未知' }}</li>\n                  <li><strong>文档总数:</strong> {{ buildingStats.totalDocs || 0 }}</li>\n                  <li><strong>内容块数:</strong> {{ buildingStats.totalChunks || 0 }}</li>\n                  <li><strong>开始时间:</strong> {{ formatBuildTime(buildingStats.startTime) }}</li>\n                  <li><strong>完成时间:</strong> {{ formatBuildTime(buildingStats.endTime) }}</li>\n                </ul>\n              </div>\n              \n              <!-- 索引文件位置信息 -->\n              <div class=\"index-location-info\">\n                <el-alert\n                  title=\"索引文件位置\"\n                  type=\"info\"\n                  :closable=\"false\"\n                  show-icon\n                >\n                  <p>索引文件已保存到 <code>graphrag-main/ragtest/index</code> 目录，可用于智能问答系统</p>\n                  <p>命令: <code>python -m graphrag index --root ./ragtest</code></p>\n                </el-alert>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"buildingStatus === 'failed'\" class=\"error-container\">\n            <el-alert\n              title=\"知识库构建失败\"\n              type=\"error\"\n              :closable=\"false\"\n              show-icon\n            >\n              <p>{{ buildingMessage }}</p>\n              <p>请检查日志或联系管理员解决问题。</p>\n            </el-alert>\n          </div>\n        </div>\n      </div>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button v-if=\"buildingStatus !== 'processing'\" @click=\"close\">关闭</el-button>\n          <el-button \n            v-if=\"buildingStatus === 'pending'\" \n            type=\"primary\" \n            @click=\"startBuild\">开始构建</el-button>\n          <el-button \n            v-if=\"buildingStatus === 'failed'\" \n            type=\"primary\" \n            @click=\"startBuild\">重试</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, onBeforeUnmount, nextTick, watch } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport dayjs from 'dayjs'\nimport { buildKnowledgeBase, getKnowledgeBaseStatus } from '@/api/knowledge'\nimport { \n  Loading, \n  CircleCheckFilled, \n  CircleCloseFilled \n} from '@element-plus/icons-vue'\n\nexport default {\n  name: 'KnowledgeBuilder',\n  components: {\n    Loading,\n    CircleCheckFilled,\n    CircleCloseFilled\n  },\n  props: {\n    modelValue: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue', 'build-completed', 'build-failed'],\n  setup(props, { emit }) {\n    // 构建相关状态\n    const visible = computed({\n      get: () => props.modelValue,\n      set: (val) => emit('update:modelValue', val)\n    })\n    const buildingStatus = ref('pending') // pending, processing, completed, failed\n    const buildingProgress = ref(0)\n    const buildingMessage = ref('正在初始化...') // 初始化消息\n    const buildingOutput = ref('') // GraphRAG命令输出\n    const fullOutput = ref('') // 完整GraphRAG命令输出 (备用)\n    const buildingStats = ref(null) // 构建统计信息\n    \n    // 定时器ID\n    let pollTimer = null\n\n    // 清除轮询定时器\n    const clearPollTimer = () => {\n      if (pollTimer) {\n        clearTimeout(pollTimer)\n        pollTimer = null\n        console.log('Polling timer cleared.');\n      }\n    }\n\n    // 启动知识库构建\n    const startBuild = async () => {\n      console.log('startBuild called');\n      try {\n        buildingStatus.value = 'processing'\n        buildingMessage.value = '正在启动知识库构建，请稍候...' // 更明确的启动消息\n        buildingProgress.value = 0\n        buildingOutput.value = '' // 清空旧输出\n        fullOutput.value = ''   // 清空旧输出\n        buildingStats.value = null\n        \n        clearPollTimer(); // 开始构建前先清除旧的定时器\n        console.log('Calling buildKnowledgeBase API...');\n        const response = await buildKnowledgeBase()\n        console.log('buildKnowledgeBase API response:', response)\n        \n        // API调用成功后立即开始轮询，初始延迟短一点\n        pollTimer = setTimeout(pollBuildStatus, 100); \n        console.log('Initial pollBuildStatus scheduled.');\n\n      } catch (error) {\n        console.error('启动知识库构建时出错:', error)\n        buildingStatus.value = 'failed'\n        buildingMessage.value = error.response?.data?.message || error.message || '启动构建失败'\n        emit('build-failed', error)\n        clearPollTimer();\n      }\n    }\n\n    // 轮询构建状态\n    const pollBuildStatus = async () => {\n      console.log('pollBuildStatus called. Current status:', buildingStatus.value);\n      // 如果已经是完成或失败状态，或者对话框不可见，则不应再轮询\n      if ((buildingStatus.value === 'completed' || buildingStatus.value === 'failed') && pollTimer) {\n          console.log('Build already completed or failed, clearing timer from pollBuildStatus.')\n          clearPollTimer();\n          return;\n      }\n      if (!visible.value && pollTimer) {\n          console.log('Dialog not visible, clearing timer from pollBuildStatus.');\n          clearPollTimer();\n          return;\n      }\n\n      try {\n        console.log('Calling getKnowledgeBaseStatus API...');\n        const response = await getKnowledgeBaseStatus()\n        // 新增的详细日志\n        console.log('DEBUG: Full getKnowledgeBaseStatus API response object:', JSON.stringify(response, null, 2));\n        console.log('DEBUG: typeof response:', typeof response);\n        if (response) {\n          console.log('DEBUG: Keys in response object:', Object.keys(response));\n          console.log('DEBUG: response.status (HTTP status):', response.status);\n          console.log('DEBUG: response.data value is:', response.data);\n          console.log('DEBUG: typeof response.data:', typeof response.data);\n        } else {\n          console.log('DEBUG: Response object itself is null or undefined.');\n        }\n        // 原有的日志\n        console.log('getKnowledgeBaseStatus API response data:', response.data)\n        \n        // response 对象本身就是我们期望的数据\n        if (response && typeof response === 'object' && response.status) { \n          const statusData = response; \n          \n          console.log('Received statusData from backend (using direct response):', JSON.stringify(statusData));\n          console.log('Backend status received (from direct response):', statusData.status);\n          \n          buildingStatus.value = statusData.status || 'processing';\n          console.log('Frontend buildingStatus.value updated to:', buildingStatus.value);\n          buildingMessage.value = statusData.message || (buildingStatus.value === 'processing' ? '正在处理中，请稍候...' : '等待状态更新...');\n          buildingProgress.value = statusData.progress || buildingProgress.value;\n          \n          console.log('Updated frontend status:', buildingStatus.value, 'Progress:', buildingProgress.value, 'Message:', buildingMessage.value);\n\n          // 处理GraphRAG命令输出\n          if (statusData.full_output) {\n            console.log('Using full_output for display.');\n            buildingOutput.value = statusData.full_output;\n            fullOutput.value = statusData.full_output;\n          } else if (statusData.graphrag_output) {\n            console.log('Using graphrag_output for display.');\n            buildingOutput.value = statusData.graphrag_output;\n          } else {\n            console.log('No specific output field (full_output or graphrag_output) from backend yet.');\n          }\n          console.log('Current buildingOutput (first 100 chars): ', buildingOutput.value ? buildingOutput.value.substring(0,100) : \"N/A\");\n          \n          // 滚动输出框到底部\n          nextTick(() => {\n            const outputElem = document.querySelector('.output-content pre')\n            if (outputElem) {\n              outputElem.scrollTop = outputElem.scrollHeight\n            }\n          })\n          \n          // 如果还在处理中，继续轮询\n          if (buildingStatus.value === 'processing') {\n            const pollInterval = 1000 // 统一轮询间隔为1秒\n            console.log(`Status is 'processing'. Scheduling next poll in ${pollInterval}ms.`);\n            clearPollTimer(); // 清除旧的，避免重复\n            pollTimer = setTimeout(pollBuildStatus, pollInterval)\n          } else if (buildingStatus.value === 'completed') {\n            console.log('Status is', buildingStatus.value, '. Build finished successfully.');\n            buildingProgress.value = 100; //  确保完成时进度为100%\n            // 构建完成，处理统计数据\n            const startTime = statusData.started_at ? new Date(statusData.started_at) : null\n            const endTime = statusData.finished_at ? new Date(statusData.finished_at) : null\n            \n            buildingStats.value = {\n              startTime: startTime,\n              endTime: endTime,\n              duration: startTime && endTime ? calculateDuration(startTime, endTime) : '未知',\n              totalDocs: statusData.total_docs || 0,\n              totalChunks: statusData.total_chunks || 0\n            }\n            \n            ElMessage.success(statusData.message || '知识库构建完成！')\n            emit('build-completed')\n            clearPollTimer(); // 确保停止轮询\n          } else if (buildingStatus.value === 'failed') {\n            console.log('Status is', buildingStatus.value, '. Build failed.');\n            ElMessage.error(statusData.message || '知识库构建失败，请查看输出或日志。')\n            emit('build-failed', { message: statusData.message, detail: statusData.error_detail })\n            clearPollTimer(); // 确保停止轮询\n          } else {\n            console.warn('Unknown status from backend:', buildingStatus.value, 'Stopping poll.');\n            clearPollTimer(); // 未知状态，停止轮询以防意外\n          }\n        } else {\n          console.warn('Invalid or empty response object from getKnowledgeBaseStatus. Response:', JSON.stringify(response));\n          buildingMessage.value = '获取状态响应格式无效...';\n          if(buildingStatus.value === 'processing'){\n             const pollInterval = 3000; \n             clearPollTimer();\n             pollTimer = setTimeout(pollBuildStatus, pollInterval);\n          } else if (buildingStatus.value !== 'completed' && buildingStatus.value !== 'failed') {\n            buildingStatus.value = 'failed';\n            buildingMessage.value = '获取状态失败，响应无效。';\n            emit('build-failed', { message: '获取状态失败，响应无效。'});\n            clearPollTimer();\n          }\n        }\n      } catch (error) {\n        console.error('获取构建状态时出错 (pollBuildStatus catch):', error)\n        // 这里不轻易改变 buildingStatus.value 为 'failed'\n        // 除非错误非常严重，否则依赖下一次轮询或用户操作\n        buildingMessage.value = '获取构建状态失败: ' + (error.message || '未知错误') + '. 将尝试再次轮询。'\n        // 即使出错，如果还在processing，也尝试继续轮询，但间隔长一点\n        if(buildingStatus.value === 'processing'){\n            const pollInterval = 3000;\n            clearPollTimer();\n            pollTimer = setTimeout(pollBuildStatus, pollInterval);\n        } else {\n            // 如果不是processing状态了，可能就是真的失败了或者完成了但通信出错了\n            buildingStatus.value = 'failed'; // 标记为失败，以便用户可以重试\n            emit('build-failed', error);\n            clearPollTimer();\n        }\n      }\n    }\n    \n    // 计算持续时间\n    const calculateDuration = (start, end) => {\n      const diff = Math.abs(end - start)\n      const minutes = Math.floor(diff / 60000)\n      const seconds = ((diff % 60000) / 1000).toFixed(0)\n      return `${minutes}分${seconds}秒`\n    }\n    \n    // 格式化构建时间\n    const formatBuildTime = (dateObj) => {\n      if (!dateObj) return '未知'\n      return dayjs(dateObj).format('YYYY-MM-DD HH:mm:ss')\n    }\n    \n    // 关闭对话框\n    const close = () => {\n      visible.value = false\n    }\n    \n    // 组件挂载时\n    onMounted(() => {\n      console.log('KnowledgeBuilder onMounted. Initial modelValue:', props.modelValue);\n      // 不自动开始轮询，等待startBuild被调用\n    })\n    \n    // 组件销毁前清理\n    onBeforeUnmount(() => {\n      console.log('KnowledgeBuilder onBeforeUnmount. Clearing poll timer.');\n      clearPollTimer()\n    })\n\n    watch(visible, (newVal) => {\n      if (newVal) {\n        // 当对话框打开时\n        console.log('Dialog became visible. Current status:', buildingStatus.value);\n        if (buildingStatus.value !== 'processing') {\n          // 如果不是正在处理中 (例如是 completed, failed, 或初始的 pending)，\n          // 则重置为初始待构建状态，以便用户可以开始新的构建。\n          console.log('Resetting status to pending for new build session.');\n          buildingStatus.value = 'pending';\n          buildingMessage.value = '准备开始新的知识库构建。'; // 或者更合适的初始消息\n          buildingProgress.value = 0;\n          buildingOutput.value = '';\n          fullOutput.value = '';\n          buildingStats.value = null;\n          clearPollTimer(); // 确保没有意外的轮询\n        }\n        // 如果是 processing，则什么都不做，让它继续处理或轮询\n      } else {\n        // 当对话框关闭时\n        console.log('Dialog closed. Current status:', buildingStatus.value);\n        // 如果正在处理中，用户关闭了对话框，最好停止轮询，避免后台继续请求\n        if (buildingStatus.value === 'processing') {\n            console.log('Dialog closed during processing, stopping poll timer.');\n            clearPollTimer();\n        }\n      }\n    });\n\n    return {\n      visible,\n      buildingStatus,\n      buildingProgress,\n      buildingMessage,\n      buildingOutput,\n      fullOutput,\n      buildingStats,\n      startBuild,\n      formatBuildTime,\n      close\n    }\n  }\n}\n</script>\n\n<style scoped>\n.builder-dialog {\n  max-width: 90vw;\n}\n\n.building-status {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n}\n\n.status-icon {\n  margin-bottom: 20px;\n  font-size: 48px;\n  display: flex;\n  justify-content: center;\n  color: #6c757d;\n}\n\n.status-icon .spinning {\n  animation: spin 2s linear infinite;\n}\n\n.status-icon .success {\n  color: #67C23A;\n}\n\n.status-icon .error {\n  color: #F56C6C;\n}\n\n.status-text {\n  text-align: center;\n  width: 100%;\n}\n\n.status-text h3 {\n  margin-bottom: 15px;\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.status-text p {\n  margin: 5px 0;\n}\n\n.progress-container {\n  margin: 20px 0;\n  width: 100%;\n}\n\n.info-container, .success-container, .error-container {\n  margin: 20px 0;\n  width: 100%;\n}\n\n.graphrag-output-container {\n  margin-top: 20px;\n  padding: 15px;\n  border-radius: 6px;\n  background-color: #f8f9fa;\n}\n\n.output-title {\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.graphrag-command {\n  margin-bottom: 10px;\n}\n\n.output-content {\n  margin-bottom: 10px;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.output-content pre {\n  white-space: pre-wrap;\n  background-color: #2d2d2d;\n  color: #f8f8f2;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n  line-height: 1.4;\n  overflow-x: auto;\n}\n\n.no-output {\n  color: #909399;\n  font-size: 12px;\n}\n\n.output-stats {\n  margin-top: 10px;\n}\n\n.index-location-info {\n  margin-top: 15px;\n  background-color: #f8f9fa;\n  border-radius: 6px;\n  padding: 12px;\n  border-left: 4px solid #67c23a;\n}\n\n.index-location-info p {\n  margin: 5px 0;\n  font-size: 14px;\n  color: #6c757d;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style> "]}]}