{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\UserManagement.vue?vue&type=style&index=0&id=2c6bd0cd&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\UserManagement.vue","mtime":1750382437623},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1746431217000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1746431217000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJy4vc2hhcmVkLXN0eWxlcy5jc3MnOwo="},{"version":3,"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\UserManagement.vue"],"names":[],"mappings":";AA8RA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/18083/Desktop/CCIT/office/smart-office/frontend/src/views/admin/UserManagement.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"management-container\">\n    <el-card class=\"box-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <div class=\"header-left\">\n            <el-icon class=\"header-icon\"><User /></el-icon>\n            <span>用户管理</span>\n          </div>\n          <div class=\"header-right\">\n            <el-input\n              v-model=\"searchQuery\"\n              placeholder=\"搜索用户...\"\n              clearable\n              @clear=\"fetchUsers\"\n              @input=\"debouncedFetchUsers\"\n              class=\"search-input\"\n            >\n              <template #append>\n                <el-button :icon=\"Search\" />\n              </template>\n            </el-input>\n            <el-button type=\"primary\" :icon=\"Plus\" @click=\"openUserModal()\">添加用户</el-button>\n          </div>\n        </div>\n      </template>\n      <div class=\"table-container\">\n        <el-table :data=\"users\" v-loading=\"loading\" style=\"width: 100%\">\n          <el-table-column type=\"index\" :index=\"index => (pagination.page - 1) * pagination.pageSize + index + 1\" label=\"序号\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"用户名\" sortable>\n            <template #default=\"scope\">{{ scope.row.name || scope.row.username }}</template>\n          </el-table-column>\n          <el-table-column prop=\"email\" label=\"邮箱\" sortable />\n          <el-table-column prop=\"company_name\" label=\"公司\" sortable>\n            <template #default=\"scope\">{{ scope.row.company_name || '未分配' }}</template>\n          </el-table-column>\n          <el-table-column prop=\"department_name\" label=\"部门\" sortable>\n            <template #default=\"scope\">{{ scope.row.department_name || '未分配' }}</template>\n          </el-table-column>\n          <el-table-column prop=\"position\" label=\"职位\">\n            <template #default=\"scope\">{{ scope.row.position || '未指定' }}</template>\n          </el-table-column>\n          <el-table-column label=\"角色\" width=\"120\">\n            <template #default=\"scope\">\n              <el-tag v-if=\"scope.row.is_staff\" type=\"danger\" size=\"small\">管理员</el-tag>\n              <el-tag v-else-if=\"scope.row.is_department_manager\" type=\"primary\" size=\"small\">部门主管</el-tag>\n              <el-tag v-else type=\"success\" size=\"small\">员工</el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"120\">\n            <template #default=\"scope\">\n              <el-button text type=\"primary\" size=\"small\" @click=\"openUserModal(scope.row)\">编辑</el-button>\n              <el-button text type=\"danger\" size=\"small\" @click=\"confirmDeleteUser(scope.row)\">删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n\n       <!-- 分页 -->\n      <div class=\"pagination-container\">\n        <el-pagination\n          v-model:current-page=\"pagination.page\"\n          v-model:page-size=\"pagination.pageSize\"\n          :page-sizes=\"[10, 20, 50, 100]\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"total\"\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n        />\n      </div>\n\n      <!-- 添加/编辑用户模态框 -->\n      <el-dialog v-model=\"isModalOpen\" :title=\"currentUser.id ? '编辑用户' : '添加用户'\" width=\"500px\">\n        <el-form :model=\"currentUser\" ref=\"userForm\" label-width=\"80px\">\n          <el-form-item label=\"用户名\" prop=\"username\" :rules=\"[{ required: true, message: '请输入用户名' }]\">\n            <el-input v-model=\"currentUser.username\" />\n          </el-form-item>\n          <el-form-item label=\"姓名\" prop=\"name\">\n            <el-input v-model=\"currentUser.name\" />\n          </el-form-item>\n          <el-form-item label=\"邮箱\" prop=\"email\" :rules=\"[{ required: true, message: '请输入邮箱' }, { type: 'email', message: '请输入有效的邮箱地址' }]\">\n            <el-input v-model=\"currentUser.email\" />\n          </el-form-item>\n          <el-form-item label=\"密码\" prop=\"password\" :rules=\"currentUser.id ? [] : [{ required: true, message: '请输入密码' }]\">\n            <el-input v-model=\"currentUser.password\" type=\"password\" :placeholder=\"currentUser.id ? '留空则不修改' : ''\" />\n          </el-form-item>\n          <el-form-item label=\"职位\" prop=\"position\">\n            <el-input v-model=\"currentUser.position\" />\n          </el-form-item>\n          <el-form-item label=\"所属公司\" prop=\"company\" :rules=\"[{ required: true, message: '请选择公司' }]\">\n            <el-select v-model=\"currentUser.company\" placeholder=\"请选择\" @change=\"onCompanyChange\">\n              <el-option v-for=\"company in companies\" :key=\"company.id\" :label=\"company.name\" :value=\"company.id\" />\n            </el-select>\n          </el-form-item>\n          <el-form-item v-if=\"currentUser.company\" label=\"所属部门\" prop=\"department\">\n            <el-select v-model=\"currentUser.department\" placeholder=\"请选择\">\n              <el-option label=\"-- 未分配 --\" :value=\"null\" />\n              <el-option v-for=\"dept in companyDepartments\" :key=\"dept.id\" :label=\"dept.name\" :value=\"dept.id\" />\n            </el-select>\n          </el-form-item>\n        </el-form>\n        <template #footer>\n          <span class=\"dialog-footer\">\n            <el-button @click=\"closeUserModal\">取消</el-button>\n            <el-button type=\"primary\" @click=\"saveUser\">保存</el-button>\n          </span>\n        </template>\n      </el-dialog>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue';\nimport adminApi from '@/api/admin';\nimport { ElMessage, ElMessageBox, ElCard, ElIcon, ElInput, ElButton, ElTable, ElTableColumn, ElTag, ElPagination, ElDialog, ElForm, ElFormItem, ElSelect, ElOption } from 'element-plus';\nimport { User, Search, Plus } from '@element-plus/icons-vue';\n\nconst users = ref([]);\nconst companies = ref([]);\nconst companyDepartments = ref([]);\nconst searchQuery = ref('');\nconst total = ref(0);\nconst pagination = reactive({\n  page: 1,\n  pageSize: 10,\n});\nconst isModalOpen = ref(false);\nconst currentUser = ref({});\nconst userForm = ref(null); // Form reference\nlet searchTimeout = null;\nconst loading = ref(true);\n\nconst fetchUsers = async () => {\n  loading.value = true;\n  try {\n    const params = { \n      search: searchQuery.value,\n      page: pagination.page,\n      page_size: pagination.pageSize,\n    };\n    const response = await adminApi.getUsers(params);\n    users.value = response.data.results;\n    total.value = response.data.count;\n  } catch (error) {\n    console.error(\"获取用户列表失败:\", error);\n    ElMessage.error('获取用户列表失败');\n  } finally {\n    loading.value = false;\n  }\n};\n\nconst debouncedFetchUsers = () => {\n  clearTimeout(searchTimeout);\n  searchTimeout = setTimeout(() => {\n    pagination.page = 1; // Reset to first page on search\n    fetchUsers();\n  }, 300);\n};\n\nconst fetchCompanies = async () => {\n    try {\n        const response = await adminApi.getCompanies({ all: 'true' });\n        companies.value = response.data;\n    } catch (error) {\n        console.error(\"获取公司列表失败:\", error);\n    }\n};\n\nconst fetchDepartmentsForCompany = async (companyId) => {\n  if (!companyId) {\n    companyDepartments.value = [];\n    return;\n  }\n  try {\n    const params = { all: 'true', company: companyId };\n    const response = await adminApi.getDepartments(params);\n    companyDepartments.value = response.data;\n  } catch (error) {\n    console.error(`获取公司 ${companyId} 的部门列表失败:`, error);\n    companyDepartments.value = [];\n  }\n};\n\nconst onCompanyChange = async (companyId) => {\n  currentUser.value.department = null;\n  await fetchDepartmentsForCompany(companyId);\n};\n    \nconst openUserModal = async (user = {}) => {\n  await fetchCompanies();\n  if (user && user.id) {\n    currentUser.value = { ...user };\n    if (user.company) {\n      await fetchDepartmentsForCompany(user.company);\n    }\n  } else {\n    currentUser.value = {\n      username: '',\n      name: '',\n      email: '',\n      password: '',\n      position: '',\n      company: null,\n      department: null\n    };\n  }\n  isModalOpen.value = true;\n};\n\nconst closeUserModal = () => {\n  isModalOpen.value = false;\n  userForm.value?.resetFields();\n};\n\nconst saveUser = async () => {\n  if (!userForm.value) return;\n  await userForm.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        const userData = { ...currentUser.value };\n        \n        if (!userData.password) {\n          delete userData.password;\n        }\n\n        if (userData.department === null) {\n          delete userData.department;\n        }\n\n        if (userData.id) {\n          await adminApi.updateUser(userData.id, userData);\n        } else {\n          await adminApi.createUser(userData);\n        }\n        closeUserModal();\n        fetchUsers();\n        ElMessage.success('用户保存成功！');\n      } catch (error) {\n        console.error(\"保存用户失败:\", error.response?.data || error.message);\n        const errorMsg = error.response?.data ? JSON.stringify(error.response.data) : '请检查网络或联系技术支持';\n        ElMessage.error(`保存用户失败: ${errorMsg}`);\n      }\n    }\n  });\n};\n\nconst confirmDeleteUser = (user) => {\n  ElMessageBox.confirm(\n    `确定要删除用户【${user.name || user.username}】吗？此操作无法撤销。`,\n    '警告',\n    {\n      confirmButtonText: '确定删除',\n      cancelButtonText: '取消',\n      type: 'warning',\n    }\n  ).then(async () => {\n    try {\n      await adminApi.deleteUser(user.id);\n      ElMessage.success('用户删除成功');\n      fetchUsers();\n    } catch (error) {\n      ElMessage.error('删除用户失败');\n      console.error(\"删除用户失败:\", error);\n    }\n  }).catch(() => {\n    ElMessage.info('已取消删除');\n  });\n};\n\nconst handleSizeChange = (val) => {\n  pagination.pageSize = val;\n  fetchUsers();\n};\n\nconst handleCurrentChange = (val) => {\n  pagination.page = val;\n  fetchUsers();\n};\n\nonMounted(() => {\n    fetchUsers();\n});\n</script>\n\n<style scoped>\n@import './shared-styles.css';\n</style> "]}]}