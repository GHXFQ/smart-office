{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\DepartmentManagement.vue?vue&type=style&index=0&id=f8a239a2&lang=css","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\DepartmentManagement.vue","mtime":1750340306965},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1746431217000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1746431217000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJy4vc2hhcmVkLXN0eWxlcy5jc3MnOwo="},{"version":3,"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\DepartmentManagement.vue"],"names":[],"mappings":";AAsPA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/18083/Desktop/CCIT/office/smart-office/frontend/src/views/admin/DepartmentManagement.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"management-container\">\n    <el-card class=\"box-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span><i class=\"bi bi-diagram-3-fill header-icon\"></i> 部门管理</span>\n          <div class=\"actions\">\n            <el-input\n              v-model=\"searchQuery\"\n              placeholder=\"搜索部门...\"\n              clearable\n              @clear=\"fetchDepartments\"\n              @input=\"debouncedFetchDepartments\"\n              class=\"search-input\"\n            >\n              <template #append>\n                <el-button :icon=\"Search\"></el-button>\n              </template>\n            </el-input>\n            <el-button type=\"primary\" @click=\"openModal()\">添加部门</el-button>\n          </div>\n        </div>\n      </template>\n      <div class=\"table-container\">\n        <table>\n          <thead>\n            <tr>\n              <th>序号</th>\n              <th>部门名称</th>\n              <th>所属公司</th>\n              <th>部门主管</th>\n              <th>描述</th>\n              <th>操作</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(dept, index) in departments\" :key=\"dept.id\">\n              <td>{{ index + 1 }}</td>\n              <td>{{ dept.name }}</td>\n              <td>{{ dept.company_name }}</td>\n              <td>{{ dept.manager_name || '无' }}</td>\n              <td>{{ dept.description }}</td>\n              <td class=\"action-buttons\">\n                <button class=\"btn-edit\" @click=\"openModal(dept)\">编辑</button>\n                <button class=\"btn-delete\" @click=\"confirmDelete(dept)\">删除</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </el-card>\n\n     <!-- 添加/编辑模态框 -->\n    <div v-if=\"isModalOpen\" class=\"modal-overlay\">\n      <div class=\"modal-content\">\n        <h3>{{ currentItem.id ? '编辑部门' : '添加部门' }}</h3>\n        <form @submit.prevent=\"saveItem\">\n          <div class=\"form-group\">\n            <label>部门名称:</label>\n            <input type=\"text\" v-model=\"currentItem.name\" required />\n          </div>\n          <div class=\"form-group\">\n            <label>所属公司:</label>\n            <select v-model=\"currentItem.company\" required @change=\"onCompanyChange\">\n              <option :value=\"null\" disabled>-- 请选择公司 --</option>\n              <option v-for=\"company in companies\" :key=\"company.id\" :value=\"company.id\">\n                {{ company.name }}\n              </option>\n            </select>\n          </div>\n          <div class=\"form-group\" v-if=\"currentItem.company\">\n            <label>部门经理:</label>\n             <select v-model=\"currentItem.manager\" :disabled=\"!currentItem.company\" required>\n              <option :value=\"null\" disabled>-- 请选择经理 --</option>\n              <option v-for=\"user in companyUsers\" :key=\"user.id\" :value=\"user.id\">\n                {{ user.name || user.username }} ({{user.email}})\n              </option>\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label>描述:</label>\n            <input type=\"text\" v-model=\"currentItem.description\" />\n          </div>\n          <div class=\"form-actions\">\n            <button type=\"submit\" class=\"btn-primary\">保存</button>\n            <button type=\"button\" @click=\"closeModal\" class=\"btn-secondary\">取消</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport adminApi from '@/api/admin';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { Search } from '@element-plus/icons-vue';\n\n// Simple debounce function\nfunction debounce(fn, delay) {\n  let timeoutID = null;\n  return function(...args) {\n    clearTimeout(timeoutID);\n    timeoutID = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nexport default {\n  name: 'DepartmentManagement',\n  setup() {\n    const departments = ref([]);\n    const companies = ref([]);\n    const companyUsers = ref([]);\n    const searchQuery = ref('');\n    const isModalOpen = ref(false);\n    const currentItem = ref({});\n\n    const fetchDepartments = async () => {\n      try {\n        const params = { search: searchQuery.value };\n        const response = await adminApi.getDepartments(params);\n        departments.value = response.data.results;\n      } catch (error) {\n        console.error(\"获取部门列表失败:\", error);\n      }\n    };\n\n    const debouncedFetchDepartments = debounce(fetchDepartments, 300);\n    \n    const fetchCompaniesForSelect = async () => {\n      try {\n        const response = await adminApi.getCompanies({ all: 'true' });\n        companies.value = response.data;\n      } catch (error) {\n        console.error(\"获取公司列表失败:\", error);\n      }\n    };\n\n    const fetchUsersForCompany = async (companyId) => {\n      if (!companyId) {\n        companyUsers.value = [];\n        return;\n      }\n      try {\n        const response = await adminApi.getUsers({ all: 'true', company_id: companyId });\n        companyUsers.value = response.data;\n      } catch (error) {\n        console.error(`获取公司 ${companyId} 的用户列表失败:`, error);\n        companyUsers.value = [];\n      }\n    };\n    \n    const onCompanyChange = async () => {\n      currentItem.value.manager = null; // Reset manager when company changes\n      await fetchUsersForCompany(currentItem.value.company);\n    };\n\n    const openModal = async (item = {}) => {\n      await fetchCompaniesForSelect(); // Ensure companies are fetched when modal opens\n      currentItem.value = { ...item };\n       // If editing an item with a company, fetch its users\n      if (item.company) {\n        await fetchUsersForCompany(item.company);\n      } else {\n        companyUsers.value = [];\n      }\n      isModalOpen.value = true;\n    };\n\n    const closeModal = () => {\n      isModalOpen.value = false;\n      currentItem.value = {};\n      companyUsers.value = [];\n    };\n\n    const saveItem = async () => {\n      // 前端验证\n      if (!currentItem.value.name || !currentItem.value.company || !currentItem.value.manager) {\n        ElMessage.error('请确保所有必填项都已填写！');\n        return;\n      }\n      try {\n        if (currentItem.value.id) {\n          await adminApi.updateDepartment(currentItem.value.id, currentItem.value);\n        } else {\n          await adminApi.createDepartment(currentItem.value);\n        }\n        closeModal();\n        fetchDepartments();\n      } catch (error) {\n        console.error(\"保存部门失败:\", error);\n      }\n    };\n\n    const confirmDelete = (item) => {\n      ElMessageBox.confirm(\n        `确定要删除部门【${item.name}】吗？这会将部门内的所有员工的部门重置为空。`,\n        '警告',\n        {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning',\n          center: true,\n        }\n      ).then(async () => {\n        try {\n          await adminApi.deleteDepartment(item.id);\n          ElMessage.success('部门删除成功');\n          fetchDepartments();\n        } catch (error) {\n          ElMessage.error('删除失败，请稍后重试');\n          console.error(\"删除部门失败:\", error);\n        }\n      }).catch(() => {\n        ElMessage.info('已取消删除');\n      });\n    };\n\n    onMounted(() => {\n        fetchDepartments();\n    });\n\n    return {\n      departments,\n      companies,\n      companyUsers,\n      searchQuery,\n      isModalOpen,\n      currentItem,\n      fetchDepartments,\n      debouncedFetchDepartments,\n      openModal,\n      closeModal,\n      saveItem,\n      confirmDelete,\n      onCompanyChange,\n      Search,\n    };\n  },\n};\n</script>\n\n<style>\n@import './shared-styles.css';\n</style> "]}]}