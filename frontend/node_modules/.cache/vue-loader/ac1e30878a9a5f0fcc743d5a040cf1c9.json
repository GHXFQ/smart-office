{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\smartdoc\\Detail.vue?vue&type=style&index=1&id=69019007&lang=css","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\smartdoc\\Detail.vue","mtime":1749610275996},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1746431217000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1746431217000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qIE1hcmtkb3duIOWGheWuueagt+W8jyAqLwouZWwtYWxlcnRfX2NvbnRlbnQgZGl2IHsKICBtYXgtaGVpZ2h0OiA0MDBweDsKICBvdmVyZmxvdy15OiBhdXRvOwogIHBhZGRpbmctcmlnaHQ6IDhweDsKfQoKLyogTWFya2Rvd24g5qC35byPICovCi5lbC1hbGVydF9fY29udGVudCBkaXYgaDEsCi5lbC1hbGVydF9fY29udGVudCBkaXYgaDIsCi5lbC1hbGVydF9fY29udGVudCBkaXYgaDMsCi5lbC1hbGVydF9fY29udGVudCBkaXYgaDQsCi5lbC1hbGVydF9fY29udGVudCBkaXYgaDUsCi5lbC1hbGVydF9fY29udGVudCBkaXYgaDYgewogIG1hcmdpbi10b3A6IDE2cHg7CiAgbWFyZ2luLWJvdHRvbTogOHB4OwogIGZvbnQtd2VpZ2h0OiA2MDA7Cn0KCi5lbC1hbGVydF9fY29udGVudCBkaXYgaDEgeyBmb250LXNpemU6IDEuNWVtOyB9Ci5lbC1hbGVydF9fY29udGVudCBkaXYgaDIgeyBmb250LXNpemU6IDEuM2VtOyB9Ci5lbC1hbGVydF9fY29udGVudCBkaXYgaDMgeyBmb250LXNpemU6IDEuMmVtOyB9CgouZWwtYWxlcnRfX2NvbnRlbnQgZGl2IHAgewogIG1hcmdpbi1ib3R0b206IDEycHg7CiAgbGluZS1oZWlnaHQ6IDEuNjsKfQoKLmVsLWFsZXJ0X19jb250ZW50IGRpdiB1bCwKLmVsLWFsZXJ0X19jb250ZW50IGRpdiBvbCB7CiAgcGFkZGluZy1sZWZ0OiAyMHB4OwogIG1hcmdpbi1ib3R0b206IDEycHg7Cn0KCi5lbC1hbGVydF9fY29udGVudCBkaXYgbGkgewogIG1hcmdpbi1ib3R0b206IDRweDsKfQoKLmVsLWFsZXJ0X19jb250ZW50IGRpdiBjb2RlIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwOwogIHBhZGRpbmc6IDJweCA0cHg7CiAgYm9yZGVyLXJhZGl1czogM3B4OwogIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7CiAgZm9udC1zaXplOiAwLjllbTsKfQoKLmVsLWFsZXJ0X19jb250ZW50IGRpdiBwcmUgewogIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7CiAgcGFkZGluZzogMTJweDsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBtYXJnaW4tYm90dG9tOiAxMnB4Owp9CgouZWwtYWxlcnRfX2NvbnRlbnQgZGl2IHByZSBjb2RlIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICBwYWRkaW5nOiAwOwogIGJvcmRlci1yYWRpdXM6IDA7CiAgZGlzcGxheTogYmxvY2s7CiAgd2hpdGUtc3BhY2U6IHByZTsKfQoKLmVsLWFsZXJ0X19jb250ZW50IGRpdiBibG9ja3F1b3RlIHsKICBib3JkZXItbGVmdDogNHB4IHNvbGlkICNkZGQ7CiAgcGFkZGluZy1sZWZ0OiAxMnB4OwogIGNvbG9yOiAjNjY2OwogIG1hcmdpbjogMCAwIDEycHg7Cn0KCi5lbC1hbGVydF9fY29udGVudCBkaXYgdGFibGUgewogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CiAgbWFyZ2luLWJvdHRvbTogMTJweDsKICB3aWR0aDogMTAwJTsKfQoKLmVsLWFsZXJ0X19jb250ZW50IGRpdiB0aCwKLmVsLWFsZXJ0X19jb250ZW50IGRpdiB0ZCB7CiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKICBwYWRkaW5nOiA4cHg7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoKLmVsLWFsZXJ0X19jb250ZW50IGRpdiB0aCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjsKfQoKLmVsLWFsZXJ0X19jb250ZW50IGRpdiBhIHsKICBjb2xvcjogIzQwOWVmZjsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KCi5lbC1hbGVydF9fY29udGVudCBkaXYgYTpob3ZlciB7CiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7Cn0KCi5lbC1hbGVydF9fY29udGVudCBkaXYgaW1nIHsKICBtYXgtd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiBhdXRvOwp9Cg=="},{"version":3,"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\smartdoc\\Detail.vue"],"names":[],"mappings":"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","file":"C:/Users/18083/Desktop/CCIT/office/smart-office/frontend/src/views/smartdoc/Detail.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"smart-doc-container\">\n    <!-- 文档列表侧边栏 -->\n    <div class=\"sidebar\" :class=\"{ 'collapsed': isDocListCollapsed }\">\n      <!-- 侧边栏头部 -->\n      <div class=\"sidebar-header\">\n        <h4 v-if=\"!isDocListCollapsed\">我的文档</h4>\n        <div class=\"toggle-btn\" @click=\"toggleDocList\">\n          <el-icon><ArrowLeft v-if=\"!isDocListCollapsed\" /><ArrowRight v-else /></el-icon>\n        </div>\n      </div>\n\n      <!-- 展开状态的文档列表 -->\n      <div class=\"sidebar-content\" v-show=\"!isDocListCollapsed\">\n        <!-- 搜索和筛选区域 -->\n        <div class=\"search-area\">\n          <el-input\n            placeholder=\"搜索文档...\"\n            v-model=\"searchQuery\"\n            clearable\n            @input=\"debouncedSearch\"\n          >\n            <template #prefix>\n              <el-icon><Search /></el-icon>\n            </template>\n          </el-input>\n          <div class=\"filter-options\">\n            <el-input v-model=\"docTypeFilter\" placeholder=\"文档类型\" size=\"small\" clearable />\n            <el-select v-model=\"sortOption\" placeholder=\"排序\" size=\"small\">\n              <el-option label=\"最近更新\" value=\"update\" />\n              <el-option label=\"最近创建\" value=\"create\" />\n              <el-option label=\"名称升序\" value=\"name-asc\" />\n            </el-select>\n          </div>\n        </div>\n\n        <!-- 文档列表区域 -->\n        <el-scrollbar class=\"document-list-scrollbar\">\n          <div v-if=\"documentsLoading\" class=\"loading-state\">\n            <el-skeleton :rows=\"10\" animated />\n          </div>\n          <div v-else class=\"document-list\">\n            <div \n              v-for=\"doc in filteredDocuments\" \n              :key=\"doc.id\" \n              class=\"doc-item\"\n              :class=\"{ 'active': currentDoc?.id === doc.id }\"\n              @click=\"selectDocument(doc.id)\"\n            >\n              <div class=\"doc-icon\">\n                <el-icon><Document /></el-icon>\n              </div>\n              <div class=\"doc-info\">\n                <h5>{{ doc.title }}</h5>\n                <div class=\"doc-meta\">\n                  <span>{{ doc.type }}</span>\n                  <span>{{ formatDate(doc.update_time) }}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div v-if=\"filteredDocuments.length === 0\" class=\"empty-state\">\n              <el-empty description=\"暂无文档\" :image-size=\"60\">\n                <el-button size=\"small\" @click=\"fetchDocuments(1, [])\">重新加载</el-button>\n              </el-empty>\n            </div>\n            \n            <div v-if=\"filteredDocuments.length > 0\" class=\"document-count\">\n              共 {{ filteredDocuments.length }} 个文档\n            </div>\n          </div>\n        </el-scrollbar>\n\n        <!-- 创建按钮区域 -->\n        <div class=\"action-buttons\">\n          <el-button type=\"primary\" @click=\"openNewDocumentDialog\">\n            <el-icon><Plus /></el-icon> 新建文档\n          </el-button>\n        </div>\n      </div>\n\n      <!-- 折叠状态的文档图标列表 -->\n      <div class=\"collapsed-sidebar\" v-if=\"isDocListCollapsed\">\n        <el-tooltip content=\"新建文档\" placement=\"right\">\n          <div class=\"icon-btn create-btn\" @click=\"openNewDocumentDialog\">\n            <el-icon><Plus /></el-icon>\n          </div>\n        </el-tooltip>\n        \n        <div class=\"recent-docs\">\n          <el-tooltip \n            v-for=\"doc in filteredDocuments.slice(0, 5)\" \n            :key=\"doc.id\" \n            :content=\"doc.title\"\n            placement=\"right\"\n          >\n            <div \n              class=\"icon-btn doc-btn\"\n              :class=\"{ 'active': currentDoc?.id === doc.id }\"\n              @click=\"selectDocument(doc.id)\"\n            >\n              <el-icon><Document /></el-icon>\n            </div>\n          </el-tooltip>\n        </div>\n      </div>\n    </div>\n\n    <!-- 主内容区域 -->\n    <div class=\"main-content\">\n      <!-- 文档内容显示区域 -->\n      <div class=\"document-content\">\n        <el-skeleton v-if=\"loading\" :rows=\"6\" animated style=\"margin:40px\" />\n        <template v-else-if=\"currentDoc\">\n          <!-- 文档标题和操作栏 -->\n          <div class=\"document-header\">\n            <div class=\"doc-info-area\">\n              <div class=\"doc-title-label\">标题：</div>\n              <div class=\"doc-title\">\n                <el-input \n                  v-model=\"currentDoc.title\"\n                  placeholder=\"文档标题\"\n                  size=\"large\"\n                  @change=\"onTitleChange\"\n                />\n              </div>\n              <div class=\"doc-type-label\">类型：</div>\n              <div class=\"doc-type-selector\">\n                <el-input \n                  v-model=\"currentDoc.type\" \n                  placeholder=\"输入文档类型\"\n                  size=\"default\"\n                  @change=\"onTypeChange\"\n                />\n              </div>\n            </div>\n            <div class=\"doc-actions\">\n              <el-tooltip content=\"保存文档\" placement=\"bottom\">\n                <el-button \n                  circle\n                  :disabled=\"!documentChanged\" \n                  :loading=\"saveLoading\"\n                  @click=\"saveDocument\"\n                >\n                  <el-icon><CircleCheck /></el-icon>\n                </el-button>\n              </el-tooltip>\n              <el-tooltip content=\"分享文档\" placement=\"bottom\">\n                <el-button circle @click=\"shareDocument\"><el-icon><ShareIcon /></el-icon></el-button>\n              </el-tooltip>\n              <el-tooltip content=\"导出文档\" placement=\"bottom\">\n                <el-button circle @click=\"exportDocument\"><el-icon><Download /></el-icon></el-button>\n              </el-tooltip>\n              <el-tooltip content=\"更多操作\" placement=\"bottom\">\n                <el-dropdown trigger=\"click\">\n                  <el-button circle><el-icon><More /></el-icon></el-button>\n                  <template #dropdown>\n                    <el-dropdown-menu>\n                      <el-dropdown-item @click=\"printDocument\">打印文档</el-dropdown-item>\n                      <el-dropdown-item @click=\"addCollaborator\">添加协作者</el-dropdown-item>\n                      <el-dropdown-item @click=\"viewHistory\">查看历史版本</el-dropdown-item>\n                      <el-dropdown-item divided @click=\"deleteDocument\" class=\"text-red-500\">删除文档</el-dropdown-item>\n                    </el-dropdown-menu>\n                  </template>\n                </el-dropdown>\n              </el-tooltip>\n            </div>\n          </div>\n          \n          <!-- 编辑器区域 -->\n          <div class=\"editor-area\">\n            <QuillEditor\n              v-model:content=\"currentDoc.content\"\n              :options=\"editorOptions\"\n              contentType=\"html\"\n              theme=\"snow\"\n              class=\"quill-editor\"\n              @textChange=\"onContentChange\"\n              @ready=\"onEditorReady\"\n              placeholder=\" \"\n              @selection-change=\"onSelectionChange\"\n            />\n          </div>\n        </template>\n        \n        <!-- 无文档时的提示 -->\n        <div v-else class=\"empty-doc-state\">\n          <el-empty description=\"请选择或创建一个文档\">\n            <el-button type=\"primary\" @click=\"openNewDocumentDialog\">新建文档</el-button>\n          </el-empty>\n        </div>\n      </div>\n    </div>\n    \n    <!-- 智能助手面板 -->\n    <div class=\"assistant-panel\" :class=\"{ 'collapsed': isAssistantCollapsed }\">\n      <div class=\"assistant-header\">\n        <h5 v-if=\"!isAssistantCollapsed\">AI功能</h5>\n        <div class=\"toggle-btn\" @click=\"toggleAssistant\">\n          <el-icon><ArrowRight v-if=\"!isAssistantCollapsed\" /><ArrowLeft v-else /></el-icon>\n        </div>\n      </div>\n      \n      <div class=\"assistant-body\" v-show=\"!isAssistantCollapsed\">\n        <div class=\"ai-features-beauty\">\n          <div class=\"ai-feature-card\">\n            <el-tooltip content=\"请先在编辑器中选择文本后再使用此功能\" :disabled=\"!!quillSelectedText\" placement=\"top\" effect=\"dark\">\n              <el-button type=\"primary\" class=\"ai-feature-btn\" @click=\"expandContent\" :loading=\"expandLoading\" :disabled=\"!quillSelectedText\">\n                <el-icon class=\"ai-icon\"><Edit /></el-icon>\n                内容扩写\n              </el-button>\n            </el-tooltip>\n            <div class=\"ai-feature-desc\">将选中文本智能扩展为更丰富内容，适合写作、报告等场景。</div>\n          </div>\n          <div class=\"ai-feature-card\">\n            <el-tooltip content=\"请先在编辑器中选择文本后再使用此功能\" :disabled=\"!!quillSelectedText\" placement=\"top\" effect=\"dark\">\n              <el-button type=\"success\" class=\"ai-feature-btn\" @click=\"polishText\" :loading=\"polishLoading\" :disabled=\"!quillSelectedText\">\n                <el-icon class=\"ai-icon\"><StarFilled /></el-icon>\n                文本润色\n              </el-button>\n            </el-tooltip>\n            <div class=\"ai-feature-desc\">让表达更专业、流畅，提升文档整体质量。</div>\n          </div>\n          <div class=\"ai-feature-card\">\n            <el-tooltip content=\"请先在编辑器中选择文本后再使用此功能\" :disabled=\"!!quillSelectedText\" placement=\"top\" effect=\"dark\">\n              <el-button type=\"warning\" class=\"ai-feature-btn\" @click=\"grammarCheckText\" :loading=\"grammarCheckLoading\" :disabled=\"!quillSelectedText\">\n                <el-icon class=\"ai-icon\"><Edit /></el-icon>\n                智能纠错\n              </el-button>\n            </el-tooltip>\n            <div class=\"ai-feature-desc\">AI自动检查语法、错别字、表达不通顺并给出优化建议。</div>\n          </div>\n          <div class=\"ai-feature-card\">\n            <el-button type=\"info\" class=\"ai-feature-btn\" @click=\"openTranslateDialog\">\n              <el-icon class=\"ai-icon\"><ChatDotRound /></el-icon>\n              多语言翻译\n            </el-button>\n            <div class=\"ai-feature-desc\">支持多语种精准互译，助力国际化办公。</div>\n          </div>\n          <div class=\"ai-feature-card\">\n            <el-button type=\"success\" class=\"ai-feature-btn\" @click=\"openQaDialog\">\n              <el-icon class=\"ai-icon\"><QuestionFilled /></el-icon>\n              智能问答\n            </el-button>\n            <div class=\"ai-feature-desc\">基于文档内容，AI即时解答你的问题。</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 创建新文档对话框 -->\n    <el-dialog\n      v-model=\"newDocumentDialogVisible\"\n      title=\"新建智能文档\"\n      width=\"35%\"\n    >\n      <el-form \n        :model=\"newDocumentForm\" \n        label-width=\"80px\" \n        :rules=\"documentFormRules\"\n        ref=\"documentFormRef\"\n      >\n        <el-form-item label=\"文档标题\" prop=\"title\">\n          <el-input v-model=\"newDocumentForm.title\" placeholder=\"请输入文档标题\" />\n        </el-form-item>\n        <el-form-item label=\"文档类型\">\n          <el-input v-model=\"newDocumentForm.type\" placeholder=\"请输入文档类型\" />\n          <div class=\"form-tip\">如果未填写，默认为通用类型</div>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"newDocumentDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"createNewDocument\" :loading=\"createLoading\">\n            创建\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n    \n    <!-- 分享文档对话框 -->\n    <el-dialog\n      v-model=\"shareDialogVisible\"\n      title=\"分享文档\"\n      width=\"30%\"\n    >\n      <div v-if=\"currentDoc\">\n        <p>您即将分享文档: <strong>{{ currentDoc.title }}</strong></p>\n        <el-form label-width=\"120px\" class=\"mt-4\">\n          <el-form-item label=\"选择用户\">\n            <el-select\n              v-model=\"selectedUsers\"\n              multiple\n              placeholder=\"请选择用户\"\n              style=\"width: 100%\"\n            >\n              <el-option\n                v-for=\"user in availableUsers\"\n                :key=\"user.id\"\n                :label=\"user.username\"\n                :value=\"user.id\"\n              />\n          </el-select>\n        </el-form-item>\n      </el-form>\n      </div>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"shareDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"confirmShare\" :loading=\"shareLoading\">\n            分享\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n    \n    <!-- 删除确认对话框 -->\n    <el-dialog\n      v-model=\"deleteDialogVisible\"\n      title=\"删除文档\"\n      width=\"30%\"\n    >\n      <div v-if=\"currentDoc\">\n        <p>您确定要删除文档 <strong>{{ currentDoc.title }}</strong> 吗?</p>\n        <p class=\"warning-text\">此操作不可撤销!</p>\n        </div>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\n          <el-button type=\"danger\" @click=\"confirmDelete\" :loading=\"deleteLoading\">\n            删除\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 比较弹窗 -->\n    <el-dialog\n      v-model=\"compareDialogVisible\"\n      :title=\"compareDialogData.title\"\n      width=\"90%\"\n      class=\"compare-dialog large-dialog\"\n      :fullscreen=\"false\"\n      :append-to-body=\"true\"\n      :destroy-on-close=\"false\"\n      :close-on-click-modal=\"false\"\n      :show-close=\"true\"\n    >\n      <div v-if=\"compareDialogData\" class=\"dialog-container\">\n        <div class=\"compare-content\">\n          <div class=\"original-content\">\n            <h6>原始内容</h6>\n            <QuillEditor\n              v-model:content=\"compareDialogData.original\"\n              contentType=\"text\"\n              theme=\"snow\"\n              :readOnly=\"true\"\n              class=\"quill-editor-in-dialog\"\n              style=\"background:#f9f9f9;\"\n            />\n          </div>\n          <div class=\"modified-content\">\n            <h6>优化建议内容（可编辑）</h6>\n            <QuillEditor\n              v-model:content=\"compareDialogData.modifiedContent\"\n              contentType=\"text\"\n              theme=\"snow\"\n              class=\"quill-editor-in-dialog\"\n            />\n          </div>\n        </div>\n        <div v-if=\"compareDialogData.suggestions\" class=\"ai-suggestions\" style=\"margin-top:16px;\">\n          <el-alert\n            title=\"AI纠错建议\"\n            type=\"info\"\n            :closable=\"false\"\n            show-icon\n            style=\"font-size:15px;line-height:1.8;\"\n          >\n            <div v-html=\"compareDialogData.suggestions\"></div>\n          </el-alert>\n        </div>\n      </div>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"closeCompareDialog\">取消</el-button>\n          <el-button type=\"primary\" @click=\"applyCompareChanges\">应用更改</el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 多语言翻译弹窗（对比模式） -->\n    <el-dialog v-model=\"translateDialogVisible\" title=\"多语言智能翻译\" width=\"900px\">\n      <div style=\"margin-bottom:12px; display:flex; align-items:center; gap:12px;\">\n        <el-select v-model=\"targetLang\" placeholder=\"选择目标语言\" style=\"width:180px;\">\n          <el-option label=\"英文\" value=\"en\" />\n          <el-option label=\"中文\" value=\"zh\" />\n          <el-option label=\"日文\" value=\"ja\" />\n          <el-option label=\"法文\" value=\"fr\" />\n          <el-option label=\"德文\" value=\"de\" />\n          <el-option label=\"西班牙文\" value=\"es\" />\n          <el-option label=\"俄文\" value=\"ru\" />\n          <el-option label=\"韩文\" value=\"ko\" />\n        </el-select>\n        <el-button type=\"primary\" :loading=\"translateLoading\" @click=\"doTranslate\">翻译</el-button>\n      </div>\n      <div class=\"compare-content\">\n        <div class=\"original-content\">\n          <h6>原文内容</h6>\n          <QuillEditor\n            v-model:content=\"translateInput\"\n            contentType=\"text\"\n            theme=\"snow\"\n            :readOnly=\"true\"\n            class=\"quill-editor-in-dialog\"\n            style=\"background:#f9f9f9;\"\n          />\n        </div>\n        <div class=\"modified-content\">\n          <h6>翻译内容（可编辑）</h6>\n          <QuillEditor\n            v-model:content=\"translateModifiedContent\"\n            contentType=\"text\"\n            theme=\"snow\"\n            class=\"quill-editor-in-dialog\"\n          />\n        </div>\n      </div>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"translateDialogVisible = false\">取消</el-button>\n          <el-button v-if=\"translateModifiedContent\" type=\"success\" @click=\"replaceSelectionWithTranslation\">应用翻译</el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 智能问答弹窗 -->\n    <el-dialog v-model=\"qaDialogVisible\" title=\"文档智能问答\" width=\"500px\">\n      <el-input\n        v-model=\"qaQuestion\"\n        placeholder=\"请输入您的问题\"\n        style=\"margin-bottom:12px;\"\n        @keyup.enter=\"doQa\"\n      />\n      <el-button type=\"primary\" :loading=\"qaLoading\" @click=\"doQa\">提问</el-button>\n      <div v-if=\"qaAnswer\" style=\"margin-top:16px;\">\n        <el-alert title=\"AI答案\" type=\"info\" :closable=\"false\" show-icon>\n          <div v-html=\"qaAnswerHtml\"></div>\n        </el-alert>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, watch, onMounted, nextTick } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { ElMessage, ElMessageBox, ElLoading } from 'element-plus'\nimport _ from 'lodash'\nimport { \n  getDocuments, \n  getDocumentDetail, \n  createDocument, \n  updateDocument,\n  deleteDocument as apiDeleteDocument,\n  shareDocument as apiShareDocument,\n  expandContent as apiExpandContent,\n  polishText as apiPolishText,\n  grammarCheck,\n  translateText,\n  docQa\n} from '@/api/smartdoc'\nimport { Document, Plus, CircleCheck, Download, More, Search, ArrowLeft, ArrowRight, Share as ShareIcon, Edit, StarFilled, ChatDotRound, QuestionFilled } from '@element-plus/icons-vue'\nimport { QuillEditor } from '@vueup/vue-quill'\nimport '@vueup/vue-quill/dist/vue-quill.snow.css'\nimport { marked } from 'marked'\nimport { markedHighlight } from 'marked-highlight'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/github.css' // 导入代码高亮样式表\n\n// 配置marked\nmarked.use(\n  markedHighlight({\n    langPrefix: 'hljs language-',\n    highlight(code, lang) {\n      const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n      return hljs.highlight(code, { language }).value;\n    }\n  })\n);\n\n// 设置安全选项\nmarked.use({\n  gfm: true,\n  breaks: true,\n  pedantic: false,\n  sanitize: false, // marked v4.3.0不再支持sanitize选项\n  smartLists: true,\n  smartypants: false\n});\n\nexport default {\n  name: 'SmartDocDetail',\n  components: {\n    Document, Plus, CircleCheck, Download, More, \n    Search, ArrowLeft, ArrowRight, ShareIcon, QuillEditor, Edit, StarFilled, ChatDotRound, QuestionFilled\n  },\n  setup() {\n    const route = useRoute()\n    const router = useRouter()\n    \n    // 状态数据\n    const documents = ref([])\n    const currentDoc = ref(null)\n    const documentChanged = ref(false)\n    const isDocListCollapsed = ref(false)\n    const isAssistantCollapsed = ref(false)\n    const searchQuery = ref('')\n    const docTypeFilter = ref('')\n    const sortOption = ref('update')\n    const newDocumentDialogVisible = ref(false)\n    const shareDialogVisible = ref(false)\n    const deleteDialogVisible = ref(false)\n    const selectedUsers = ref([])\n    const availableUsers = ref([])\n    const documentsLoading = ref(true) // 文档加载状态\n    \n    // 加载状态\n    const saveLoading = ref(false)\n    const createLoading = ref(false)\n    const shareLoading = ref(false)\n    const deleteLoading = ref(false)\n    const expandLoading = ref(false)\n    const polishLoading = ref(false)\n    const grammarCheckLoading = ref(false)\n    \n    // 表单数据\n    const newDocumentForm = ref({\n        title: '',\n      type: ''\n    })\n    \n    // 表单验证规则\n    const documentFormRules = {\n      title: [\n        { required: true, message: '请输入文档标题', trigger: 'blur' },\n        { min: 2, max: 50, message: '标题长度须在2到50个字符之间', trigger: 'blur' }\n      ]\n    }\n    \n    const documentFormRef = ref(null)\n      \n    const uploadImage = async (file) => {\n      try {\n        // 使用FileReader将文件转换为base64\n        const reader = new FileReader()\n        return new Promise((resolve, reject) => {\n          reader.onload = (e) => {\n            const base64Data = e.target.result\n            // 直接返回base64数据作为图片URL\n            resolve({ url: base64Data })\n          }\n          reader.onerror = () => {\n            reject(new Error('文件读取失败'))\n          }\n          reader.readAsDataURL(file)\n        })\n      } catch (error) {\n        console.error('图片处理失败:', error)\n        throw error\n      }\n    }\n    \n      // 编辑器配置\n    const editorOptions = {\n      placeholder: ' ',\n        modules: {\n        toolbar: {\n          container: [\n            ['bold', 'italic', 'underline', 'strike'],\n            ['blockquote', 'code-block'],\n            [{ 'header': 1 }, { 'header': 2 }],\n            [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n            [{ 'script': 'sub' }, { 'script': 'super' }],\n            [{ 'indent': '-1' }, { 'indent': '+1' }],\n            [{ 'direction': 'rtl' }],\n            [{ 'size': ['small', false, 'large', 'huge'] }],\n            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n            [{ 'color': [] }, { 'background': [] }],\n            [{ 'font': [] }],\n            [{ 'align': [] }],\n            ['clean'],\n            ['link', 'image'],\n            [{ 'table': true }]\n          ],\n          handlers: {\n            image: function () {\n              const input = document.createElement('input')\n              input.setAttribute('type', 'file')\n              input.setAttribute('accept', 'image/*')\n              input.click()\n              input.onchange = async () => {\n                const file = input.files[0]\n                if (!file) return\n                \n                // 检查文件大小和类型\n                if (file.size > 5 * 1024 * 1024) { // 5MB限制\n                  ElMessage.error('图片不能超过5MB')\n                  return\n                }\n                \n                // 支持的图片类型\n                const supportedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']\n                if (!supportedTypes.includes(file.type)) {\n                  ElMessage.error('只支持JPG、PNG、GIF和WEBP格式图片')\n                  return\n                }\n                \n                ElMessage.info('正在处理图片...')\n                \n                try {\n                  // 直接传递文件对象而不是FormData\n                  const res = await uploadImage(file)\n                  const url = res.url\n                  if (!url) throw new Error('无效的图片URL')\n                  \n                  // 获取编辑器实例并插入图片\n                  const quill = quillInstance.value\n                  const range = quill.getSelection(true)\n                  quill.insertEmbed(range.index, 'image', url)\n                  \n                  // 标记文档已修改\n                  documentChanged.value = true\n                  \n                  ElMessage.success('图片插入成功')\n                } catch (e) {\n                  console.error('图片处理失败:', e)\n                  ElMessage.error('图片处理失败: ' + e.message)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // 计算属性\n    const filteredDocuments = computed(() => {\n      let result = [...documents.value]\n      \n      // 搜索筛选\n      if (searchQuery.value) {\n        const query = searchQuery.value.toLowerCase()\n        result = result.filter(doc => \n          doc.title.toLowerCase().includes(query) || \n          doc.type.toLowerCase().includes(query)\n        )\n      }\n      \n      // 类型筛选\n      if (docTypeFilter.value) {\n        const typeFilter = docTypeFilter.value.toLowerCase()\n        result = result.filter(doc => \n          doc.type.toLowerCase().includes(typeFilter)\n        )\n      }\n      \n      // 排序\n      if (sortOption.value === 'update') {\n        result.sort((a, b) => new Date(b.update_time) - new Date(a.update_time))\n      } else if (sortOption.value === 'create') {\n        result.sort((a, b) => new Date(b.create_time) - new Date(a.create_time))\n      } else if (sortOption.value === 'name-asc') {\n        result.sort((a, b) => a.title.localeCompare(b.title))\n      }\n      \n      return result\n    })\n    \n    // 方法\n    const fetchDocuments = async (page = 1, allDocs = []) => {\n      if (page === 1) {\n        documentsLoading.value = true\n      }\n      \n      try {\n        console.log(`开始获取文档列表 第${page}页...`)\n        const params = {\n          page: page,\n          limit: 100,  // 尝试请求更多，尽管后端可能只会返回10条（默认PAGE_SIZE）\n          _t: new Date().getTime() // 添加时间戳，确保不使用缓存\n        }\n        \n        const response = await getDocuments(params)\n        console.log(`文档列表响应(第${page}页):`, response)\n        \n        // 处理获取到的数据\n        let docsList = [...allDocs]\n        let totalCount = 0\n        let currentPageDocs = []\n        let hasMore = false\n        \n        // 处理不同格式的响应\n        if (response.data && Array.isArray(response.data)) {\n          currentPageDocs = response.data\n          totalCount = response.count || response.total || 0\n          hasMore = docsList.length + currentPageDocs.length < totalCount\n        } else if (response.results && Array.isArray(response.results)) {\n          currentPageDocs = response.results\n          totalCount = response.count || 0\n          hasMore = !!response.next\n        } else if (response.data && response.data.results && Array.isArray(response.data.results)) {\n          currentPageDocs = response.data.results\n          totalCount = response.data.count || 0\n          hasMore = !!response.data.next\n        }\n        \n        // 确保不添加重复的文档\n        const existingIds = new Set(docsList.map(doc => doc.id))\n        const newDocs = currentPageDocs.filter(doc => !existingIds.has(doc.id))\n        \n        if (newDocs.length > 0) {\n          docsList = [...docsList, ...newDocs]\n          console.log(`第${page}页添加了${newDocs.length}个新文档，当前共有${docsList.length}个文档`)\n        } else {\n          console.log(`第${page}页没有新文档，可能是达到了末尾或出现了重复数据`)\n        }\n        \n        // 更新文档列表\n        documents.value = docsList\n        \n        // 如果没有更多数据或已经加载了足够多的文档，则停止递归\n        if (!hasMore || currentPageDocs.length === 0 || page >= 50) {\n          console.log(`文档加载完成，共${docsList.length}个文档${hasMore ? '（但还有更多）' : ''}`)\n          documentsLoading.value = false\n          return docsList\n        }\n        \n        // 如果文档数量太少（比如小于50），并且有更多数据，继续加载下一页\n        if (docsList.length < 200 && hasMore) {\n          console.log(`已获取 ${docsList.length}/${totalCount || '未知'} 个文档，加载下一页...`)\n          // 延迟100ms避免请求过于频繁\n          await new Promise(resolve => setTimeout(resolve, 100))\n          // 递归加载下一页\n          return fetchDocuments(page + 1, docsList)\n        } else {\n          console.log(`已加载足够的文档(${docsList.length}个)或达到限制，停止加载更多`)\n          documentsLoading.value = false\n          return docsList\n        }\n      } catch (error) {\n        console.error('获取文档列表失败', error)\n        ElMessage.error('获取文档列表失败，已加载部分数据')\n        documentsLoading.value = false\n        documents.value = allDocs // 保留已加载的文档\n        return allDocs\n      }\n    }\n    \n    const loading = ref(false)\n    \n    // 添加一个文档缓存对象\n    const documentCache = ref(new Map());\n    \n    const selectDocument = async (id) => {\n      console.log(`选择文档: ${id}, 当前文档: ${currentDoc.value?.id}`);\n      \n      // 如果点击的是当前文档，不执行任何操作\n      if (currentDoc.value && currentDoc.value.id === id) {\n        console.log('已经选中该文档，不执行任何操作');\n        return;\n      }\n      \n      // 如果当前文档已修改，提示保存\n      if (documentChanged.value && currentDoc.value) {\n        try {\n          await ElMessageBox.confirm(\n            '当前文档已修改但未保存，是否保存更改？',\n            '保存提示',\n            {\n              confirmButtonText: '保存',\n              cancelButtonText: '不保存',\n              type: 'warning',\n              distinguishCancelAndClose: true // 允许区分取消和关闭\n            }\n          )\n          await saveDocument()\n        } catch (error) {\n          // 用户选择不保存或点×，撤销本地更改，恢复原内容\n          if (error === 'cancel' || error === 'close') {\n            if (currentDoc.value && originalDoc.value) {\n              currentDoc.value.title = originalDoc.value.title\n              currentDoc.value.type = originalDoc.value.type\n              currentDoc.value.content = originalDoc.value.content\n              documentChanged.value = false\n            }\n          }\n          // 用户选择不保存，继续切换文档\n        }\n      }\n      \n      // 快速显示缓存中的文档（如果有）\n      if (documentCache.value.has(id)) {\n        console.log(`使用缓存的文档数据: ${id}`);\n        const cachedDoc = documentCache.value.get(id);\n        \n        // 先设置当前文档为缓存数据，提高用户体验\n        currentDoc.value = cachedDoc;\n        originalDoc.value = {\n          title: cachedDoc.title || '',\n          type: cachedDoc.type || '通用',\n          content: cachedDoc.content || ''\n        };\n        documentChanged.value = false;\n      }\n      \n      // 更新路由以反映新选中的文档\n      router.push({ name: 'SmartDocDetail', params: { id }, replace: true })\n    }\n    \n    // 记录初始内容用于对比\n    const originalDoc = ref({ title: '', type: '', content: '' })\n    \n    const fetchDocumentDetail = async (id, retry = 0) => {\n      // 如果是同一个文档，且已加载，不重复加载\n      if (currentDoc.value && currentDoc.value.id === id && !loading.value) {\n        console.log(`文档 ${id} 已加载，不重复获取`);\n        return;\n      }\n      \n      loading.value = true\n      try {\n        console.log(`正在获取文档详情，ID: ${id}`)\n        const response = await getDocumentDetail(id)\n        console.log('文档详情响应:', response)\n        \n        if (response && response.data) {\n          // 确保文档数据完整\n          if (!response.data.content) {\n            console.warn('文档内容为空，设置为默认空字符串')\n            response.data.content = ''\n          }\n          \n          // 保存文档数据\n          currentDoc.value = response.data\n          \n          // 更新缓存\n          documentCache.value.set(id, { ...response.data });\n          \n          // 如果缓存过大，清理旧缓存\n          if (documentCache.value.size > 20) {\n            // 转换为数组，保留最近的10个\n            const entries = Array.from(documentCache.value.entries());\n            const recentEntries = entries.slice(-10);\n            documentCache.value = new Map(recentEntries);\n          }\n          \n          // 记录初始内容\n          originalDoc.value = {\n            title: response.data.title || '',\n            type: response.data.type || '通用',\n            content: response.data.content || ''\n          }\n          \n          documentChanged.value = false\n          loading.value = false\n          \n          // 检查数据完整性\n          if (!currentDoc.value.content) {\n            console.warn('文档内容可能缺失，尝试重新获取')\n            // 设置一个定时器，在编辑器加载完成后检查内容\n            setTimeout(() => {\n              if (quillInstance.value && (!currentDoc.value.content || currentDoc.value.content.trim() === '')) {\n                ElMessage.warning('文档内容可能不完整，请尝试刷新页面')\n              }\n            }, 2000)\n          }\n        } else {\n          throw new Error('文档不存在或数据无效')\n        }\n      } catch (error) {\n        console.error('获取文档详情失败', error)\n        \n        if (retry < 3) {\n          console.log(`获取文档详情失败，${retry + 1}秒后重试...`)\n          setTimeout(() => fetchDocumentDetail(id, retry + 1), 1000 * (retry + 1))\n        } else {\n          loading.value = false\n          console.error('多次重试后获取文档详情仍然失败', error)\n          const errorMsg = error.response && error.response.status === 404 \n            ? '文档不存在' \n            : error.response && error.response.data && error.response.data.detail \n              ? error.response.data.detail \n              : '获取文档详情失败'\n          \n          ElMessage.error(errorMsg)\n          // 如果是404，导航回文档列表页\n          if (error.response && error.response.status === 404) {\n            router.push('/smartdoc')\n          }\n        }\n      }\n    }\n    \n    const saveDocument = async () => {\n      if (!currentDoc.value || !documentChanged.value) return\n      \n      saveLoading.value = true\n      try {\n        await updateDocument(currentDoc.value.id, {\n          title: currentDoc.value.title,\n          type: currentDoc.value.type,\n          content: currentDoc.value.content\n        })\n        \n        // 保存成功后，更新原始文档记录\n        originalDoc.value = {\n          title: currentDoc.value.title,\n          type: currentDoc.value.type,\n          content: currentDoc.value.content\n        }\n        documentChanged.value = false\n        ElMessage.success('文档保存成功')\n      } catch (error) {\n        console.error('保存文档失败', error)\n        ElMessage.error('保存文档失败')\n      } finally {\n        saveLoading.value = false\n      }\n    }\n    \n    const toggleDocList = () => {\n      isDocListCollapsed.value = !isDocListCollapsed.value\n    }\n    \n    const toggleAssistant = () => {\n      isAssistantCollapsed.value = !isAssistantCollapsed.value\n    }\n    \n    const onEditorChange = () => {\n      documentChanged.value = true\n    }\n    \n    const openNewDocumentDialog = () => {\n      newDocumentForm.value = { title: '', type: '' }\n      newDocumentDialogVisible.value = true\n    }\n    \n    const createNewDocument = async () => {\n      if (!documentFormRef.value) return\n      \n      await documentFormRef.value.validate(async (valid) => {\n        if (valid) {\n          createLoading.value = true\n          try {\n            const response = await createDocument({\n              title: newDocumentForm.value.title,\n              type: newDocumentForm.value.type || '通用',\n              content: ''\n            })\n            \n            ElMessage.success('文档创建成功')\n            newDocumentDialogVisible.value = false\n            \n            // 刷新文档列表并打开新文档\n            await fetchDocuments()\n            router.push({ name: 'SmartDocDetail', params: { id: response.data.id } })\n      } catch (error) {\n            console.error('创建文档失败', error)\n            ElMessage.error('创建文档失败')\n          } finally {\n            createLoading.value = false\n          }\n        }\n      })\n    }\n    \n    const shareDocument = () => {\n      if (!currentDoc.value) return\n      \n      // 在实际项目中，这里应该从API获取可用用户列表\n      availableUsers.value = [\n        { id: 1, username: '张三' },\n        { id: 2, username: '李四' },\n        { id: 3, username: '王五' }\n      ]\n      selectedUsers.value = []\n      shareDialogVisible.value = true\n    }\n    \n    const confirmShare = async () => {\n      if (!currentDoc.value || selectedUsers.value.length === 0) {\n        ElMessage.warning('请选择至少一个用户')\n        return\n      }\n      \n      shareLoading.value = true\n      try {\n        await apiShareDocument(currentDoc.value.id, selectedUsers.value)\n        ElMessage.success('文档分享成功')\n        shareDialogVisible.value = false\n      } catch (error) {\n        console.error('分享文档失败', error)\n        ElMessage.error('分享文档失败')\n      } finally {\n        shareLoading.value = false\n      }\n    }\n    \n    const deleteDocument = () => {\n      if (!currentDoc.value) return\n      \n      deleteDialogVisible.value = true\n    }\n    \n    const confirmDelete = async () => {\n      if (!currentDoc.value) return\n      \n      deleteLoading.value = true\n      try {\n        await apiDeleteDocument(currentDoc.value.id)\n        ElMessage.success('文档删除成功')\n        deleteDialogVisible.value = false\n        \n        // 返回到文档列表页\n        router.push('/smartdoc')\n      } catch (error) {\n        console.error('删除文档失败', error)\n        ElMessage.error('删除文档失败')\n      } finally {\n        deleteLoading.value = false\n      }\n    }\n    \n    const exportDocument = () => {\n      ElMessageBox({\n        title: '导出文档',\n        message: '请选择导出格式',\n        showCancelButton: true,\n        confirmButtonText: '导出为PDF',\n        cancelButtonText: '导出为Word',\n        closeOnClickModal: true,\n        callback: (action) => {\n          if (action === 'confirm') {\n            exportToPdf()\n          } else if (action === 'cancel') {\n            exportToWord()\n          }\n        }\n      })\n    }\n    \n    // 导出为PDF\n    const exportToPdf = () => {\n      if (!currentDoc.value || !currentDoc.value.content) {\n        ElMessage.error('没有可导出的文档')\n        return\n      }\n      const docTitle = currentDoc.value.title || '未命名文档'\n      const filename = `${docTitle}.pdf`\n      // 直接克隆quill编辑器内容\n      const editorDom = document.querySelector('.ql-editor')\n      if (!editorDom) {\n        ElMessage.error('未找到编辑器内容')\n        return\n      }\n      const contentElement = editorDom.cloneNode(true)\n      const options = {\n        margin: [15, 15, 15, 15],\n        filename: filename,\n        image: { type: 'jpeg', quality: 0.98 },\n        html2canvas: { scale: 2, useCORS: true },\n        jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }\n      }\n      const loading = ElLoading.service({\n        lock: true,\n        text: '正在生成PDF...',\n        background: 'rgba(255, 255, 255, 0.7)'\n      })\n      import('html2pdf.js').then(html2pdfModule => {\n        const html2pdf = html2pdfModule.default\n        html2pdf().from(contentElement).set(options).save().then(() => {\n          loading.close()\n          ElMessage.success('PDF导出成功')\n        }).catch(error => {\n          console.error('PDF导出失败:', error)\n          loading.close()\n          ElMessage.error('PDF导出失败')\n        })\n      }).catch(error => {\n        console.error('加载html2pdf.js失败:', error)\n        loading.close()\n        ElMessage.error('PDF导出功能加载失败')\n      })\n    }\n    \n    // 导出为Word（保留图片）\n    const exportToWord = async () => {\n      if (!currentDoc.value || !currentDoc.value.content) {\n        ElMessage.error('没有可导出的文档')\n        return\n      }\n      \n      const docTitle = currentDoc.value.title || '未命名文档'\n      const filename = `${docTitle}.doc`\n      \n      const loading = ElLoading.service({\n        lock: true,\n        text: '正在生成Word文档...',\n        background: 'rgba(255, 255, 255, 0.7)'\n      })\n      \n      try {\n        // 创建一个临时文档容器处理内容\n        const contentContainer = document.createElement('div')\n        contentContainer.innerHTML = currentDoc.value.content\n        // 不再替换图片为占位符，直接保留<img>标签\n        // 创建微软Word兼容的HTML文档\n        const msWordHtml = `\n          <html xmlns:o=\"urn:schemas-microsoft-com:office:office\" \n                xmlns:w=\"urn:schemas-microsoft-com:office:word\" \n                xmlns=\"http://www.w3.org/TR/REC-html40\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>${docTitle}</title>\n            <style>\n              body { font-family: SimSun, Arial, sans-serif; margin: 1cm; }\n              img { max-width: 100%; height: auto; }\n              p { margin: 0; padding: 0; }\n              h1 { font-size: 18pt; }\n              h2 { font-size: 16pt; }\n              h3 { font-size: 14pt; }\n              table { border-collapse: collapse; width: 100%; }\n              td, th { border: 1px solid #000; padding: 5px; }\n            </style>\n          </head>\n          <body>\n            <h1>${docTitle}</h1>\n            ${contentContainer.innerHTML}\n          </body>\n          </html>\n        `\n        // 使用file-saver保存文件\n        const FileSaver = await import('file-saver')\n        const saveAs = FileSaver.saveAs || FileSaver.default\n        const blob = new Blob([msWordHtml], { type: 'application/msword' })\n        saveAs(blob, filename)\n        loading.close()\n        ElMessage.success('Word文档导出成功')\n      } catch (error) {\n        console.error('Word导出失败:', error)\n        loading.close()\n        ElMessage.error(`Word导出失败: ${error.message || '未知错误'}`)\n      }\n    }\n    \n    const printDocument = () => {\n      ElMessage.info('打印文档功能暂未实现')\n    }\n    \n    const addCollaborator = () => {\n      ElMessage.info('添加协作者功能暂未实现')\n    }\n    \n    const viewHistory = () => {\n      ElMessage.info('查看历史版本功能暂未实现')\n    }\n    \n    // 1. 在setup里加缓存变量\n    const quillSelection = ref(null);\n    const quillSelectedText = ref('');\n\n    // 2. 监听Quill的selection-change事件\n    const onSelectionChange = (range) => {\n      console.log('组件selection-change事件:', range);\n      if (!quillInstance.value) return;\n      \n      if (range && range.length > 0) {\n        const text = quillInstance.value.getText(range.index, range.length);\n        console.log('组件选中文本:', text);\n        quillSelectedText.value = text;\n        quillSelection.value = range;\n      } else {\n        console.log('组件清除选择');\n        quillSelectedText.value = '';\n        quillSelection.value = null;\n      }\n    };\n\n    // 1. 最大长度常量\n    const MAX_AI_TEXT_LENGTH = 2000;\n\n    // 2. expandContent方法加截断\n    const expandContent = async () => {\n      if (!currentDoc.value) return;\n      try {\n        expandLoading.value = true;\n        if (!quillInstance.value) {\n          ElMessage.error('编辑器未就绪，请稍后再试');\n          expandLoading.value = false;\n          return;\n        }\n        quillInstance.value.focus();\n        const selection = quillInstance.value.getSelection();\n        let selectedText = '';\n        let range = null;\n        if (selection && selection.length > 0) {\n          range = selection;\n          selectedText = quillInstance.value.getText(selection.index, selection.length);\n        }\n        if (!selectedText) {\n          ElMessage.warning('请先选择要扩写的文本内容');\n          expandLoading.value = false;\n          return;\n        }\n        if (selectedText.length > MAX_AI_TEXT_LENGTH) {\n          ElMessage.warning(`选中文本过长，已自动截断为前${MAX_AI_TEXT_LENGTH}字`);\n          selectedText = selectedText.slice(0, MAX_AI_TEXT_LENGTH);\n        }\n        ElMessage.info('正在扩写内容，请稍候...');\n        const response = await apiExpandContent(currentDoc.value.id, {\n          selection: selectedText,\n          length: 'medium'\n        });\n        showCompareDialog({\n          title: '内容扩写结果',\n          original: selectedText,\n          modified: response.data.content,\n          onApply: (finalContent) => {\n            if (\n              range &&\n              typeof range.index === 'number' &&\n              typeof range.length === 'number' &&\n              range.index >= 0 &&\n              range.length > 0\n            ) {\n              const quillLen = quillInstance.value.getLength();\n              let insertPos = range.index;\n              if (insertPos > quillLen) insertPos = quillLen - 1;\n              quillInstance.value.deleteText(insertPos, range.length);\n              quillInstance.value.insertText(insertPos, finalContent);\n              let selPos = insertPos + finalContent.length;\n              if (selPos > quillInstance.value.getLength() - 1) selPos = quillInstance.value.getLength() - 1;\n              quillInstance.value.setSelection(selPos, 0);\n              documentChanged.value = true;\n              ElMessage.success('内容扩写已应用');\n              scrollQuillToBottom();\n            } else {\n              ElMessage.error('选区无效，无法插入内容');\n            }\n          }\n        });\n      } catch (error) {\n        console.error('[内容扩写] 异常:', error);\n        if (error && error.response) {\n          ElMessage.error('内容扩写失败: ' + (error.response.data.detail || error.message));\n        } else {\n          ElMessage.error('内容扩写失败，请稍后再试');\n        }\n      } finally {\n        expandLoading.value = false;\n      }\n    };\n\n    // 3. polishText同理\n    const polishText = async () => {\n      if (!currentDoc.value) return;\n      try {\n        polishLoading.value = true;\n        if (!quillInstance.value) {\n          ElMessage.error('编辑器未就绪，请稍后再试');\n          polishLoading.value = false;\n          return;\n        }\n        quillInstance.value.focus();\n        const selection = quillInstance.value.getSelection();\n        let selectedText = '';\n        let range = null;\n        if (selection && selection.length > 0) {\n          range = selection;\n          selectedText = quillInstance.value.getText(selection.index, selection.length);\n        }\n        if (!selectedText) {\n          ElMessage.warning('请先选择要润色的文本内容');\n          polishLoading.value = false;\n          return;\n        }\n        if (selectedText.length > MAX_AI_TEXT_LENGTH) {\n          ElMessage.warning(`选中文本过长，已自动截断为前${MAX_AI_TEXT_LENGTH}字`);\n          selectedText = selectedText.slice(0, MAX_AI_TEXT_LENGTH);\n        }\n        ElMessage.info('正在润色文本，请稍候...');\n        const response = await apiPolishText(currentDoc.value.id, {\n          selection: selectedText,\n          style: 'professional'\n        });\n        showCompareDialog({\n          title: '文本润色结果',\n          original: selectedText,\n          modified: response.data.content,\n          onApply: (finalContent) => {\n            if (\n              range &&\n              typeof range.index === 'number' &&\n              typeof range.length === 'number' &&\n              range.index >= 0 &&\n              range.length > 0\n            ) {\n              const quillLen = quillInstance.value.getLength();\n              let insertPos = range.index;\n              if (insertPos > quillLen) insertPos = quillLen - 1;\n              quillInstance.value.deleteText(insertPos, range.length);\n              quillInstance.value.insertText(insertPos, finalContent);\n              let selPos = insertPos + finalContent.length;\n              if (selPos > quillInstance.value.getLength() - 1) selPos = quillInstance.value.getLength() - 1;\n              quillInstance.value.setSelection(selPos, 0);\n              documentChanged.value = true;\n              ElMessage.success('文本润色已应用');\n              scrollQuillToBottom();\n            } else {\n              ElMessage.error('选区无效，无法插入内容');\n            }\n          }\n        });\n      } catch (error) {\n        console.error('[文本润色] 异常:', error);\n        if (error && error.response) {\n          ElMessage.error('文本润色失败: ' + (error.response.data.detail || error.message));\n        } else {\n          ElMessage.error('文本润色失败，请稍后再试');\n        }\n      } finally {\n        polishLoading.value = false;\n      }\n    };\n    \n    // 添加比较弹窗的状态变量和方法\n    const compareDialogVisible = ref(false)\n    const compareDialogData = ref({\n      title: '',\n      original: '',\n      modified: '',\n      modifiedContent: '',\n      onApply: () => {}\n    })\n    \n    // 显示比较弹窗\n    const showCompareDialog = (data) => {\n      compareDialogData.value = {\n        ...data,\n        modifiedContent: data.modified\n      };\n      compareDialogVisible.value = true;\n    }\n    \n    // 应用比较弹窗的更改\n    const applyCompareChanges = () => {\n      compareDialogData.value.onApply(compareDialogData.value.modifiedContent);\n      compareDialogVisible.value = false;\n    }\n    \n    // 关闭比较弹窗\n    const closeCompareDialog = () => {\n      compareDialogVisible.value = false\n    }\n    \n    // 防抖搜索\n    const debouncedSearch = _.debounce(() => {\n      // 搜索逻辑已通过计算属性处理\n    }, 300)\n    \n    const formatDate = (dateString) => {\n      const date = new Date(dateString)\n      const now = new Date()\n      \n      // 同一天显示时间\n      if (date.toDateString() === now.toDateString()) {\n        return date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })\n      }\n      \n      // 昨天\n      const yesterday = new Date(now)\n      yesterday.setDate(now.getDate() - 1)\n      if (date.toDateString() === yesterday.toDateString()) {\n        return '昨天'\n      }\n      \n      // 一周内显示星期\n      const weekDays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n      const diffDays = Math.round((now - date) / (1000 * 60 * 60 * 24))\n      if (diffDays < 7) {\n        return weekDays[date.getDay()]\n      }\n      \n      // 其他情况显示日期\n      return date.toLocaleDateString('zh-CN', { month: 'numeric', day: 'numeric' })\n    }\n    \n    // 监听路由变化\n    watch(() => route.params.id, (newId, oldId) => {\n      console.log(`路由参数ID变化: ${oldId} -> ${newId}`)\n      if (newId) {\n        // 检查ID是否为有效正整数\n        const idNum = Number(newId)\n        if (isNaN(idNum) || idNum <= 0 || !Number.isInteger(idNum)) {\n          ElMessage.error('无效的文档ID')\n          router.push('/smartdoc')\n          return\n        }\n        \n        // 如果ID发生了变化，重新获取文档\n        if (newId !== oldId) {\n          console.log(`文档ID变化，获取文档详情: ${newId}`)\n          // 检查是否已有缓存\n          if (documentCache.value.has(newId)) {\n            console.log(`使用缓存的文档数据: ${newId}`);\n            currentDoc.value = documentCache.value.get(newId);\n            originalDoc.value = {\n              title: currentDoc.value.title || '',\n              type: currentDoc.value.type || '通用',\n              content: currentDoc.value.content || ''\n            };\n            documentChanged.value = false;\n            \n            // 在后台异步刷新数据\n            setTimeout(() => {\n              fetchDocumentDetail(newId);\n            }, 500);\n          } else {\n            // 没有缓存，直接获取\n            fetchDocumentDetail(newId);\n          }\n        }\n      } else {\n        currentDoc.value = null\n      }\n    }, { immediate: false }) // 设为false避免重复加载\n    \n    // 监听query参数变化，处理强制刷新\n    watch(() => route.query._refresh, (newVal) => {\n      if (newVal) {\n        console.log('检测到强制刷新参数:', newVal)\n        const docId = route.params.id\n        if (docId) {\n          console.log('强制刷新文档详情:', docId)\n          fetchDocumentDetail(docId)\n        }\n        // 同时刷新文档列表\n        fetchDocuments()\n      }\n    })\n    \n    // 自动保存功能\n    setInterval(() => {\n      if (documentChanged.value && currentDoc.value && !saveLoading.value) {\n        saveDocument()\n      }\n    }, 60000) // 每分钟自动保存一次\n    \n    // 生命周期钩子\n    onMounted(() => {\n      console.log('组件挂载，开始加载数据')\n      \n      // 获取当前文档ID\n      const docId = route.params.id\n      \n      // 如果有文档ID，优先加载文档详情\n      if (docId) {\n        console.log('有文档ID，优先加载文档详情:', docId)\n        fetchDocumentDetail(docId).then(() => {\n          // 文档详情加载完成后，异步加载文档列表\n          console.log('文档详情加载完成，开始加载文档列表')\n          fetchDocuments().then(() => {\n            // 文档列表加载完成后，滚动到当前文档\n            console.log('文档列表加载完成')\n            nextTick(() => {\n              scrollToActiveDocument();\n            });\n          });\n        });\n      } else {\n        // 没有文档ID，只加载文档列表\n        console.log('没有文档ID，只加载文档列表')\n        fetchDocuments();\n      }\n    })\n    \n    // 滚动到当前选中的文档\n    const scrollToActiveDocument = () => {\n      try {\n        if (!currentDoc.value) return;\n        \n        // 查找当前激活的文档元素\n        const activeDoc = document.querySelector('.doc-item.active');\n        if (activeDoc) {\n          // 使用scrollIntoView滚动到该元素\n          activeDoc.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n        }\n      } catch (error) {\n        console.error('滚动到活动文档失败:', error);\n      }\n    }\n    \n    // 只有内容实际变化才标记为已修改\n    const onTitleChange = (val) => {\n      documentChanged.value = val !== originalDoc.value.title\n    }\n    const onTypeChange = (val) => {\n      documentChanged.value = val !== originalDoc.value.type\n    }\n    const onContentChange = () => {\n      // 修复：正确比较编辑器内容\n      if (currentDoc.value && originalDoc.value) {\n        // 比较当前内容与原始内容是否真的不同\n        const currentContent = currentDoc.value.content\n        const originalContent = originalDoc.value.content\n        documentChanged.value = currentContent !== originalContent\n      }\n      scrollQuillToBottom();\n    }\n    \n    // 编辑器实例\n    const quillInstance = ref(null);\n\n    // 2. 编辑器ready时赋值\n    const onEditorReady = (quill) => {\n      console.log('编辑器就绪');\n      quillInstance.value = quill;\n      \n      // 直接监听editor的selection-change事件\n      quill.on('selection-change', (range, oldRange, source) => {\n        console.log('选择变化:', range, source);\n        if (range && range.length > 0) {\n          const text = quill.getText(range.index, range.length);\n          console.log('选中文本:', text);\n          quillSelectedText.value = text;\n          quillSelection.value = range;\n        } else if (source === 'user' || !range) {\n          console.log('清除选择');\n          quillSelectedText.value = '';\n          quillSelection.value = null;\n        }\n      });\n    };\n    \n    // 自动滚动到底部\n    function scrollQuillToBottom() {\n      if (quillInstance.value) {\n        const container = quillInstance.value.root;\n        container.scrollTop = container.scrollHeight;\n      }\n    }\n    \n    const grammarCheckText = async () => {\n      if (!currentDoc.value) return;\n      try {\n        grammarCheckLoading.value = true;\n        if (!quillInstance.value) {\n          ElMessage.error('编辑器未就绪，请稍后再试');\n          grammarCheckLoading.value = false;\n          return;\n        }\n        quillInstance.value.focus();\n        const selection = quillInstance.value.getSelection();\n        let selectedText = '';\n        let range = null;\n        if (selection && selection.length > 0) {\n          range = selection;\n          selectedText = quillInstance.value.getText(selection.index, selection.length);\n        }\n        if (!selectedText) {\n          ElMessage.warning('请先选择要纠错的文本内容');\n          grammarCheckLoading.value = false;\n          return;\n        }\n        if (selectedText.length > MAX_AI_TEXT_LENGTH) {\n          ElMessage.warning(`选中文本过长，已自动截断为前${MAX_AI_TEXT_LENGTH}字`);\n          selectedText = selectedText.slice(0, MAX_AI_TEXT_LENGTH);\n        }\n        ElMessage.info('正在智能纠错，请稍候...');\n        const response = await grammarCheck(currentDoc.value.id, { selection: selectedText });\n        // 只保留建议部分，去除\"优化后的文本\"字样，并将md转为html\n        let suggestions = response.suggestions || '';\n        suggestions = suggestions.replace(/\\*\\*优化后的文本\\*\\*[:：]?([\\s\\S]*)$/, '').trim();\n        const suggestionsHtml = marked.parse(suggestions);\n        showCompareDialog({\n          title: '智能纠错建议',\n          original: selectedText,\n          modified: response.corrected, // 右侧编辑器直接填优化后文本\n          suggestions: suggestionsHtml, // AI建议区只显示建议，且为html\n          onApply: (finalContent) => {\n            if (\n              range &&\n              typeof range.index === 'number' &&\n              typeof range.length === 'number' &&\n              range.index >= 0 &&\n              range.length > 0\n            ) {\n              const quillLen = quillInstance.value.getLength();\n              let insertPos = range.index;\n              if (insertPos > quillLen) insertPos = quillLen - 1;\n              quillInstance.value.deleteText(insertPos, range.length);\n              quillInstance.value.insertText(insertPos, finalContent);\n              let selPos = insertPos + finalContent.length;\n              if (selPos > quillInstance.value.getLength() - 1) selPos = quillInstance.value.getLength() - 1;\n              quillInstance.value.setSelection(selPos, 0);\n              documentChanged.value = true;\n              ElMessage.success('智能纠错已应用');\n              scrollQuillToBottom();\n            } else {\n              ElMessage.error('选区无效，无法插入内容');\n            }\n          }\n        });\n      } catch (error) {\n        console.error('[智能纠错] 异常:', error);\n        if (error && error.response) {\n          ElMessage.error('智能纠错失败: ' + (error.response.data.detail || error.message));\n        } else {\n          ElMessage.error('智能纠错失败，请稍后再试');\n        }\n      } finally {\n        grammarCheckLoading.value = false;\n      }\n    }\n    \n    // 多语言翻译\n    const translateDialogVisible = ref(false)\n    const translateInput = ref('')\n    const translateResult = ref('')\n    const translateLoading = ref(false)\n    const targetLang = ref('en')\n    const translateModifiedContent = ref('')\n    const openTranslateDialog = () => {\n      translateDialogVisible.value = true\n      translateInput.value = ''\n      translateResult.value = ''\n      translateModifiedContent.value = ''\n      // 自动填入选区内容\n      if (quillInstance.value) {\n        const selection = quillInstance.value.getSelection()\n        if (selection && selection.length > 0) {\n          translateInput.value = quillInstance.value.getText(selection.index, selection.length)\n        }\n      }\n    }\n    const useSelectedTextForTranslate = () => {\n      if (!quillInstance.value) return\n      const selection = quillInstance.value.getSelection()\n      if (selection && selection.length > 0) {\n        translateInput.value = quillInstance.value.getText(selection.index, selection.length)\n      }\n    }\n    const doTranslate = async () => {\n      if (!currentDoc.value || !translateInput.value) return\n      translateLoading.value = true\n      try {\n        const res = await translateText(currentDoc.value.id, { selection: translateInput.value, target_lang: targetLang.value })\n        translateResult.value = res.translated\n        translateModifiedContent.value = res.translated\n      } catch (e) {\n        ElMessage.error('翻译失败')\n      } finally {\n        translateLoading.value = false\n      }\n    }\n    const replaceSelectionWithTranslation = () => {\n      if (!quillInstance.value || !translateModifiedContent.value) return\n      const selection = quillInstance.value.getSelection()\n      if (selection && selection.length > 0) {\n        const quillLen = quillInstance.value.getLength()\n        let insertPos = selection.index\n        if (insertPos > quillLen) insertPos = quillLen - 1\n        // 插入富文本内容（html）\n        quillInstance.value.deleteText(insertPos, selection.length)\n        quillInstance.value.clipboard.dangerouslyPasteHTML(insertPos, translateModifiedContent.value)\n        let selPos = insertPos + translateModifiedContent.value.replace(/<[^>]+>/g, '').length\n        if (selPos > quillInstance.value.getLength() - 1) selPos = quillInstance.value.getLength() - 1\n        quillInstance.value.setSelection(selPos, 0)\n        documentChanged.value = true\n        ElMessage.success('已替换为翻译内容')\n        translateDialogVisible.value = false\n        scrollQuillToBottom()\n      } else {\n        // 未选中内容时插入到光标处\n        const cursor = quillInstance.value.getSelection(true)\n        let insertPos = cursor ? cursor.index : quillInstance.value.getLength() - 1\n        quillInstance.value.insertEmbed(insertPos, 'text', translateModifiedContent.value)\n        quillInstance.value.setSelection(insertPos + translateModifiedContent.value.replace(/<[^>]+>/g, '').length, 0)\n        documentChanged.value = true\n        ElMessage.success('已插入翻译内容')\n        translateDialogVisible.value = false\n        scrollQuillToBottom()\n      }\n    }\n\n    // 智能问答\n    const qaDialogVisible = ref(false)\n    const qaQuestion = ref('')\n    const qaAnswer = ref('')\n    const qaLoading = ref(false)\n    \n    // 计算属性：将Markdown格式的回答转换为HTML\n    const qaAnswerHtml = computed(() => {\n      return qaAnswer.value ? marked.parse(qaAnswer.value) : ''\n    })\n    \n    const openQaDialog = () => {\n      qaDialogVisible.value = true\n      qaQuestion.value = ''\n      qaAnswer.value = ''\n    }\n    const doQa = async () => {\n      if (!currentDoc.value || !qaQuestion.value) return\n      qaLoading.value = true\n      try {\n        const res = await docQa(currentDoc.value.id, { question: qaQuestion.value, context: currentDoc.value.content })\n        qaAnswer.value = res.answer\n      } catch (e) {\n        ElMessage.error('问答失败')\n      } finally {\n        qaLoading.value = false\n      }\n    }\n    \n    return {\n      documents,\n      currentDoc,\n      documentChanged,\n      isDocListCollapsed,\n      isAssistantCollapsed,\n      searchQuery,\n      docTypeFilter,\n      sortOption,\n      filteredDocuments,\n      newDocumentDialogVisible,\n      shareDialogVisible,\n      deleteDialogVisible,\n      selectedUsers,\n      availableUsers,\n      saveLoading,\n      createLoading,\n      shareLoading,\n      deleteLoading,\n      expandLoading,\n      polishLoading,\n      grammarCheckLoading,\n      newDocumentForm,\n      documentFormRules,\n      documentFormRef,\n      editorOptions,\n      fetchDocuments,\n      fetchDocumentDetail,\n      selectDocument,\n      saveDocument,\n      toggleDocList,\n      toggleAssistant,\n      onEditorChange,\n      openNewDocumentDialog,\n      createNewDocument,\n      shareDocument,\n      confirmShare,\n      deleteDocument,\n      confirmDelete,\n      exportDocument,\n      exportToPdf,\n      exportToWord,\n      printDocument,\n      addCollaborator,\n      viewHistory,\n      expandContent,\n      polishText,\n      debouncedSearch,\n      formatDate,\n      loading,\n      onTitleChange,\n      onTypeChange,\n      onContentChange,\n      onEditorReady,\n      compareDialogVisible,\n      compareDialogData,\n      showCompareDialog,\n      applyCompareChanges,\n      closeCompareDialog,\n      quillSelection,\n      quillSelectedText,\n      onSelectionChange,\n      quillInstance,\n      grammarCheckText,\n      translateDialogVisible,\n      translateInput,\n      translateResult,\n      translateLoading,\n      targetLang,\n      openTranslateDialog,\n      useSelectedTextForTranslate,\n      doTranslate,\n      qaDialogVisible,\n      qaQuestion,\n      qaAnswer,\n      qaLoading,\n      openQaDialog,\n      doQa,\n      qaAnswerHtml,\n      replaceSelectionWithTranslation,\n      translateModifiedContent,\n      documentsLoading,\n      documentCache,\n      scrollToActiveDocument\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n/* 修改整体布局，调整侧边栏和主内容区域的宽度比例 */\n.smart-doc-container {\n  display: flex;\n  height: 100%;\n  overflow: hidden;\n  background-color: #fff;\n}\n\n.sidebar {\n  width: 240px;\n  height: 100%;\n  border-right: 1px solid #e6e6e6;\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  /* 仅保留宽度变化的过渡，其他动画全部去除 */\n  transition: width 0.3s;\n}\n\n.sidebar.collapsed {\n  width: 50px;\n}\n\n.sidebar-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 16px;\n  border-bottom: 1px solid #e6e6e6;\n  height: 48px;\n  box-sizing: border-box;\n}\n\n.sidebar-header h4 {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.toggle-btn {\n  cursor: pointer;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n}\n\n.toggle-btn:hover {\n  background-color: #f2f2f2;\n}\n\n.sidebar-content {\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 48px);\n  overflow: hidden;\n}\n\n.search-area {\n  padding: 12px;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.filter-options {\n  display: flex;\n  gap: 8px;\n  margin-top: 8px;\n}\n\n.document-list-scrollbar {\n  flex: 1;\n  padding: 8px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  scroll-behavior: smooth; /* 添加平滑滚动效果 */\n}\n\n.document-list-scrollbar :deep(.el-scrollbar__wrap) {\n  overflow-x: hidden;\n  scrollbar-width: thin; /* Firefox */\n}\n\n.document-list-scrollbar :deep(.el-scrollbar__thumb) {\n  background-color: rgba(144, 147, 153, 0.3);\n  border-radius: 6px;\n}\n\n.document-list-scrollbar :deep(.el-scrollbar__thumb:hover) {\n  background-color: rgba(144, 147, 153, 0.5);\n}\n\n.document-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding-right: 4px; /* 为滚动条留出空间 */\n}\n\n.doc-item {\n  display: flex;\n  align-items: center;\n  padding: 8px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease; /* 加快过渡速度 */\n}\n\n.doc-item:hover {\n  background-color: #f5f7fa;\n}\n\n.doc-item.active {\n  background-color: #ecf5ff;\n}\n\n.doc-icon {\n  margin-right: 12px;\n  color: #409eff;\n}\n\n.doc-info {\n  flex: 1;\n  overflow: hidden;\n}\n\n.doc-info h5 {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.doc-meta {\n  display: flex;\n  justify-content: space-between;\n  font-size: 12px;\n  color: #909399;\n}\n\n.action-buttons {\n  padding: 12px;\n  border-top: 1px solid #f0f0f0;\n}\n\n.action-buttons .el-button {\n  width: 100%;\n}\n\n.collapsed-sidebar {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 12px 0;\n  gap: 12px;\n  height: calc(100% - 48px);\n  overflow-y: auto;\n}\n\n.icon-btn {\n  width: 36px;\n  height: 36px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.icon-btn:hover {\n  background-color: #f2f2f2;\n}\n\n.icon-btn.doc-btn.active {\n  background-color: #ecf5ff;\n  color: #409eff;\n}\n\n.create-btn {\n  background-color: #ecf5ff;\n  color: #409eff;\n}\n\n.recent-docs {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 100%;\n  align-items: center;\n}\n\n/* 主内容区域样式 */\n.main-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-width: 0;\n  height: 100%;\n  background-color: #f6f6f6;\n  position: relative;\n  /* 去除外部滚动 */\n  overflow: hidden;\n}\n\n.document-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background-color: #fff;\n  height: 100%;\n  overflow: hidden;\n}\n\n/* 文档标题和类型标签样式 */\n.doc-title-label, .doc-type-label {\n  font-size: 14px;\n  font-weight: 600;\n  color: #606266;\n  white-space: nowrap;\n}\n\n.document-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 24px;\n  background-color: #fff;\n  border-bottom: 1px solid #e6e6e6;\n  height: 68px;\n  box-sizing: border-box;\n  width: 100%;\n  z-index: 5;\n}\n\n.doc-info-area {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex: 1;\n}\n\n.doc-title {\n  width: 300px;\n}\n\n.doc-type-selector {\n  width: 150px;\n}\n\n.doc-actions {\n  display: flex;\n  gap: 8px;\n  z-index: 6; /* 确保操作按钮在最上层 */\n}\n\n.editor-area {\n  flex: 1;\n  background-color: #fff;\n  height: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  box-sizing: border-box;\n  padding: 0; /* 取消padding，避免高度累加 */\n}\n\n.quill-editor {\n  flex: 1;\n  height: 100%;\n  background: #fff;\n  min-height: 0;\n  box-sizing: border-box;\n}\n\n.quill-editor :deep(.ql-container) {\n  flex: 1;\n  height: 100% !important;\n  min-height: 0 !important;\n  overflow-y: auto !important;\n  background: #fff !important;\n  box-sizing: border-box;\n}\n\n.quill-editor :deep(.ql-editor) {\n  flex: 1;\n  min-height: 0 !important;\n  height: 100% !important;\n  overflow-y: auto !important;\n  background: #fff !important;\n  padding: 15px;\n  box-sizing: border-box;\n}\n\n.empty-doc-state {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #fff;\n}\n\n/* 智能助手面板样式 */\n.assistant-panel {\n  width: 280px;\n  height: 100%;\n  border-left: 1px solid #e6e6e6;\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  transition: width 0.3s;\n}\n\n.assistant-panel.collapsed {\n  width: 50px;\n}\n\n.assistant-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 16px;\n  border-bottom: 1px solid #e6e6e6;\n  height: 48px;\n  box-sizing: border-box;\n}\n\n.assistant-header h5 {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.assistant-body {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  padding: 16px;\n}\n\n.ai-features-beauty {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 28px;\n  margin-top: 30px;\n}\n\n.ai-feature-card {\n  width: 100%;\n  max-width: 320px;\n  background: #f8fafd;\n  border-radius: 12px;\n  box-shadow: 0 2px 8px rgba(80,120,200,0.06);\n  padding: 18px 20px 10px 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  transition: box-shadow 0.2s;\n}\n\n.ai-feature-card:hover {\n  box-shadow: 0 4px 16px rgba(80,120,200,0.13);\n}\n\n.ai-feature-btn {\n  width: 100%;\n  height: 48px;\n  font-size: 17px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  margin-bottom: 6px;\n  transition: background 0.2s, color 0.2s;\n}\n\n.ai-feature-desc {\n  font-size: 13px;\n  color: #7a8599;\n  text-align: center;\n  margin-top: 2px;\n  margin-bottom: 2px;\n  line-height: 1.6;\n}\n\n.context-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.warning-text {\n  color: #f56c6c;\n  font-weight: 500;\n}\n\n.compare-content {\n  flex: 1;\n  display: flex;\n  gap: 20px;\n  overflow: hidden;\n}\n\n.original-content, .modified-content {\n  flex: 1;\n  min-width: 350px;\n  max-width: 50%;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background: #fff;\n}\n\n.original-content h6, .modified-content h6 {\n  margin: 0;\n  padding: 10px;\n  font-size: 14px;\n  font-weight: 600;\n  background-color: #eef2f6;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.content-box {\n  padding: 15px;\n  overflow-y: auto;\n  white-space: pre-wrap;\n  flex: 1;\n  font-size: 14px;\n  line-height: 1.6;\n  max-height: 50vh;\n  border: 1px solid #e0e0e0;\n  background-color: #fff;\n}\n\n.compare-dialog :deep(.el-dialog__body) {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  max-height: 60vh;\n  height: 60vh;\n  overflow: hidden;\n}\n\n.compare-dialog :deep(.el-dialog__header) {\n  padding: 15px 20px;\n}\n\n.compare-dialog :deep(.el-dialog__footer) {\n  padding: 10px 20px;\n}\n\n.compare-dialog :deep(.el-dialog) {\n  max-height: 85vh; /* 限制整个对话框的最大高度 */\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto !important;\n  overflow: hidden; /* 弹窗本身不应该滚动 */\n}\n\n/* 确保弹窗内容能够撑满但不溢出弹窗 */\n.compare-dialog :deep(.el-dialog__body) {\n  padding: 20px;\n  flex: 1;\n  overflow: auto;\n  max-height: calc(85vh - 110px); /* 减去头部和底部的高度 */\n  height: auto;\n  display: flex;\n  flex-direction: column;\n}\n\n.dialog-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  overflow: visible;\n}\n\n.quill-editor-in-dialog {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n}\n\n.quill-editor-in-dialog :deep(.ql-toolbar) {\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  background: #fff;\n}\n\n.quill-editor-in-dialog :deep(.ql-container) {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100% !important;\n  overflow-y: auto !important;\n  background: #fff !important;\n}\n\n.quill-editor-in-dialog :deep(.ql-editor) {\n  flex: 1;\n  min-height: 0 !important;\n  height: 100% !important;\n  overflow-y: auto !important;\n  background: #fff !important;\n  padding: 15px;\n}\n\n.document-count {\n  text-align: center;\n  padding: 12px;\n  color: #909399;\n  font-size: 13px;\n  border-top: 1px dashed #e6e6e6;\n  margin-top: 10px;\n}\n\n.loading-state {\n  padding: 10px;\n  min-height: 200px;\n}\n\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 200px;\n  padding: 20px;\n  text-align: center;\n  color: #909399;\n}\n</style>\n\n<style>\n/* Markdown 内容样式 */\n.el-alert__content div {\n  max-height: 400px;\n  overflow-y: auto;\n  padding-right: 8px;\n}\n\n/* Markdown 样式 */\n.el-alert__content div h1,\n.el-alert__content div h2,\n.el-alert__content div h3,\n.el-alert__content div h4,\n.el-alert__content div h5,\n.el-alert__content div h6 {\n  margin-top: 16px;\n  margin-bottom: 8px;\n  font-weight: 600;\n}\n\n.el-alert__content div h1 { font-size: 1.5em; }\n.el-alert__content div h2 { font-size: 1.3em; }\n.el-alert__content div h3 { font-size: 1.2em; }\n\n.el-alert__content div p {\n  margin-bottom: 12px;\n  line-height: 1.6;\n}\n\n.el-alert__content div ul,\n.el-alert__content div ol {\n  padding-left: 20px;\n  margin-bottom: 12px;\n}\n\n.el-alert__content div li {\n  margin-bottom: 4px;\n}\n\n.el-alert__content div code {\n  background-color: #f0f0f0;\n  padding: 2px 4px;\n  border-radius: 3px;\n  font-family: monospace;\n  font-size: 0.9em;\n}\n\n.el-alert__content div pre {\n  background-color: #f5f5f5;\n  padding: 12px;\n  border-radius: 4px;\n  overflow-x: auto;\n  margin-bottom: 12px;\n}\n\n.el-alert__content div pre code {\n  background-color: transparent;\n  padding: 0;\n  border-radius: 0;\n  display: block;\n  white-space: pre;\n}\n\n.el-alert__content div blockquote {\n  border-left: 4px solid #ddd;\n  padding-left: 12px;\n  color: #666;\n  margin: 0 0 12px;\n}\n\n.el-alert__content div table {\n  border-collapse: collapse;\n  margin-bottom: 12px;\n  width: 100%;\n}\n\n.el-alert__content div th,\n.el-alert__content div td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\n\n.el-alert__content div th {\n  background-color: #f2f2f2;\n}\n\n.el-alert__content div a {\n  color: #409eff;\n  text-decoration: none;\n}\n\n.el-alert__content div a:hover {\n  text-decoration: underline;\n}\n\n.el-alert__content div img {\n  max-width: 100%;\n  height: auto;\n}\n</style> "]}]}