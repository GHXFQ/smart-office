{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\UserManagement.vue?vue&type=style&index=0&id=3c885568&lang=css","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\UserManagement.vue","mtime":1750340322871},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1746431217000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1746431217000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJy4vc2hhcmVkLXN0eWxlcy5jc3MnOwoKLm1hbmFnZW1lbnQtY29udGFpbmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgLyogT3ZlcnJpZGluZyBmb3IgdGhpcyBjb21wb25lbnQgKi8KICBwYWRkaW5nOiAwOwogIGJveC1zaGFkb3c6IG5vbmU7Cn0K"},{"version":3,"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\admin\\UserManagement.vue"],"names":[],"mappings":";AAuRA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClB","file":"C:/Users/18083/Desktop/CCIT/office/smart-office/frontend/src/views/admin/UserManagement.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"management-container\">\n    <el-card class=\"box-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span><i class=\"bi bi-people-fill header-icon\"></i> 用户管理</span>\n          <div class=\"actions\">\n            <el-input\n              v-model=\"searchQuery\"\n              placeholder=\"搜索用户...\"\n              clearable\n              @clear=\"fetchUsers\"\n              @input=\"debouncedFetchUsers\"\n              class=\"search-input\"\n            >\n              <template #append>\n                <el-button :icon=\"Search\"></el-button>\n              </template>\n            </el-input>\n            <el-button type=\"primary\" @click=\"openUserModal()\">添加用户</el-button>\n          </div>\n        </div>\n      </template>\n      <div class=\"table-container\">\n        <table>\n          <thead>\n            <tr>\n              <th>序号</th>\n              <th>用户名</th>\n              <th>邮箱</th>\n              <th>公司</th>\n              <th>部门</th>\n              <th>职位</th>\n              <th>角色</th>\n              <th>操作</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(user, index) in users\" :key=\"user.id\">\n              <td>{{ index + 1 }}</td>\n              <td>{{ user.name || user.username }}</td>\n              <td>{{ user.email }}</td>\n              <td>{{ user.company_name || '未分配' }}</td>\n              <td>{{ user.department_name || '未分配' }}</td>\n              <td>{{ user.position || '未指定' }}</td>\n              <td>\n                <span v-if=\"user.is_staff\" class=\"role-tag role-admin\">管理员</span>\n                <span v-else-if=\"user.is_department_manager\" class=\"role-tag role-manager\">部门主管</span>\n                <span v-else class=\"role-tag role-user\">员工</span>\n              </td>\n              <td class=\"action-buttons\">\n                <button class=\"btn-edit\" @click=\"openUserModal(user)\">编辑</button>\n                <button class=\"btn-delete\" @click=\"confirmDeleteUser(user)\">删除</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </el-card>\n\n    <!-- 添加/编辑用户模态框 -->\n    <div v-if=\"isModalOpen\" class=\"modal-overlay\">\n      <div class=\"modal-content\">\n        <h3>{{ currentUser.id ? '编辑用户' : '添加用户' }}</h3>\n        <form @submit.prevent=\"saveUser\">\n          <div class=\"form-group\">\n            <label>用户名:</label>\n            <input type=\"text\" v-model=\"currentUser.username\" required />\n          </div>\n           <div class=\"form-group\">\n            <label>姓名:</label>\n            <input type=\"text\" v-model=\"currentUser.name\" />\n          </div>\n          <div class=\"form-group\">\n            <label>邮箱:</label>\n            <input type=\"email\" v-model=\"currentUser.email\" required />\n          </div>\n          <div class=\"form-group\">\n            <label>密码:</label>\n            <input type=\"password\" :placeholder=\"currentUser.id ? '留空则不修改' : ''\" v-model=\"currentUser.password\" :required=\"!currentUser.id\" />\n          </div>\n          <div class=\"form-group\">\n            <label>职位:</label>\n            <input type=\"text\" v-model=\"currentUser.position\" />\n          </div>\n          <div class=\"form-group\">\n            <label>所属公司:</label>\n            <select v-model=\"currentUser.company\" @change=\"onCompanyChange\" required>\n              <option :value=\"null\" disabled>-- 请选择公司 --</option>\n              <option v-for=\"company in companies\" :key=\"company.id\" :value=\"company.id\">\n                {{ company.name }}\n              </option>\n            </select>\n          </div>\n          <div class=\"form-group\" v-if=\"currentUser.company\">\n            <label>所属部门:</label>\n            <select v-model=\"currentUser.department\" :disabled=\"!currentUser.company\">\n              <option :value=\"null\">-- 未分配 --</option>\n              <option v-for=\"dept in companyDepartments\" :key=\"dept.id\" :value=\"dept.id\">\n                {{ dept.name }}\n              </option>\n            </select>\n          </div>\n          <div class=\"form-actions\">\n            <button type=\"submit\" class=\"btn-primary\">保存</button>\n            <button type=\"button\" @click=\"closeUserModal\" class=\"btn-secondary\">取消</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport adminApi from '@/api/admin';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { Search } from '@element-plus/icons-vue';\n\n// Simple debounce function\nfunction debounce(fn, delay) {\n  let timeoutID = null;\n  return function(...args) {\n    clearTimeout(timeoutID);\n    timeoutID = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nexport default {\n  name: 'UserManagement',\n  setup() {\n    const users = ref([]);\n    const companies = ref([]);\n    const companyDepartments = ref([]); // Departments for the currently selected company\n    const searchQuery = ref('');\n    const isModalOpen = ref(false);\n    const currentUser = ref({});\n\n    const fetchUsers = async () => {\n      try {\n        const params = { search: searchQuery.value };\n        const response = await adminApi.getUsers(params);\n        users.value = response.data.results;\n      } catch (error) {\n        console.error(\"获取用户列表失败:\", error);\n      }\n    };\n\n    const debouncedFetchUsers = debounce(fetchUsers, 300);\n\n    const fetchCompanies = async () => {\n        try {\n            const response = await adminApi.getCompanies({ all: 'true' });\n            companies.value = response.data;\n        } catch (error) {\n            console.error(\"获取公司列表失败:\", error);\n        }\n    };\n\n    const fetchDepartmentsForCompany = async (companyId) => {\n      if (!companyId) {\n        companyDepartments.value = [];\n        return;\n      }\n      try {\n        const params = { all: 'true', company_id: companyId };\n        const response = await adminApi.getDepartments(params);\n        companyDepartments.value = response.data;\n      } catch (error) {\n        console.error(`获取公司 ${companyId} 的部门列表失败:`, error);\n        companyDepartments.value = [];\n      }\n    };\n\n    const onCompanyChange = async () => {\n      // Reset department when company changes\n      currentUser.value.department = null;\n      await fetchDepartmentsForCompany(currentUser.value.company);\n    };\n    \n    const openUserModal = async (user = {}) => {\n      await fetchCompanies();\n      currentUser.value = { ...user };\n      companyDepartments.value = []; // Reset departments list\n      if (user.company) {\n        await fetchDepartmentsForCompany(user.company);\n      }\n      if (!user.id) {\n        currentUser.value.password = '';\n      }\n      isModalOpen.value = true;\n    };\n\n    const closeUserModal = () => {\n      isModalOpen.value = false;\n      currentUser.value = {};\n      companyDepartments.value = [];\n    };\n\n    const saveUser = async () => {\n      try {\n        const userData = { ...currentUser.value };\n        \n        // 如果密码字段为空，则从提交数据中删除，以避免后端验证错误\n        if (!userData.password) {\n          delete userData.password;\n        }\n\n        // 如果部门未选择（为null），则从提交数据中删除\n        if (userData.department === null) {\n          delete userData.department;\n        }\n\n        if (userData.id) {\n          await adminApi.updateUser(userData.id, userData);\n        } else {\n          await adminApi.createUser(userData);\n        }\n        closeUserModal();\n        fetchUsers();\n        ElMessage.success('用户保存成功！');\n      } catch (error) {\n        console.error(\"保存用户失败:\", error.response?.data || error.message);\n        const errorMsg = error.response?.data ? JSON.stringify(error.response.data) : '请检查网络或联系技术支持';\n        ElMessage.error(`保存用户失败: ${errorMsg}`);\n      }\n    };\n\n    const confirmDeleteUser = (user) => {\n      ElMessageBox.confirm(\n        `确定要删除用户【${user.name || user.username}】吗？此操作无法撤销。`,\n        '警告',\n        {\n          confirmButtonText: '确定删除',\n          cancelButtonText: '取消',\n          type: 'warning',\n        }\n      ).then(async () => {\n        try {\n          await adminApi.deleteUser(user.id);\n          ElMessage.success('用户删除成功');\n          fetchUsers();\n        } catch (error) {\n          ElMessage.error('删除用户失败');\n          console.error(\"删除用户失败:\", error);\n        }\n      }).catch(() => {\n        ElMessage.info('已取消删除');\n      });\n    };\n\n    onMounted(() => {\n        fetchUsers();\n        fetchCompanies();\n    });\n\n    return {\n      users,\n      companies,\n      companyDepartments,\n      onCompanyChange,\n      searchQuery,\n      isModalOpen,\n      currentUser,\n      fetchUsers,\n      debouncedFetchUsers,\n      openUserModal,\n      closeUserModal,\n      saveUser,\n      confirmDeleteUser,\n      Search,\n    };\n  },\n};\n</script>\n\n<style>\n@import './shared-styles.css';\n\n.management-container {\n  background-color: transparent; /* Overriding for this component */\n  padding: 0;\n  box-shadow: none;\n}\n</style> "]}]}