{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\src\\views\\knowledge\\components\\KnowledgeGraph.vue?vue&type=template&id=996ff1a4&scoped=true","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\src\\views\\knowledge\\components\\KnowledgeGraph.vue","mtime":1754627606600},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1746431202000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\babel.config.js","mtime":1748077811200},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1746431202000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_createVNode","_component_el_card","header","_withCtx","_hoisted_3","_component_el_button","type","icon","$setup","isCollapsed","Expand","Fold","onClick","toggleCollapse","_hoisted_4","_hoisted_5","_component_el_input","searchQuery","$event","placeholder","clearable","Search","onInput","handleSearch","_hoisted_6","_component_el_select","selectedTypes","multiple","style","onChange","handleTypeFilter","_Fragment","_renderList","entityTypes","_createBlock","_component_el_option","key","label","value","_hoisted_7","layoutType","handleLayoutChange","_hoisted_8","_hoisted_9","Refresh","resetGraph","_component_el_icon","Download","exportGraph","_hoisted_10","_hoisted_11","_hoisted_12","FullScreen","toggleFullscreen","_cache","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","categories","category","name","_normalizeStyle","backgroundColor","color","_hoisted_17","_toDisplayString","loading","_hoisted_18","graphData","nodes","length","_hoisted_19","_hoisted_20","_component_el_drawer","showEntityDetail","title","size","direction","selectedEntity","_hoisted_21","_hoisted_22","getEntityColor","_hoisted_23","_component_el_tag","getEntityTagType","getChineseType","_hoisted_24","_component_el_descriptions","column","border","_component_el_descriptions_item","id","_hoisted_25","description","symbolSize","_hoisted_26","entityRelationships","_hoisted_27","_hoisted_28","rel","highlightRelationship","_hoisted_30","_hoisted_31","_hoisted_32","targetName","sourceName","_hoisted_33","relation"],"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\o\\smart-office\\frontend\\src\\views\\knowledge\\components\\KnowledgeGraph.vue"],"sourcesContent":["<template>\n  <div class=\"knowledge-graph-container\">\n    <!-- 控制面板 -->\n    <div class=\"control-panel\">\n      <el-card class=\"control-card\">\n        <template #header>\n          <div class=\"card-header\">\n            <span>图谱控制</span>\n            <el-button \n              type=\"text\" \n              :icon=\"isCollapsed ? Expand : Fold\" \n              @click=\"toggleCollapse\"\n            />\n          </div>\n        </template>\n        \n        <div v-show=\"!isCollapsed\" class=\"control-content\">\n          <!-- 搜索功能 -->\n          <div class=\"control-section\">\n            <h6>搜索实体</h6>\n            <el-input \n              v-model=\"searchQuery\" \n              placeholder=\"搜索实体名称...\"\n              clearable\n              :prefix-icon=\"Search\"\n              @input=\"handleSearch\"\n            />\n          </div>\n          \n          <!-- 实体类型筛选 -->\n          <div class=\"control-section\">\n            <h6>实体类型</h6>\n            <el-select \n              v-model=\"selectedTypes\" \n              multiple \n              placeholder=\"选择实体类型\"\n              style=\"width: 100%\"\n              @change=\"handleTypeFilter\"\n            >\n              <el-option \n                v-for=\"type in entityTypes\" \n                :key=\"type\" \n                :label=\"type\" \n                :value=\"type\"\n              />\n            </el-select>\n          </div>\n          \n          <!-- 布局控制 -->\n          <div class=\"control-section\">\n            <h6>布局算法</h6>\n            <el-select \n              v-model=\"layoutType\" \n              placeholder=\"选择布局\"\n              style=\"width: 100%\"\n              @change=\"handleLayoutChange\"\n            >\n              <el-option label=\"圆形布局\" value=\"circular\" />\n              <el-option label=\"力导向布局\" value=\"force\" />\n            </el-select>\n          </div>\n          \n          <!-- 操作按钮 -->\n          <div class=\"control-section\">\n            <div class=\"action-buttons\">\n              <el-button \n                class=\"action-btn\" \n                type=\"primary\" \n                :icon=\"Refresh\" \n                @click=\"resetGraph\"\n              >\n                <el-icon><Refresh /></el-icon> 重置视图\n              </el-button>\n              <el-button \n                class=\"action-btn\" \n                type=\"success\" \n                :icon=\"Download\" \n                @click=\"exportGraph\"\n              >\n                <el-icon><Download /></el-icon> 导出图片\n              </el-button>\n            </div>\n          </div>\n        </div>\n      </el-card>\n      \n\n    </div>\n    \n    <!-- 图谱展示区域 -->\n    <div class=\"graph-container\">\n      <div class=\"graph-header\">\n        <div class=\"header-left\">\n          <h3>企业知识图谱</h3>\n        </div>\n        <div class=\"header-center\">\n          <!-- 移除文档管理和知识图谱按钮 -->\n        </div>\n        <div class=\"header-right\">\n          <el-button type=\"text\" :icon=\"FullScreen\" @click=\"toggleFullscreen\">全屏</el-button>\n        </div>\n      </div>\n      \n      <div class=\"graph-content\">\n        <div \n          ref=\"chartRef\" \n          class=\"chart-canvas\"\n        ></div>\n        \n        <!-- 图例说明 - 移到右侧 -->\n        <div class=\"legend-panel\">\n          <el-card class=\"legend-card-right\">\n            <template #header>\n              <span>图例说明</span>\n            </template>\n            <div class=\"legend-content\">\n              <div v-for=\"category in categories\" :key=\"category.name\" class=\"legend-item\">\n                <div class=\"legend-color\" :style=\"{backgroundColor: category.color}\"></div>\n                <span class=\"legend-label\">{{ category.name }}</span>\n              </div>\n            </div>\n          </el-card>\n        </div>\n      </div>\n      \n      <!-- 独立的loading遮罩，不影响chart-canvas尺寸 -->\n      <div v-if=\"loading\" class=\"loading-overlay\">\n        <el-icon class=\"loading-icon\"><Loading /></el-icon>\n        <span>正在加载知识图谱...</span>\n      </div>\n      \n      <div v-if=\"!loading && graphData.nodes.length === 0\" class=\"empty-state\">\n        <div class=\"empty-icon\">\n          <el-icon><DataAnalysis /></el-icon>\n        </div>\n        <h3>暂无知识图谱数据</h3>\n        <p>请先构建知识库以生成图谱数据</p>\n      </div>\n    </div>\n    \n    <!-- 实体详情抽屉 -->\n    <el-drawer \n      v-model=\"showEntityDetail\" \n      title=\"实体详情\" \n      size=\"400px\"\n      direction=\"rtl\"\n    >\n      <div v-if=\"selectedEntity\" class=\"entity-detail\">\n        <div class=\"entity-header\">\n          <div class=\"entity-icon\" :style=\"{backgroundColor: getEntityColor(selectedEntity.type)}\">\n            <el-icon><DataAnalysis /></el-icon>\n          </div>\n          <div class=\"entity-info\">\n            <h4>{{ selectedEntity.name }}</h4>\n            <el-tag :type=\"getEntityTagType(selectedEntity.type)\">{{ getChineseType(selectedEntity.type) }}</el-tag>\n          </div>\n        </div>\n        \n        <div class=\"entity-content\">\n          <el-descriptions :column=\"1\" border>\n            <el-descriptions-item label=\"实体ID\">{{ selectedEntity.id }}</el-descriptions-item>\n            <el-descriptions-item label=\"类型\">{{ getChineseType(selectedEntity.type) }}</el-descriptions-item>\n            <el-descriptions-item label=\"描述\">\n              <div class=\"description-text\">{{ selectedEntity.description || '暂无描述' }}</div>\n            </el-descriptions-item>\n            <el-descriptions-item label=\"度数\">{{ selectedEntity.symbolSize || 0 }}</el-descriptions-item>\n          </el-descriptions>\n          \n          <div class=\"relationships-section\">\n            <h5>关联关系</h5>\n            <div v-if=\"entityRelationships.length === 0\" class=\"no-relationships\">\n              暂无关联关系\n            </div>\n            <div v-else class=\"relationships-list\">\n              <div \n                v-for=\"rel in entityRelationships\" \n                :key=\"rel.id\" \n                class=\"relationship-item\"\n                @click=\"highlightRelationship(rel)\"\n              >\n                <div class=\"relationship-info\">\n                  <span class=\"relationship-target\">\n                    <span class=\"relationship-direction\">{{ rel.direction === 'outgoing' ? '→' : '←' }}</span>\n                    {{ rel.direction === 'outgoing' ? rel.targetName : rel.sourceName }}\n                  </span>\n                  <span class=\"relationship-type\">{{ rel.relation }}</span>\n                </div>\n                <el-icon class=\"relationship-arrow\"><ArrowRight /></el-icon>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </el-drawer>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, computed, onMounted, onUnmounted, nextTick } from 'vue'\nimport * as echarts from 'echarts'\nimport { \n  Search, \n  Refresh, \n  Download,\n  FullScreen, \n  DataAnalysis,\n  Expand,\n  Fold,\n  ArrowRight,\n  Loading\n} from '@element-plus/icons-vue'\nimport { ElMessage } from 'element-plus'\nimport { getKnowledgeGraphData, getEntityDetail } from '@/api/knowledge'\n\n// 响应式数据\nconst chartRef = ref(null)\nconst chart = ref(null)\nconst loading = ref(false)\nconst isCollapsed = ref(false)\nconst showEntityDetail = ref(false)\nconst selectedEntity = ref(null)\nconst searchQuery = ref('')\nconst selectedTypes = ref([])\nconst layoutType = ref('circular')\nconst showLabels = ref(true)\n\n// 图谱数据\nconst graphData = reactive({\n  nodes: [],\n  edges: [],\n  categories: []\n})\n\nconst entityTypes = ref([])\nconst entityRelationships = ref([])\n\n// 事件处理函数\nlet handleResize = null\nlet handleFullscreenChange = null\n\n// 计算属性\nconst categories = computed(() => {\n  return graphData.categories.map(cat => ({\n    name: cat.name,\n    color: cat.color\n  }))\n})\n\n// 方法\nconst toggleCollapse = () => {\n  isCollapsed.value = !isCollapsed.value\n}\n\nconst handleSearch = () => {\n  if (!searchQuery.value.trim()) {\n    resetHighlight()\n    return\n  }\n  \n  const searchTerm = searchQuery.value.toLowerCase()\n  const matchedNodes = graphData.nodes.filter(node => \n    node.name.toLowerCase().includes(searchTerm)\n  )\n  \n  if (matchedNodes.length > 0) {\n    highlightNodes(matchedNodes)\n    // 聚焦到第一个匹配的节点\n    if (chart.value) {\n      chart.value.dispatchAction({\n        type: 'focusNodeAdjacency',\n        seriesIndex: 0,\n        dataIndex: graphData.nodes.findIndex(node => node.id === matchedNodes[0].id)\n      })\n    }\n  } else {\n    ElMessage.warning('未找到匹配的实体')\n  }\n}\n\nconst handleTypeFilter = async () => {\n  await updateChart()\n}\n\nconst handleLayoutChange = async () => {\n  console.log('🔄 布局类型改变:', layoutType.value)\n  \n  // 如果切换到力导向布局，清除所有节点的固定位置\n  if (layoutType.value === 'force') {\n    console.log('🎯 切换到力导向布局，清除节点固定位置')\n    graphData.nodes.forEach(node => {\n      // 移除可能存在的固定位置属性\n      delete node.fixed\n      delete node.x\n      delete node.y\n    })\n  }\n  \n  // 强制重新渲染图表\n  if (chart.value && !chart.value.isDisposed()) {\n    chart.value.clear() // 清除当前图表内容\n  }\n  \n  await updateChart()\n}\n\nconst resetGraph = () => {\n  searchQuery.value = ''\n  selectedTypes.value = []\n  resetHighlight()\n  if (chart.value) {\n    chart.value.dispatchAction({\n      type: 'restore'\n    })\n  }\n}\n\nconst exportGraph = () => {\n  if (chart.value) {\n    const url = chart.value.getDataURL({\n      type: 'png',\n      pixelRatio: 2,\n      backgroundColor: '#fff'\n    })\n    \n    const link = document.createElement('a')\n    link.href = url\n    link.download = '知识图谱.png'\n    link.click()\n    \n    ElMessage.success('图谱导出成功')\n  }\n}\n\nconst toggleFullscreen = async () => {\n  const container = chartRef.value.parentElement\n  try {\n    if (document.fullscreenElement) {\n      await document.exitFullscreen()\n    } else {\n      await container.requestFullscreen()\n    }\n    // 等待全屏状态改变后重新调整图表大小\n    setTimeout(() => {\n      if (chart.value && !chart.value.isDisposed()) {\n        chart.value.resize()\n      }\n    }, 100)\n  } catch (error) {\n    console.error('全屏操作失败:', error)\n    ElMessage.error('全屏操作失败')\n  }\n}\n\nconst getEntityColor = (type) => {\n  const category = graphData.categories.find(cat => cat.name === type)\n  return category ? category.color : '#409EFF'\n}\n\nconst getEntityTagType = (type) => {\n  const typeMap = {\n    'ORGANIZATION': 'primary',\n    'PERSON': 'success',\n    'LOCATION': 'warning',\n    'EVENT': 'danger',\n    '组织': 'primary',\n    '人员': 'success',\n    '地点': 'warning',\n    '事件': 'danger'\n  }\n  return typeMap[type] || 'info'\n}\n\n// 英文类型转中文映射\nconst getChineseType = (englishType) => {\n  const typeMap = {\n    'ORGANIZATION': '组织',\n    'PERSON': '人员',\n    'LOCATION': '地点',\n    'EVENT': '事件'\n  }\n  return typeMap[englishType] || englishType\n}\n\n// 优化圆形布局，确保节点不溢出容器\nconst optimizeCircularLayout = (nodes, containerWidth, containerHeight) => {\n  if (!nodes || nodes.length === 0) return nodes\n  \n  const centerX = containerWidth / 2\n  const centerY = containerHeight / 2\n  const maxRadius = Math.min(containerWidth, containerHeight) / 2 - 80 // 留出边距\n  \n  // 根据节点数量动态调整半径\n  const nodeCount = nodes.length\n  let radius = maxRadius\n  \n  if (nodeCount > 20) {\n    radius = maxRadius * 0.8 // 节点多时缩小半径\n  } else if (nodeCount > 10) {\n    radius = maxRadius * 0.9\n  }\n  \n  // 为每个节点计算位置\n  return nodes.map((node, index) => {\n    const angle = (2 * Math.PI * index) / nodeCount\n    const x = centerX + radius * Math.cos(angle)\n    const y = centerY + radius * Math.sin(angle)\n    \n    return {\n      ...node,\n      x: Math.max(50, Math.min(containerWidth - 50, x)),\n      y: Math.max(50, Math.min(containerHeight - 50, y))\n    }\n  })\n}\n\nconst highlightNodes = (nodes) => {\n  if (!chart.value) return\n  \n  const nodeIds = nodes.map(node => node.id)\n  chart.value.dispatchAction({\n    type: 'highlight',\n    seriesIndex: 0,\n    dataIndex: graphData.nodes.map((node, index) => \n      nodeIds.includes(node.id) ? index : null\n    ).filter(index => index !== null)\n  })\n}\n\nconst resetHighlight = () => {\n  if (!chart.value) return\n  \n  chart.value.dispatchAction({\n    type: 'downplay',\n    seriesIndex: 0\n  })\n}\n\nconst highlightRelationship = (relationship) => {\n  // 高亮显示特定关系\n  if (!chart.value) return\n  \n  const sourceIndex = graphData.nodes.findIndex(node => node.id === selectedEntity.value.id)\n  const targetIndex = graphData.nodes.findIndex(node => node.name === relationship.targetName)\n  \n  if (sourceIndex !== -1 && targetIndex !== -1) {\n    chart.value.dispatchAction({\n      type: 'highlight',\n      seriesIndex: 0,\n      dataIndex: [sourceIndex, targetIndex]\n    })\n  }\n}\n\nconst initChart = async (retryCount = 0) => {\n  console.log(`🎯 开始初始化图表... (尝试次数: ${retryCount + 1})`)\n  \n  // 详细检查DOM元素状态\n  console.log('🔍 DOM元素状态检查:', {\n    chartRefExists: !!chartRef.value,\n    chartRefValue: !!chartRef.value,\n    chartRefType: typeof chartRef.value,\n    documentReady: document.readyState\n  })\n  \n  // 检查DOM元素是否存在\n  let targetElement = chartRef.value\n  \n  if (!targetElement) {\n    console.warn('⚠️ chartRef.value 为空，尝试备用方案')\n    \n    // 备用方案：直接通过class选择器获取元素\n    targetElement = document.querySelector('.chart-canvas')\n    console.log('🔍 备用方案查找结果:', {\n      foundByClass: !!targetElement,\n      elementType: targetElement ? targetElement.tagName : 'N/A'\n    })\n    \n    if (!targetElement) {\n      if (retryCount < 10) {\n        console.log(`🔄 等待DOM元素就绪，第${retryCount + 1}次重试...`)\n        await new Promise(resolve => setTimeout(resolve, 200))\n        return initChart(retryCount + 1)\n      } else {\n        console.error('❌ 达到最大重试次数，DOM元素仍然不存在')\n        console.error('🔍 最终状态检查:', {\n          allChartCanvas: document.querySelectorAll('.chart-canvas').length,\n          bodyChildren: document.body.children.length,\n          documentReady: document.readyState\n        })\n        throw new Error('DOM元素初始化失败')\n      }\n    } else {\n      // 如果通过class找到了元素，更新chartRef\n      chartRef.value = targetElement\n      console.log('✅ 通过备用方案找到DOM元素')\n    }\n  }\n  \n  // 强制触发重排，确保DOM完全渲染\n  targetElement.offsetHeight\n  await new Promise(resolve => setTimeout(resolve, 50))\n  \n  // 检查DOM元素是否可见和有尺寸\n  const rect = targetElement.getBoundingClientRect()\n  const computedStyle = window.getComputedStyle(targetElement)\n  const parentRect = targetElement.parentElement?.getBoundingClientRect()\n  \n  // 放宽可见性检查条件 - 只要元素存在且不是display:none就认为可用\n  const isElementUsable = (\n    computedStyle.display !== 'none' &&\n    computedStyle.visibility !== 'hidden'\n  )\n  const parentVisible = !parentRect || (parentRect.width > 0 && parentRect.height > 0)\n  \n  console.log('📊 DOM元素状态检查:', {\n    width: rect.width,\n    height: rect.height,\n    offsetWidth: targetElement.offsetWidth,\n    offsetHeight: targetElement.offsetHeight,\n    clientWidth: targetElement.clientWidth,\n    clientHeight: targetElement.clientHeight,\n    display: computedStyle.display,\n    visibility: computedStyle.visibility,\n    opacity: computedStyle.opacity,\n    isElementUsable,\n    parentVisible,\n    parentRect: parentRect ? { width: parentRect.width, height: parentRect.height } : null\n  })\n  \n  // 如果元素不可用，等待重试\n  if (!isElementUsable) {\n    if (retryCount < 5) {\n      console.log(`🔄 DOM元素不可用，第${retryCount + 1}次重试...`)\n      await new Promise(resolve => setTimeout(resolve, 200))\n      return initChart(retryCount + 1)\n    } else {\n      console.warn('⚠️ 元素仍不可用，但继续尝试初始化')\n    }\n  }\n  \n  // 最终尺寸确认，优先使用CSS设置的固定尺寸\n  let finalWidth = targetElement.offsetWidth || targetElement.clientWidth || rect.width\n  let finalHeight = targetElement.offsetHeight || targetElement.clientHeight || rect.height\n  \n  // 如果无法获取尺寸，使用CSS中设置的默认值\n  if (!finalWidth || finalWidth < 100) {\n    finalWidth = 800 // 对应CSS中chart-canvas的flex:1计算结果\n  }\n  if (!finalHeight || finalHeight < 100) {\n    finalHeight = 500 // 对应CSS中chart-canvas的固定高度\n  }\n  \n  console.log('📊 目标DOM元素:', targetElement)\n  console.log('📊 最终使用尺寸:', {\n    width: finalWidth,\n    height: finalHeight,\n    offsetWidth: targetElement.offsetWidth,\n    offsetHeight: targetElement.offsetHeight,\n    clientWidth: targetElement.clientWidth,\n    clientHeight: targetElement.clientHeight\n  })\n  \n  // 如果已有实例，先销毁\n  if (chart.value && !chart.value.isDisposed()) {\n    console.log('🗑️ 销毁现有ECharts实例')\n    chart.value.dispose()\n  }\n  \n  console.log('🎨 开始初始化ECharts实例...')\n  // 明确指定ECharts配置，解决高DPI显示器canvas尺寸异常问题\n  chart.value = echarts.init(targetElement, null, {\n    renderer: 'canvas',\n    devicePixelRatio: 1, // 固定为1，避免高DPI自动缩放导致的显示异常\n    width: finalWidth,\n    height: finalHeight\n  })\n  console.log('✅ ECharts 实例已创建:', !!chart.value)\n  console.log('✅ ECharts 实例状态:', {\n    isDisposed: chart.value ? chart.value.isDisposed() : 'N/A',\n    targetElementTag: targetElement.tagName,\n    targetElementClass: targetElement.className\n  })\n  \n  // 确保chartRef指向正确的元素\n  if (chartRef.value !== targetElement) {\n    chartRef.value = targetElement\n    console.log('🔧 已更新chartRef引用')\n  }\n  \n  // 绑定节点点击事件处理函数\n  bindChartEvents()\n  \n  console.log('🎉 图表初始化完成')\n  \n  // 验证图表实例是否正常创建\n  if (!chart.value || chart.value.isDisposed()) {\n    console.error('❌ ECharts实例创建失败或已被销毁')\n    throw new Error('ECharts实例创建失败')\n  }\n  \n  console.log('✅ ECharts实例验证通过，图表初始化成功')\n}\n\n// 绑定图表事件处理函数\nconst bindChartEvents = () => {\n  if (!chart.value || chart.value.isDisposed()) {\n    console.warn('⚠️ 图表实例不存在，无法绑定事件')\n    return\n  }\n  \n  // 清除之前的事件监听器，避免重复绑定\n  chart.value.off('click')\n  chart.value.off('mousedown')\n  chart.value.off('mouseup')\n  \n  // 监听节点点击事件\n  chart.value.on('click', (params) => {\n    console.log('🖱️ 节点被点击:', params)\n    console.log('🔍 点击事件详情:', {\n      dataType: params.dataType,\n      componentType: params.componentType,\n      seriesType: params.seriesType,\n      data: params.data,\n      layoutType: layoutType.value\n    })\n    \n    if (params.dataType === 'node' && params.data) {\n      console.log('✅ 有效的节点点击，准备显示详情')\n      selectedEntity.value = params.data\n      loadEntityRelationships(params.data.id)\n      showEntityDetail.value = true\n      console.log('📋 实体详情已设置:', {\n        selectedEntity: selectedEntity.value,\n        showEntityDetail: showEntityDetail.value\n      })\n    } else {\n       console.log('❌ 无效的节点点击或缺少数据')\n     }\n   })\n  \n  // 监听节点拖拽开始事件\n  chart.value.on('mousedown', (params) => {\n    if (params.dataType === 'node') {\n      console.log('🖱️ 开始拖拽节点:', params.data.name)\n      // 添加拖拽时的视觉反馈\n      chart.value.setOption({\n        series: [{\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 20,\n              shadowColor: 'rgba(64, 158, 255, 0.5)'\n            }\n          }\n        }]\n      })\n    }\n  })\n  \n  // 监听节点拖拽结束事件\n  chart.value.on('mouseup', (params) => {\n    if (params.dataType === 'node') {\n      console.log('🖱️ 结束拖拽节点:', params.data.name)\n      // 检查节点是否超出边界并进行约束\n      const chartInstance = chart.value\n      const option = chartInstance.getOption()\n      const series = option.series[0]\n      \n      // 获取图表容器尺寸\n      const element = chartRef.value\n      if (!element) return\n      \n      const chartWidth = element.offsetWidth\n      const chartHeight = element.offsetHeight\n      const margin = 50 // 边界边距\n      \n      // 约束节点位置在容器范围内\n      if (series.data) {\n        series.data.forEach(node => {\n          if (node.x !== undefined && node.y !== undefined) {\n            node.x = Math.max(margin, Math.min(chartWidth - margin, node.x))\n            node.y = Math.max(margin, Math.min(chartHeight - margin, node.y))\n          }\n        })\n        \n        // 更新图表配置\n        chartInstance.setOption({\n          series: [{\n            data: series.data\n          }]\n        })\n      }\n    }\n  })\n}\n\n// 为力导向布局添加初始位置设置\nconst initializeForceLayoutPositions = (nodes, containerWidth, containerHeight) => {\n  if (!nodes || nodes.length === 0) return nodes\n  \n  const centerX = containerWidth / 2\n  const centerY = containerHeight / 2\n  const radius = Math.min(containerWidth, containerHeight) / 4\n  \n  return nodes.map((node, index) => {\n    // 如果节点没有初始位置，给它一个随机但合理的初始位置\n    if (typeof node.x === 'undefined' || typeof node.y === 'undefined') {\n      const angle = (2 * Math.PI * index) / nodes.length\n      const r = radius * (0.5 + Math.random() * 0.5) // 随机半径，避免所有节点在同一圆上\n      \n      return {\n        ...node,\n        x: centerX + r * Math.cos(angle) + (Math.random() - 0.5) * 50,\n        y: centerY + r * Math.sin(angle) + (Math.random() - 0.5) * 50,\n        // 确保节点有必要的属性\n        id: String(node.id || `node_${index}`), // 确保ID为字符串\n        name: node.name || `节点${index}`,\n        category: node.category !== undefined ? node.category : (node.type || 0),\n        value: node.value || 1,\n        symbolSize: node.symbolSize || 30,\n        // 确保节点有正确的颜色\n        itemStyle: {\n          color: getEntityColor(node.type || 'default'),\n          borderColor: '#fff',\n          borderWidth: 2,\n          shadowBlur: 10,\n          shadowColor: 'rgba(0, 0, 0, 0.3)'\n        }\n      }\n    }\n    \n    return {\n      ...node,\n      // 确保节点有必要的属性\n      id: String(node.id || `node_${index}`), // 确保ID为字符串\n      name: node.name || `节点${index}`,\n      category: node.category !== undefined ? node.category : (node.type || 0),\n      value: node.value || 1,\n      symbolSize: node.symbolSize || 30,\n      // 确保节点有正确的颜色\n      itemStyle: {\n        color: getEntityColor(node.type || 'default'),\n        borderColor: '#fff',\n        borderWidth: 2,\n        shadowBlur: 10,\n        shadowColor: 'rgba(0, 0, 0, 0.3)'\n      }\n    }\n  })\n}\n\nconst updateChart = async () => {\n  console.log('🎨 updateChart 被调用')\n  console.log('📊 当前状态:', {\n    hasChart: !!chart.value,\n    nodesCount: graphData.nodes.length,\n    edgesCount: graphData.edges.length,\n    selectedTypes: selectedTypes.value,\n    layoutType: layoutType.value\n  })\n  \n  // 检查ECharts实例是否存在或已被dispose\n  if (!chart.value || chart.value.isDisposed()) {\n    console.warn('⚠️ ECharts实例不存在或已被dispose，重新初始化图表')\n    console.log('🔧 chartRef.value状态:', !!chartRef.value)\n    await initChart()\n    if (!chart.value) {\n      console.error('❌ 重新初始化图表失败')\n      return\n    }\n    console.log('✅ ECharts实例重新初始化成功')\n  }\n  \n  if (graphData.nodes.length === 0) {\n    console.warn('⚠️ 没有节点数据，无法更新图表')\n    return\n  }\n  \n  // 过滤节点\n  let filteredNodes = [...graphData.nodes] // 创建副本避免修改原数据\n  if (selectedTypes.value.length > 0) {\n    filteredNodes = graphData.nodes.filter(node => \n      selectedTypes.value.includes(node.type)\n    )\n    console.log('🔍 应用类型过滤后的节点数量:', filteredNodes.length)\n  }\n  \n  // 过滤边，确保边的数据格式正确\n  const nodeIds = new Set(filteredNodes.map(node => String(node.id))) // 确保节点ID集合为字符串\n  let filteredEdges = graphData.edges.filter(edge => \n    nodeIds.has(String(edge.source)) && nodeIds.has(String(edge.target)) // 确保类型匹配\n  ).map(edge => ({\n    ...edge,\n    // 确保边有必要的属性，并统一数据类型\n    source: String(edge.source), // 确保source为字符串\n    target: String(edge.target), // 确保target为字符串\n    value: edge.value || edge.weight || 1,\n    lineStyle: {\n      color: edge.color || '#999',\n      width: edge.width || 1\n    }\n  }))\n  \n  console.log('📈 过滤后的数据:', {\n    filteredNodes: filteredNodes.length,\n    filteredEdges: filteredEdges.length\n  })\n  \n  // 详细检查节点ID和边连接的匹配情况\n  if (filteredNodes.length > 0 && filteredEdges.length > 0) {\n    const nodeIdSet = new Set(filteredNodes.map(node => String(node.id)))\n    const unmatchedEdges = filteredEdges.filter(edge => \n      !nodeIdSet.has(String(edge.source)) || !nodeIdSet.has(String(edge.target))\n    )\n    \n    // 进一步过滤，只保留有效的边\n    filteredEdges = filteredEdges.filter(edge => {\n      const sourceExists = nodeIdSet.has(String(edge.source))\n      const targetExists = nodeIdSet.has(String(edge.target))\n      const isValid = sourceExists && targetExists && edge.source !== edge.target\n      \n      if (!isValid) {\n        console.warn('⚠️ 发现无效边:', {\n          source: edge.source,\n          target: edge.target,\n          sourceExists,\n          targetExists,\n          isSelfLoop: edge.source === edge.target\n        })\n      }\n      \n      return isValid\n    })\n    \n    console.log('🔍 节点和边的匹配分析:', {\n      nodeIds: Array.from(nodeIdSet).slice(0, 10),\n      nodeIdTypes: [...new Set(filteredNodes.map(node => typeof node.id))],\n      edgeSourceTargetSample: filteredEdges.slice(0, 5).map(edge => ({\n        source: edge.source,\n        sourceType: typeof edge.source,\n        target: edge.target,\n        targetType: typeof edge.target,\n        sourceExists: nodeIdSet.has(String(edge.source)),\n        targetExists: nodeIdSet.has(String(edge.target))\n      })),\n      unmatchedEdgesCount: unmatchedEdges.length,\n      validEdgesCount: filteredEdges.length,\n      unmatchedEdgesSample: unmatchedEdges.slice(0, 3)\n    })\n  }\n  \n  // 获取容器尺寸\n  const containerWidth = chartRef.value?.offsetWidth || 800\n  const containerHeight = chartRef.value?.offsetHeight || 600\n  \n  // 根据布局类型处理节点位置\n  if (layoutType.value === 'circular') {\n    filteredNodes = optimizeCircularLayout(filteredNodes, containerWidth, containerHeight)\n    console.log('🎯 已优化圆形布局，容器尺寸:', { containerWidth, containerHeight })\n  } else if (layoutType.value === 'force') {\n    // 为力导向布局初始化节点位置\n    filteredNodes = initializeForceLayoutPositions(filteredNodes, containerWidth, containerHeight)\n    console.log('🎯 已初始化力导向布局节点位置，容器尺寸:', { containerWidth, containerHeight })\n    console.log('🔍 力导向节点示例:', filteredNodes.slice(0, 3))\n  }\n  \n  const option = {\n    title: {\n      text: '企业知识图谱',\n      left: 'center',\n      textStyle: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        color: '#303133'\n      }\n    },\n    tooltip: {\n      trigger: 'item',\n      formatter: function(params) {\n        if (params.dataType === 'node') {\n          return `\n            <div style=\"padding: 6px 12px; max-width: 300px; word-wrap: break-word;\">\n              <strong style=\"color: #303133;\">${params.data.name}</strong><br/>\n              <span style=\"color: #606266;\">类型: ${getChineseType(params.data.type)}</span><br/>\n              <span style=\"color: #909399;\">${params.data.description || '暂无描述'}</span>\n            </div>\n          `\n        } else if (params.dataType === 'edge') {\n          return `\n            <div style=\"padding: 6px 12px; max-width: 300px; word-wrap: break-word;\">\n              <strong style=\"color: #303133;\">${params.data.source} → ${params.data.target}</strong><br/>\n              <span style=\"color: #606266;\">关系: ${params.data.relation}</span><br/>\n              <span style=\"color: #909399;\">权重: ${params.data.weight}</span>\n            </div>\n          `\n        }\n      },\n      backgroundColor: 'rgba(255, 255, 255, 0.95)',\n      borderColor: '#e4e7ed',\n      borderWidth: 1,\n      textStyle: {\n        fontSize: 12\n      },\n      extraCssText: 'max-width: 300px; max-height: 120px; overflow: hidden; white-space: normal; word-wrap: break-word; line-height: 1.4;'\n    },\n    legend: {\n      show: false\n    },\n    series: [{\n      type: 'graph',\n      layout: layoutType.value,\n      data: filteredNodes,\n      links: filteredEdges,\n      categories: graphData.categories,\n      roam: true,\n      draggable: true, // 启用节点拖拽\n      // 添加边的符号配置，确保连接到节点边缘\n      edgeSymbol: layoutType.value === 'force' ? ['none', 'arrow'] : ['none', 'none'],\n      edgeSymbolSize: layoutType.value === 'force' ? [0, 8] : [0, 0],\n      // 确保边连接到节点边缘而不是中心\n      autoCurveness: true,\n      label: {\n        show: showLabels.value,\n        position: 'inside', // 改为内部显示，避免溢出\n        formatter: function(params) {\n          // 只显示实体名称，不显示任何数字\n          const name = params.data.name || params.name\n          // 过滤掉纯数字内容，只保留文本\n          if (typeof name === 'string' && !/^\\d+$/.test(name.trim())) {\n            return name.length > 8 ? name.substring(0, 8) + '...' : name\n          }\n          return '' // 如果是纯数字则不显示\n        },\n        fontSize: 11,\n        color: '#303133',\n        fontWeight: 'bold',\n        textBorderColor: '#fff',\n        textBorderWidth: 1\n      },\n      edgeLabel: {\n        show: false, // 隐藏边标签，避免显示数字\n        formatter: function(params) {\n          // 只显示关系名称，不显示权重等数字\n          return params.data.relation || ''\n        },\n        fontSize: 10,\n        color: '#909399'\n      },\n      labelLayout: {\n        hideOverlap: true,\n        moveOverlap: 'shiftY' // 自动调整重叠标签位置\n      },\n      scaleLimit: {\n        min: 0.3,\n        max: 3\n      },\n      ...(layoutType.value === 'force' ? {\n        force: {\n          // 适中的节点间斥力，防止节点重叠但不过度分散\n          repulsion: [200, 600],\n          // 适中的重力，保持图形聚合\n          gravity: 0.15,\n          // 适中的边长，确保连接清晰可见\n          edgeLength: [50, 100],\n          // 关闭持续动画，避免线条持续移动\n          layoutAnimation: false,\n          // 增加摩擦力，让布局更快稳定\n          friction: 0.95,\n          // 设置初始温度，控制布局收敛速度\n          initLayout: 'circular',\n          // 添加边的连接配置\n          edgeSymbol: ['none', 'arrow'], // 添加箭头指示方向\n          edgeSymbolSize: [0, 8] // 箭头大小\n        }\n      } : {}),\n      ...(layoutType.value === 'circular' ? {\n        circular: {\n          rotateLabel: false, // 关闭标签旋转，保持水平\n          radius: 180 // 设置圆形布局半径，避免溢出\n        }\n      } : {}),\n      lineStyle: {\n        color: 'source',\n        curveness: layoutType.value === 'force' ? 0.1 : 0.1, // 减少弯曲度，让连线更直\n        opacity: 0.8,\n        width: layoutType.value === 'force' ? 2 : 1, // 增加线条宽度，更明显\n        type: 'solid', // 确保线条为实线\n        cap: 'round', // 圆形端点\n        join: 'round' // 圆形连接点\n      },\n      emphasis: {\n        focus: 'adjacency',\n        lineStyle: {\n          width: 3\n        },\n        label: {\n          show: true,\n          formatter: '{b}', // 悬停时显示完整名称\n          fontSize: 12,\n          fontWeight: 'bold'\n        }\n      },\n      // 节点样式现在在每个节点的itemStyle中单独设置\n      // 设置节点大小\n      symbolSize: function(value, params) {\n        if (layoutType.value === 'force') {\n          // 力导向布局使用更大的节点，增强视觉效果\n          return Math.min(Math.max(25, (params.data.value || 1) * 12), 60)\n        }\n        return Math.min(Math.max(20, (params.data.value || 1) * 10), 50)\n      }\n    }]\n  }\n  \n  console.log(' 设置图表配置:', {\n    title: option.title.text,\n    seriesDataLength: option.series[0].data.length,\n    seriesLinksLength: option.series[0].links.length,\n    layoutType: option.series[0].layout,\n    hasForceConfig: !!option.series[0].force,\n    forceConfig: option.series[0].force\n  })\n  \n  // 设置图表配置\n  chart.value.setOption(option, true)\n  \n  // 重新绑定事件处理函数，确保布局切换后点击事件仍然有效\n  bindChartEvents()\n  \n  // 力导向布局已设置为静态模式，无需动画监控\n  if (layoutType.value === 'force') {\n    console.log('🎯 力导向布局已设置为静态模式，布局将在初始化后保持稳定')\n  }\n  \n  console.log('✅ 图表配置已设置完成，事件已重新绑定')\n  console.log('📊 当前图表状态:', {\n    isDisposed: chart.value.isDisposed(),\n    hasData: option.series[0].data.length > 0,\n    layoutType: layoutType.value\n  })\n}\n\nconst loadGraphData = async () => {\n  loading.value = true\n  console.log('🚀 开始加载知识图谱数据...')\n  \n  try {\n    console.log('📡 调用API: getKnowledgeGraphData')\n    const response = await getKnowledgeGraphData({\n      node_limit: 100\n    })\n    \n    console.log('✅ API响应成功:', response)\n    console.log('📊 响应数据结构:', {\n      hasNodes: !!response.nodes,\n      nodesCount: response.nodes ? response.nodes.length : 0,\n      hasEdges: !!response.edges,\n      edgesCount: response.edges ? response.edges.length : 0,\n      hasCategories: !!response.categories,\n      categoriesCount: response.categories ? response.categories.length : 0,\n      responseKeys: Object.keys(response),\n      responseType: typeof response\n    })\n    \n    // 详细检查响应数据\n    console.log('🔍 API响应原始数据:', JSON.stringify(response, null, 2))\n    \n    // 检查数据赋值前的状态\n    console.log('📋 赋值前graphData状态:', {\n      nodesBefore: graphData.nodes.length,\n      edgesBefore: graphData.edges.length,\n      categoriesBefore: graphData.categories.length\n    })\n    \n    // 修复数据解析：API返回的数据在data字段中\n    const responseData = response.data || response\n    \n    // 确保数据类型一致性：统一转换为字符串类型\n    const rawNodes = responseData.nodes || []\n    const rawEdges = responseData.edges || []\n    \n    // 处理节点数据，确保ID为字符串类型并设置正确的category\n    graphData.nodes = rawNodes.map((node, index) => {\n      // 找到对应的category索引\n      const categoryIndex = responseData.categories ? \n        responseData.categories.findIndex(cat => cat.name === node.type) : -1\n      \n      return {\n        ...node,\n        id: String(node.id), // 使用后端返回的正确ID\n        name: node.name || `节点${index}`,\n        type: node.type || 'default',\n        category: categoryIndex >= 0 ? categoryIndex : 0, // 设置正确的category索引\n        value: node.value || 1,\n        // 设置节点颜色，使用getEntityColor函数获取颜色\n        itemStyle: {\n          color: getEntityColor(node.type || 'default')\n        }\n      }\n    })\n    \n    // 处理边数据，确保source和target为字符串类型\n    graphData.edges = rawEdges.map((edge) => ({\n      ...edge,\n      source: String(edge.source || ''), // 确保source为字符串\n      target: String(edge.target || ''), // 确保target为字符串\n      value: edge.value || edge.weight || 1,\n      relation: edge.relation || edge.label || '关联'\n    }))\n    \n    graphData.categories = responseData.categories || []\n    \n    // 检查数据赋值后的状态\n    console.log('📈 赋值后graphData状态:', {\n      nodesAfter: graphData.nodes.length,\n      edgesAfter: graphData.edges.length,\n      categoriesAfter: graphData.categories.length,\n      nodesType: typeof graphData.nodes,\n      nodesIsArray: Array.isArray(graphData.nodes)\n    })\n    \n    console.log('📈 处理后的图谱数据:', {\n      nodes: graphData.nodes.length,\n      edges: graphData.edges.length,\n      categories: graphData.categories.length\n    })\n    \n    if (graphData.nodes.length > 0) {\n      console.log('🔍 节点示例:', graphData.nodes.slice(0, 3))\n      // 详细检查节点ID的数据类型\n      console.log('🆔 节点ID数据类型分析:', {\n        firstNodeId: graphData.nodes[0]?.id,\n        firstNodeIdType: typeof graphData.nodes[0]?.id,\n        allNodeIds: graphData.nodes.slice(0, 5).map(node => ({ id: node.id, type: typeof node.id })),\n        nodeIdTypes: [...new Set(graphData.nodes.map(node => typeof node.id))]\n      })\n    }\n    \n    if (graphData.edges.length > 0) {\n      console.log('🔗 边示例:', graphData.edges.slice(0, 3))\n      // 详细检查边的source/target数据类型\n      console.log('🔗 边连接数据类型分析:', {\n        firstEdgeSource: graphData.edges[0]?.source,\n        firstEdgeSourceType: typeof graphData.edges[0]?.source,\n        firstEdgeTarget: graphData.edges[0]?.target,\n        firstEdgeTargetType: typeof graphData.edges[0]?.target,\n        allEdgeConnections: graphData.edges.slice(0, 5).map(edge => ({\n          source: edge.source,\n          sourceType: typeof edge.source,\n          target: edge.target,\n          targetType: typeof edge.target\n        })),\n        edgeSourceTypes: [...new Set(graphData.edges.map(edge => typeof edge.source))],\n        edgeTargetTypes: [...new Set(graphData.edges.map(edge => typeof edge.target))]\n      })\n    }\n    \n    // 提取实体类型\n    entityTypes.value = [...new Set(graphData.nodes.map(node => node.type))]\n    console.log('🏷️ 实体类型:', entityTypes.value)\n    \n    // 数据加载完成后，直接更新图表\n    console.log('🎨 开始更新图表...')\n    await updateChart()\n  } catch (error) {\n    console.error('❌ 加载知识图谱数据失败:', error)\n    console.error('❌ 错误详情:', {\n      message: error.message,\n      status: error.response?.status,\n      statusText: error.response?.statusText,\n      data: error.response?.data\n    })\n    ElMessage.error(`加载知识图谱数据失败: ${error.message}`)\n  } finally {\n    loading.value = false\n    console.log('🏁 数据加载完成')\n  }\n}\n\nconst loadEntityRelationships = async (entityId) => {\n  try {\n    console.log('🔍 开始加载实体关系，entityId:', entityId)\n    const response = await getEntityDetail(entityId)\n    console.log('📊 API响应完整数据:', JSON.stringify(response, null, 2))\n    console.log('🔗 关系数据详情:', {\n      hasRelationships: !!response.data.relationships,\n      relationshipsType: typeof response.data.relationships,\n      relationshipsLength: response.data.relationships ? response.data.relationships.length : 0,\n      relationshipsContent: response.data.relationships\n    })\n    \n    const relationships = response.data.relationships || []\n    console.log('📋 准备赋值的关系数据:', relationships)\n    entityRelationships.value = relationships\n    console.log('✅ 关系数据已赋值，entityRelationships.value:', entityRelationships.value)\n    console.log('📈 最终状态检查:', {\n      entityRelationshipsLength: entityRelationships.value.length,\n      entityRelationshipsContent: entityRelationships.value\n    })\n  } catch (error) {\n    console.error('❌ 加载实体关系失败:', error)\n    console.error('❌ 错误详情:', {\n      message: error.message,\n      stack: error.stack,\n      response: error.response\n    })\n    entityRelationships.value = []\n  }\n}\n\n// 生命周期\nonMounted(() => {\n  console.log('🚀 组件已挂载，等待DOM渲染完成...')\n  \n  // 设置事件监听器\n  handleResize = () => {\n    if (chart.value && !chart.value.isDisposed()) {\n      chart.value.resize()\n    }\n  }\n  \n  handleFullscreenChange = () => {\n    setTimeout(() => {\n      if (chart.value && !chart.value.isDisposed()) {\n        chart.value.resize()\n      }\n    }, 100)\n  }\n  \n  window.addEventListener('resize', handleResize)\n  document.addEventListener('fullscreenchange', handleFullscreenChange)\n  \n  // 使用多重延迟确保DOM完全渲染\n  nextTick(() => {\n    setTimeout(async () => {\n      try {\n        console.log('✅ DOM渲染完成，开始初始化图表')\n        // 先初始化图表，此时loading为false，确保DOM元素有正确尺寸\n        await initChart()\n        console.log('✅ 图表初始化完成，开始加载数据')\n        // 图表初始化完成后再加载数据，此时可以安全地显示loading\n        await loadGraphData()\n      } catch (error) {\n        console.error('❌ 组件初始化失败:', error)\n        ElMessage.error(`图表初始化失败: ${error.message}`)\n        \n        // 如果初始化失败，尝试重新初始化\n        setTimeout(async () => {\n          try {\n            console.log('🔄 尝试重新初始化图表...')\n            await initChart()\n            await loadGraphData()\n          } catch (retryError) {\n            console.error('❌ 重新初始化也失败:', retryError)\n          }\n        }, 1000)\n      }\n    }, 100) // 额外延迟100ms确保DOM完全渲染\n  })\n})\n\nonUnmounted(() => {\n  if (chart.value) {\n    chart.value.dispose()\n  }\n  // 清理事件监听器\n  if (handleResize) {\n    window.removeEventListener('resize', handleResize)\n  }\n  if (handleFullscreenChange) {\n    document.removeEventListener('fullscreenchange', handleFullscreenChange)\n  }\n})\n\n// 暴露方法给父组件\ndefineExpose({\n  refresh: loadGraphData\n})\n</script>\n\n<style scoped>\n.knowledge-graph-container {\n  display: flex;\n  height: 600px;\n  gap: 20px;\n}\n\n.control-panel {\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.control-card {\n  flex-shrink: 0;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.control-content {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.control-section h6 {\n  margin: 0 0 8px 0;\n  font-weight: 600;\n  color: #303133;\n  font-size: 14px;\n}\n\n.action-buttons {\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n}\n\n.action-btn {\n  flex: 1;\n  justify-content: center;\n}\n\n\n\n.graph-container {\n  flex: 1;\n  height: 100%; /* 确保有明确的高度 */\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border-radius: 8px;\n  border: 1px solid #e4e7ed;\n  position: relative; /* 为loading-overlay提供定位基准 */\n}\n\n.graph-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e4e7ed;\n}\n\n.header-left h3 {\n  margin: 0;\n  color: #303133;\n  font-weight: 600;\n}\n\n.header-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.header-right {\n  display: flex;\n  gap: 8px;\n}\n\n.graph-content {\n  display: flex;\n  flex: 1;\n  gap: 16px;\n  padding: 16px;\n}\n\n.chart-canvas {\n  flex: 1;\n  height: 500px; /* 使用固定高度，避免calc()在loading状态下计算为0 */\n  min-height: 400px;\n  overflow: hidden; /* 防止内容溢出 */\n  position: relative;\n  border-radius: 8px;\n  border: 1px solid #e4e7ed;\n  cursor: grab; /* 显示可拖拽光标 */\n  /* 确保元素有明确的尺寸 */\n  box-sizing: border-box;\n  flex-shrink: 0;\n}\n\n.legend-panel {\n  width: 200px;\n  flex-shrink: 0;\n}\n\n.legend-card-right {\n  height: fit-content;\n}\n\n.legend-content {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.legend-color {\n  width: 12px;\n  height: 12px;\n  border-radius: 2px;\n}\n\n.legend-label {\n  font-size: 12px;\n  color: #606266;\n}\n\n.chart-canvas:active {\n  cursor: grabbing; /* 拖拽时的光标 */\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 65px; /* 跳过graph-header的高度 */\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.9);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  border-radius: 0 0 8px 8px;\n}\n\n.loading-icon {\n  font-size: 32px;\n  color: #409eff;\n  margin-bottom: 12px;\n  animation: rotate 2s linear infinite;\n}\n\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.empty-state {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #909399;\n}\n\n.empty-icon {\n  font-size: 64px;\n  margin-bottom: 16px;\n}\n\n.empty-state h3 {\n  margin: 0 0 8px 0;\n  font-weight: 500;\n}\n\n.empty-state p {\n  margin: 0;\n  font-size: 14px;\n}\n\n.entity-detail {\n  padding: 20px;\n}\n\n.entity-header {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  margin-bottom: 24px;\n  padding-bottom: 16px;\n  border-bottom: 1px solid #e4e7ed;\n}\n\n.entity-icon {\n  width: 48px;\n  height: 48px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 24px;\n}\n\n.entity-info h4 {\n  margin: 0 0 8px 0;\n  color: #303133;\n  font-weight: 600;\n}\n\n.entity-content {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.description-text {\n  line-height: 1.5;\n  color: #606266;\n}\n\n.relationships-section h5 {\n  margin: 0 0 12px 0;\n  color: #303133;\n  font-weight: 600;\n}\n\n.no-relationships {\n  color: #909399;\n  font-size: 14px;\n  text-align: center;\n  padding: 20px;\n}\n\n.relationships-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.relationship-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px;\n  border: 1px solid #e4e7ed;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.relationship-item:hover {\n  background-color: #f5f7fa;\n  border-color: #409eff;\n}\n\n.relationship-info {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.relationship-target {\n  font-weight: 500;\n  color: #303133;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.relationship-direction {\n  font-size: 14px;\n  color: #409eff;\n  font-weight: bold;\n}\n\n.relationship-type {\n  font-size: 12px;\n  color: #909399;\n}\n\n.relationship-arrow {\n  color: #409eff;\n}\n\n/* 响应式设计 */\n@media (max-width: 1200px) {\n  .knowledge-graph-container {\n    flex-direction: column;\n    height: auto;\n  }\n  \n  .control-panel {\n    width: 100%;\n    flex-direction: row;\n    overflow-x: auto;\n  }\n  \n  .control-card {\n    min-width: 250px;\n  }\n  \n  .graph-container {\n    height: 500px;\n  }\n  \n  .graph-content {\n    flex-direction: column;\n  }\n  \n  .legend-panel {\n    width: 100%;\n    order: -1;\n  }\n  \n  .chart-canvas {\n    height: 400px;\n  }\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAA2B;;EAE/BA,KAAK,EAAC;AAAe;;EAGfA,KAAK,EAAC;AAAa;;EAUCA,KAAK,EAAC;AAAiB;;EAE3CA,KAAK,EAAC;AAAiB;;EAYvBA,KAAK,EAAC;AAAiB;;EAmBvBA,KAAK,EAAC;AAAiB;;EAcvBA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAgB;;EA0B9BA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAc;;EAOlBA,KAAK,EAAC;AAAc;;EAKtBA,KAAK,EAAC;AAAe;;EAEtBC,GAAG,EAAC,UAAU;EACdD,KAAK,EAAC;;;EAIHA,KAAK,EAAC;AAAc;;EAKhBA,KAAK,EAAC;AAAgB;;EAGjBA,KAAK,EAAC;AAAc;;;EAQhBA,KAAK,EAAC;;;;EAK2BA,KAAK,EAAC;;;EACpDA,KAAK,EAAC;AAAY;;;EAeEA,KAAK,EAAC;;;EAC1BA,KAAK,EAAC;AAAe;;EAInBA,KAAK,EAAC;AAAa;;EAMrBA,KAAK,EAAC;AAAgB;;EAKhBA,KAAK,EAAC;AAAkB;;EAK5BA,KAAK,EAAC;AAAuB;;;EAEaA,KAAK,EAAC;;;;EAGvCA,KAAK,EAAC;;;;EAOTA,KAAK,EAAC;AAAmB;;EACtBA,KAAK,EAAC;AAAqB;;EACzBA,KAAK,EAAC;AAAwB;;EAGhCA,KAAK,EAAC;AAAmB;;;;;;;;;;;;uBAxL/CE,mBAAA,CAiMM,OAjMNC,UAiMM,GAhMJC,mBAAA,UAAa,EACbC,mBAAA,CAoFM,OApFNC,UAoFM,GAnFJC,YAAA,CAgFUC,kBAAA;IAhFDR,KAAK,EAAC;EAAc;IAChBS,MAAM,EAAAC,QAAA,CACf,MAOM,CAPNL,mBAAA,CAOM,OAPNM,UAOM,G,0BANJN,mBAAA,CAAiB,cAAX,MAAI,sBACVE,YAAA,CAIEK,oBAAA;MAHAC,IAAI,EAAC,MAAM;MACVC,IAAI,EAAEC,MAAA,CAAAC,WAAW,GAAGD,MAAA,CAAAE,MAAM,GAAGF,MAAA,CAAAG,IAAI;MACjCC,OAAK,EAAEJ,MAAA,CAAAK;;sBAKd,MAmEM,C,gBAnENf,mBAAA,CAmEM,OAnENgB,UAmEM,GAlEJjB,mBAAA,UAAa,EACbC,mBAAA,CASM,OATNiB,UASM,G,0BARJjB,mBAAA,CAAa,YAAT,MAAI,sBACRE,YAAA,CAMEgB,mBAAA;kBALSR,MAAA,CAAAS,WAAW;iEAAXT,MAAA,CAAAS,WAAW,GAAAC,MAAA;MACpBC,WAAW,EAAC,WAAW;MACvBC,SAAS,EAAT,EAAS;MACR,aAAW,EAAEZ,MAAA,CAAAa,MAAM;MACnBC,OAAK,EAAEd,MAAA,CAAAe;8DAIZ1B,mBAAA,YAAe,EACfC,mBAAA,CAgBM,OAhBN0B,UAgBM,G,0BAfJ1B,mBAAA,CAAa,YAAT,MAAI,sBACRE,YAAA,CAaYyB,oBAAA;kBAZDjB,MAAA,CAAAkB,aAAa;iEAAblB,MAAA,CAAAkB,aAAa,GAAAR,MAAA;MACtBS,QAAQ,EAAR,EAAQ;MACRR,WAAW,EAAC,QAAQ;MACpBS,KAAmB,EAAnB;QAAA;MAAA,CAAmB;MAClBC,QAAM,EAAErB,MAAA,CAAAsB;;wBAGP,MAA2B,E,kBAD7BnC,mBAAA,CAKEoC,SAAA,QAAAC,WAAA,CAJexB,MAAA,CAAAyB,WAAW,EAAnB3B,IAAI;6BADb4B,YAAA,CAKEC,oBAAA;UAHCC,GAAG,EAAE9B,IAAI;UACT+B,KAAK,EAAE/B,IAAI;UACXgC,KAAK,EAAEhC;;;;yCAKdT,mBAAA,UAAa,EACbC,mBAAA,CAWM,OAXNyC,UAWM,G,0BAVJzC,mBAAA,CAAa,YAAT,MAAI,sBACRE,YAAA,CAQYyB,oBAAA;kBAPDjB,MAAA,CAAAgC,UAAU;iEAAVhC,MAAA,CAAAgC,UAAU,GAAAtB,MAAA;MACnBC,WAAW,EAAC,MAAM;MAClBS,KAAmB,EAAnB;QAAA;MAAA,CAAmB;MAClBC,QAAM,EAAErB,MAAA,CAAAiC;;wBAET,MAA2C,CAA3CzC,YAAA,CAA2CmC,oBAAA;QAAhCE,KAAK,EAAC,MAAM;QAACC,KAAK,EAAC;UAC9BtC,YAAA,CAAyCmC,oBAAA;QAA9BE,KAAK,EAAC,OAAO;QAACC,KAAK,EAAC;;;yCAInCzC,mBAAA,UAAa,EACbC,mBAAA,CAmBM,OAnBN4C,UAmBM,GAlBJ5C,mBAAA,CAiBM,OAjBN6C,UAiBM,GAhBJ3C,YAAA,CAOYK,oBAAA;MANVZ,KAAK,EAAC,YAAY;MAClBa,IAAI,EAAC,SAAS;MACbC,IAAI,EAAEC,MAAA,CAAAoC,OAAO;MACbhC,OAAK,EAAEJ,MAAA,CAAAqC;;wBAER,MAA8B,CAA9B7C,YAAA,CAA8B8C,kBAAA;0BAArB,MAAW,CAAX9C,YAAA,CAAWQ,MAAA,a;;qDAAU,QAChC,G;;iCACAR,YAAA,CAOYK,oBAAA;MANVZ,KAAK,EAAC,YAAY;MAClBa,IAAI,EAAC,SAAS;MACbC,IAAI,EAAEC,MAAA,CAAAuC,QAAQ;MACdnC,OAAK,EAAEJ,MAAA,CAAAwC;;wBAER,MAA+B,CAA/BhD,YAAA,CAA+B8C,kBAAA;0BAAtB,MAAY,CAAZ9C,YAAA,CAAYQ,MAAA,c;;qDAAU,QACjC,G;;wEAhEQA,MAAA,CAAAC,WAAW,E;;QAyE7BZ,mBAAA,YAAe,EACfC,mBAAA,CAgDM,OAhDNmD,WAgDM,GA/CJnD,mBAAA,CAUM,OAVNoD,WAUM,G,4BATJpD,mBAAA,CAEM;IAFDL,KAAK,EAAC;EAAa,IACtBK,mBAAA,CAAe,YAAX,QAAM,E,kDAEZA,mBAAA,CAEM;IAFDL,KAAK,EAAC;EAAe,IACxBI,mBAAA,mBAAsB,C,sBAExBC,mBAAA,CAEM,OAFNqD,WAEM,GADJnD,YAAA,CAAkFK,oBAAA;IAAvEC,IAAI,EAAC,MAAM;IAAEC,IAAI,EAAEC,MAAA,CAAA4C,UAAU;IAAGxC,OAAK,EAAEJ,MAAA,CAAA6C;;sBAAkB,MAAEC,MAAA,SAAAA,MAAA,Q,iBAAF,IAAE,E;;mCAI1ExD,mBAAA,CAoBM,OApBNyD,WAoBM,GAnBJzD,mBAAA,CAGO,OAHP0D,WAGO,+BAEP3D,mBAAA,iBAAoB,EACpBC,mBAAA,CAYM,OAZN2D,WAYM,GAXJzD,YAAA,CAUUC,kBAAA;IAVDR,KAAK,EAAC;EAAmB;IACrBS,MAAM,EAAAC,QAAA,CACf,MAAiBmD,MAAA,SAAAA,MAAA,QAAjBxD,mBAAA,CAAiB,cAAX,MAAI,oB;sBAEZ,MAKM,CALNA,mBAAA,CAKM,OALN4D,WAKM,I,kBAJJ/D,mBAAA,CAGMoC,SAAA,QAAAC,WAAA,CAHkBxB,MAAA,CAAAmD,UAAU,EAAtBC,QAAQ;2BAApBjE,mBAAA,CAGM;QAH+ByC,GAAG,EAAEwB,QAAQ,CAACC,IAAI;QAAEpE,KAAK,EAAC;UAC7DK,mBAAA,CAA2E;QAAtEL,KAAK,EAAC,cAAc;QAAEmC,KAAK,EAAAkC,eAAA;UAAAC,eAAA,EAAoBH,QAAQ,CAACI;QAAK;+BAClElE,mBAAA,CAAqD,QAArDmE,WAAqD,EAAAC,gBAAA,CAAvBN,QAAQ,CAACC,IAAI,iB;;;UAOrDhE,mBAAA,oCAAuC,EAC5BW,MAAA,CAAA2D,OAAO,I,cAAlBxE,mBAAA,CAGM,OAHNyE,WAGM,GAFJpE,YAAA,CAAmD8C,kBAAA;IAA1CrD,KAAK,EAAC;EAAc;sBAAC,MAAW,CAAXO,YAAA,CAAWQ,MAAA,a;;kCACzCV,mBAAA,CAAwB,cAAlB,aAAW,qB,yCAGPU,MAAA,CAAA2D,OAAO,IAAI3D,MAAA,CAAA6D,SAAS,CAACC,KAAK,CAACC,MAAM,U,cAA7C5E,mBAAA,CAMM,OANN6E,WAMM,GALJ1E,mBAAA,CAEM,OAFN2E,WAEM,GADJzE,YAAA,CAAmC8C,kBAAA;sBAA1B,MAAgB,CAAhB9C,YAAA,CAAgBQ,MAAA,kB;;oCAE3BV,mBAAA,CAAiB,YAAb,UAAQ,sB,4BACZA,mBAAA,CAAqB,WAAlB,gBAAc,qB,0CAIrBD,mBAAA,YAAe,EACfG,YAAA,CAoDY0E,oBAAA;gBAnDDlE,MAAA,CAAAmE,gBAAgB;+DAAhBnE,MAAA,CAAAmE,gBAAgB,GAAAzD,MAAA;IACzB0D,KAAK,EAAC,MAAM;IACZC,IAAI,EAAC,OAAO;IACZC,SAAS,EAAC;;sBAEV,MA6CM,CA7CKtE,MAAA,CAAAuE,cAAc,I,cAAzBpF,mBAAA,CA6CM,OA7CNqF,WA6CM,GA5CJlF,mBAAA,CAQM,OARNmF,WAQM,GAPJnF,mBAAA,CAEM;MAFDL,KAAK,EAAC,aAAa;MAAEmC,KAAK,EAAAkC,eAAA;QAAAC,eAAA,EAAoBvD,MAAA,CAAA0E,cAAc,CAAC1E,MAAA,CAAAuE,cAAc,CAACzE,IAAI;MAAA;QACnFN,YAAA,CAAmC8C,kBAAA;wBAA1B,MAAgB,CAAhB9C,YAAA,CAAgBQ,MAAA,kB;;yBAE3BV,mBAAA,CAGM,OAHNqF,WAGM,GAFJrF,mBAAA,CAAkC,YAAAoE,gBAAA,CAA3B1D,MAAA,CAAAuE,cAAc,CAAClB,IAAI,kBAC1B7D,YAAA,CAAwGoF,iBAAA;MAA/F9E,IAAI,EAAEE,MAAA,CAAA6E,gBAAgB,CAAC7E,MAAA,CAAAuE,cAAc,CAACzE,IAAI;;wBAAG,MAAyC,C,kCAAtCE,MAAA,CAAA8E,cAAc,CAAC9E,MAAA,CAAAuE,cAAc,CAACzE,IAAI,kB;;qCAI/FR,mBAAA,CAiCM,OAjCNyF,WAiCM,GAhCJvF,YAAA,CAOkBwF,0BAAA;MAPAC,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAN;;wBAC3B,MAAiF,CAAjF1F,YAAA,CAAiF2F,+BAAA;QAA3DtD,KAAK,EAAC;MAAM;0BAAC,MAAuB,C,kCAApB7B,MAAA,CAAAuE,cAAc,CAACa,EAAE,iB;;UACvD5F,YAAA,CAAiG2F,+BAAA;QAA3EtD,KAAK,EAAC;MAAI;0BAAC,MAAyC,C,kCAAtC7B,MAAA,CAAA8E,cAAc,CAAC9E,MAAA,CAAAuE,cAAc,CAACzE,IAAI,kB;;UACtEN,YAAA,CAEuB2F,+BAAA;QAFDtD,KAAK,EAAC;MAAI;0BAC9B,MAA8E,CAA9EvC,mBAAA,CAA8E,OAA9E+F,WAA8E,EAAA3B,gBAAA,CAA7C1D,MAAA,CAAAuE,cAAc,CAACe,WAAW,2B;;UAE7D9F,YAAA,CAA4F2F,+BAAA;QAAtEtD,KAAK,EAAC;MAAI;0BAAC,MAAoC,C,kCAAjC7B,MAAA,CAAAuE,cAAc,CAACgB,UAAU,sB;;;;QAG/DjG,mBAAA,CAsBM,OAtBNkG,WAsBM,G,4BArBJlG,mBAAA,CAAa,YAAT,MAAI,sBACGU,MAAA,CAAAyF,mBAAmB,CAAC1B,MAAM,U,cAArC5E,mBAAA,CAEM,OAFNuG,WAEM,EAFgE,UAEtE,M,cACAvG,mBAAA,CAgBM,OAhBNwG,WAgBM,I,kBAfJxG,mBAAA,CAcMoC,SAAA,QAAAC,WAAA,CAbUxB,MAAA,CAAAyF,mBAAmB,EAA1BG,GAAG;2BADZzG,mBAAA,CAcM;QAZHyC,GAAG,EAAEgE,GAAG,CAACR,EAAE;QACZnG,KAAK,EAAC,mBAAmB;QACxBmB,OAAK,EAAAM,MAAA,IAAEV,MAAA,CAAA6F,qBAAqB,CAACD,GAAG;UAEjCtG,mBAAA,CAMM,OANNwG,WAMM,GALJxG,mBAAA,CAGO,QAHPyG,WAGO,GAFLzG,mBAAA,CAA0F,QAA1F0G,WAA0F,EAAAtC,gBAAA,CAAlDkC,GAAG,CAACtB,SAAS,6C,iBAAqC,GAC1F,GAAAZ,gBAAA,CAAGkC,GAAG,CAACtB,SAAS,kBAAkBsB,GAAG,CAACK,UAAU,GAAGL,GAAG,CAACM,UAAU,iB,GAEnE5G,mBAAA,CAAyD,QAAzD6G,WAAyD,EAAAzC,gBAAA,CAAtBkC,GAAG,CAACQ,QAAQ,iB,GAEjD5G,YAAA,CAA4D8C,kBAAA;QAAnDrD,KAAK,EAAC;MAAoB;0BAAC,MAAc,CAAdO,YAAA,CAAcQ,MAAA,gB","ignoreList":[]}]}