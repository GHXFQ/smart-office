{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\KnowledgeBuilder.vue?vue&type=template&id=17b2f24e&scoped=true","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\KnowledgeBuilder.vue","mtime":1749736962690},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\babel.config.js","mtime":1748077811200},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1746431219000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1746431202000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_el_dialog","$setup","visible","$event","title","width","buildingStatus","footer","_withCtx","_createElementVNode","_hoisted_8","_createBlock","_component_el_button","onClick","close","_cache","type","startBuild","key","_hoisted_2","_component_el_icon","_component_Loading","_component_CircleCheckFilled","_component_CircleCloseFilled","_hoisted_3","_toDisplayString","buildingMessage","_hoisted_4","_component_el_progress","percentage","buildingProgress","format","p","_hoisted_5","_component_el_alert","closable","_hoisted_6","_hoisted_7"],"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\KnowledgeBuilder.vue"],"sourcesContent":["<template>\n  <div class=\"knowledge-builder\">\n    <!-- 知识库构建对话框 -->\n    <el-dialog\n      v-model=\"visible\"\n      title=\"构建知识库\"\n      width=\"650px\"\n      :close-on-click-modal=\"false\"\n      :show-close=\"buildingStatus !== 'processing'\"\n      class=\"builder-dialog\"\n    >\n      <div class=\"building-status\" :key=\"buildingStatus\">\n        <div class=\"status-icon\">\n          <el-icon v-if=\"buildingStatus === 'processing'\" class=\"spinning\"><Loading /></el-icon>\n          <el-icon v-else-if=\"buildingStatus === 'completed'\" class=\"success\"><CircleCheckFilled /></el-icon>\n          <el-icon v-else-if=\"buildingStatus === 'failed'\" class=\"error\"><CircleCloseFilled /></el-icon>\n        </div>\n        <div class=\"status-text\">\n          <h3>{{ buildingStatus === 'pending' ? '准备构建知识库' : \n                buildingStatus === 'processing' ? '正在构建知识库' : \n                buildingStatus === 'completed' ? '知识库构建完成' : '知识库构建失败' }}</h3>\n          <p>{{ buildingMessage }}</p>\n          \n          <div v-if=\"buildingStatus === 'processing'\" class=\"progress-container\">\n            <el-progress :percentage=\"buildingProgress\" :format=\"p => `${p}%`\"></el-progress>\n          </div>\n          \n          <div v-if=\"buildingStatus === 'pending'\" class=\"info-container\">\n            <el-alert\n              title=\"构建知识库将处理所有已上传的文档，并将它们整合到一个统一的知识库中\"\n              type=\"info\"\n              :closable=\"false\"\n              show-icon\n            >\n              <p>这个过程可能需要一些时间，取决于文档数量和大小。</p>\n              <p>构建完成后，您将能够使用智能问答功能对知识库进行提问。</p>\n            </el-alert>\n          </div>\n          \n          <div v-if=\"buildingStatus === 'completed'\" class=\"success-container\">\n            <el-alert\n              title=\"知识库已成功构建！\"\n              type=\"success\"\n              :closable=\"false\"\n              show-icon\n            >\n              <p>所有文档已被处理并整合到知识库中，您现在可以使用智能问答功能。</p>\n            </el-alert>\n          </div>\n          \n          <div v-if=\"buildingStatus === 'failed'\" class=\"error-container\">\n            <el-alert\n              title=\"知识库构建失败\"\n              type=\"error\"\n              :closable=\"false\"\n              show-icon\n            >\n              <p>{{ buildingMessage }}</p>\n              <p>请检查日志或联系管理员解决问题。</p>\n            </el-alert>\n          </div>\n        </div>\n      </div>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button v-if=\"buildingStatus !== 'processing'\" @click=\"close\">关闭</el-button>\n          <el-button \n            v-if=\"buildingStatus === 'pending'\" \n            type=\"primary\" \n            @click=\"startBuild\">开始构建</el-button>\n          <el-button \n            v-if=\"buildingStatus === 'failed'\" \n            type=\"primary\" \n            @click=\"startBuild\">重试</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, onBeforeUnmount, nextTick, watch } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport dayjs from 'dayjs'\nimport { buildKnowledgeBase, getKnowledgeBaseStatus } from '@/api/knowledge'\nimport { \n  Loading, \n  CircleCheckFilled, \n  CircleCloseFilled \n} from '@element-plus/icons-vue'\n\nexport default {\n  name: 'KnowledgeBuilder',\n  components: {\n    Loading,\n    CircleCheckFilled,\n    CircleCloseFilled\n  },\n  props: {\n    modelValue: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue', 'build-completed', 'build-failed'],\n  setup(props, { emit }) {\n    // 构建相关状态\n    const visible = computed({\n      get: () => props.modelValue,\n      set: (val) => emit('update:modelValue', val)\n    })\n    const buildingStatus = ref('pending') // pending, processing, completed, failed\n    const buildingProgress = ref(0)\n    const buildingMessage = ref('正在初始化...') // 初始化消息\n    const buildingOutput = ref('') // GraphRAG命令输出\n    const fullOutput = ref('') // 完整GraphRAG命令输出 (备用)\n    const buildingStats = ref(null) // 构建统计信息\n    \n    // 定时器ID\n    let pollTimer = null\n    // 重试计数器\n    let buildingRetryCount = 0\n\n    // 清除轮询定时器\n    const clearPollTimer = () => {\n      if (pollTimer) {\n        clearTimeout(pollTimer)\n        pollTimer = null\n        console.log('Polling timer cleared.');\n      }\n    }\n\n    // 启动知识库构建\n    const startBuild = async () => {\n      console.log('startBuild called');\n      try {\n        buildingStatus.value = 'processing'\n        buildingMessage.value = '正在启动知识库构建，请稍候...' // 更明确的启动消息\n        buildingProgress.value = 0\n        buildingOutput.value = '' // 清空旧输出\n        fullOutput.value = ''   // 清空旧输出\n        buildingStats.value = null\n        buildingRetryCount = 0 // 重置重试计数器\n        \n        clearPollTimer(); // 开始构建前先清除旧的定时器\n        console.log('Calling buildKnowledgeBase API...');\n        const response = await buildKnowledgeBase()\n        console.log('buildKnowledgeBase API response:', response)\n        \n        // API调用成功后立即开始轮询，初始延迟短一点\n        pollTimer = setTimeout(pollBuildStatus, 100); \n        console.log('Initial pollBuildStatus scheduled.');\n\n      } catch (error) {\n        console.error('启动知识库构建时出错:', error)\n        buildingStatus.value = 'failed'\n        buildingMessage.value = error.response?.data?.message || error.message || '启动构建失败'\n        emit('build-failed', error)\n        clearPollTimer();\n      }\n    }\n\n    // 轮询构建状态\n    const pollBuildStatus = async () => {\n      console.log('pollBuildStatus called. Current status:', buildingStatus.value);\n      // 如果已经是完成或失败状态，或者对话框不可见，则不应再轮询\n      if ((buildingStatus.value === 'completed' || buildingStatus.value === 'failed') && pollTimer) {\n          console.log('Build already completed or failed, clearing timer from pollBuildStatus.')\n          clearPollTimer();\n          return;\n      }\n      if (!visible.value && pollTimer) {\n          console.log('Dialog not visible, clearing timer from pollBuildStatus.');\n          clearPollTimer();\n          return;\n      }\n\n      try {\n        console.log('Calling getKnowledgeBaseStatus API...');\n        const response = await getKnowledgeBaseStatus()\n        console.log('getKnowledgeBaseStatus API response:', JSON.stringify(response, null, 2));\n\n        // 直接从响应中获取状态数据，不额外嵌套data属性\n        const statusData = response || {};\n        \n        if (statusData && typeof statusData === 'object') { \n          console.log('Status object received:', statusData);\n          \n          // 获取状态，确保使用正确的字段名\n          const status = statusData.status || 'pending';\n          buildingStatus.value = status;\n          buildingMessage.value = statusData.message || (status === 'processing' ? '正在处理中，请稍候...' : '等待状态更新...');\n          buildingProgress.value = statusData.progress || buildingProgress.value;\n          \n          console.log('Updated frontend status:', buildingStatus.value, 'Progress:', buildingProgress.value, 'Message:', buildingMessage.value);\n\n          // 处理GraphRAG命令输出\n          if (statusData.full_output) {\n            buildingOutput.value = statusData.full_output;\n            fullOutput.value = statusData.full_output;\n          } else if (statusData.graphrag_output) {\n            buildingOutput.value = statusData.graphrag_output;\n          }\n          \n          // 滚动输出框到底部\n          nextTick(() => {\n            const outputElem = document.querySelector('.output-content pre')\n            if (outputElem) {\n              outputElem.scrollTop = outputElem.scrollHeight\n            }\n          });\n          \n          // 根据状态决定下一步操作\n          if (status === 'completed' || status === 'failed') {\n            console.log(`Build ended with status: ${status}. Stopping poll.`);\n            clearPollTimer();\n\n            if (status === 'completed') {\n              buildingProgress.value = 100; // 确保完成时进度为100%\n              // 构建完成，处理统计数据\n              const startTime = statusData.started_at ? new Date(statusData.started_at) : null;\n              const endTime = statusData.finished_at ? new Date(statusData.finished_at) : new Date();\n            \n              buildingStats.value = {\n                startTime: startTime,\n                endTime: endTime,\n                duration: startTime && endTime ? calculateDuration(startTime, endTime) : '未知',\n                totalDocs: statusData.total_docs || 0,\n                totalChunks: statusData.total_chunks || 0\n              };\n            \n              ElMessage.success(statusData.message || '知识库构建完成！');\n              emit('build-completed');\n            } else { // failed\n              ElMessage.error(statusData.message || '知识库构建失败，请查看输出或日志。');\n              emit('build-failed', { message: statusData.message, detail: statusData.error_detail });\n            }\n          } else if (status === 'processing') {\n            const pollInterval = 1000; // 统一轮询间隔为1秒\n            console.log(`Status is 'processing'. Scheduling next poll in ${pollInterval}ms.`);\n            clearPollTimer(); // 清除旧的，避免重复\n            pollTimer = setTimeout(pollBuildStatus, pollInterval);\n          } else if (status === 'pending') {\n            // 对于pending状态，也需要继续轮询，但可以间隔长一些\n            const pollInterval = 2000;\n            console.log(`Status is 'pending'. Scheduling next poll in ${pollInterval}ms.`);\n            clearPollTimer();\n            pollTimer = setTimeout(pollBuildStatus, pollInterval);\n          } else {\n            console.warn('Unknown status from backend:', status, 'Stopping poll.');\n            clearPollTimer(); // 未知状态，停止轮询以防意外\n          }\n\n        } else {\n          console.warn('Invalid or empty response object from getKnowledgeBaseStatus. Response:', JSON.stringify(response));\n          buildingMessage.value = '获取状态响应格式无效...';\n          \n          if (buildingStatus.value === 'processing') {\n             const pollInterval = 3000; \n             clearPollTimer();\n             pollTimer = setTimeout(pollBuildStatus, pollInterval);\n          } else {\n            buildingStatus.value = 'failed';\n            buildingMessage.value = '获取状态失败，响应无效。';\n            emit('build-failed', { message: '获取状态失败，响应无效。'});\n            clearPollTimer();\n          }\n        }\n      } catch (error) {\n        console.error('获取构建状态时出错 (pollBuildStatus catch):', error)\n        buildingMessage.value = '获取构建状态失败: ' + (error.message || '未知错误') + '. 将尝试再次轮询。'\n        \n        // 在错误情况下，如果当前是processing状态，尝试再次轮询几次\n        if (buildingStatus.value === 'processing') {\n            // 增加重试计数器，避免无限轮询\n            buildingRetryCount = (buildingRetryCount || 0) + 1;\n            \n            if (buildingRetryCount <= 5) { // 最多重试5次\n                const pollInterval = 3000; // 错误后延长轮询间隔\n                clearPollTimer();\n                pollTimer = setTimeout(pollBuildStatus, pollInterval);\n                console.log(`轮询错误，第${buildingRetryCount}次重试，${pollInterval}ms后重试`);\n            } else {\n                console.error('轮询重试次数已达上限，停止轮询');\n                buildingStatus.value = 'failed';\n                buildingMessage.value = '获取构建状态失败，已达重试上限。';\n                emit('build-failed', error);\n                clearPollTimer();\n            }\n        } else {\n            buildingStatus.value = 'failed';\n            buildingMessage.value = '获取构建状态失败。';\n            emit('build-failed', error);\n            clearPollTimer();\n        }\n      }\n    }\n    \n    // 计算持续时间\n    const calculateDuration = (start, end) => {\n      const diff = Math.abs(end - start)\n      const minutes = Math.floor(diff / 60000)\n      const seconds = ((diff % 60000) / 1000).toFixed(0)\n      return `${minutes}分${seconds}秒`\n    }\n    \n    // 格式化构建时间\n    const formatBuildTime = (dateObj) => {\n      if (!dateObj) return '未知'\n      return dayjs(dateObj).format('YYYY-MM-DD HH:mm:ss')\n    }\n    \n    // 关闭对话框\n    const close = () => {\n      visible.value = false\n    }\n    \n    // 组件挂载时\n    onMounted(() => {\n      console.log('KnowledgeBuilder onMounted. Initial modelValue:', props.modelValue);\n      // 不自动开始轮询，等待startBuild被调用\n    })\n    \n    // 组件销毁前清理\n    onBeforeUnmount(() => {\n      console.log('KnowledgeBuilder onBeforeUnmount. Clearing poll timer.');\n      clearPollTimer()\n    })\n\n    watch(visible, (newVal) => {\n      if (newVal) {\n        // 当对话框打开时\n        console.log('Dialog became visible. Current status:', buildingStatus.value);\n        if (buildingStatus.value !== 'processing') {\n          // 如果不是正在处理中 (例如是 completed, failed, 或初始的 pending)，\n          // 则重置为初始待构建状态，以便用户可以开始新的构建。\n          console.log('Resetting status to pending for new build session.');\n          buildingStatus.value = 'pending';\n          buildingMessage.value = '准备开始新的知识库构建。'; // 或者更合适的初始消息\n          buildingProgress.value = 0;\n          buildingOutput.value = '';\n          fullOutput.value = '';\n          buildingStats.value = null;\n          buildingRetryCount = 0; // 重置重试计数器\n          clearPollTimer(); // 确保没有意外的轮询\n        }\n        // 如果是 processing，则什么都不做，让它继续处理或轮询\n      } else {\n        // 当对话框关闭时\n        console.log('Dialog closed. Current status:', buildingStatus.value);\n        // 如果正在处理中，用户关闭了对话框，最好停止轮询，避免后台继续请求\n        if (buildingStatus.value === 'processing') {\n            console.log('Dialog closed during processing, stopping poll timer.');\n            clearPollTimer();\n        }\n      }\n    });\n\n    return {\n      visible,\n      buildingStatus,\n      buildingProgress,\n      buildingMessage,\n      buildingOutput,\n      fullOutput,\n      buildingStats,\n      startBuild,\n      formatBuildTime,\n      close\n    }\n  }\n}\n</script>\n\n<style scoped>\n.builder-dialog {\n  max-width: 90vw;\n}\n\n.building-status {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n}\n\n.status-icon {\n  margin-bottom: 20px;\n  font-size: 48px;\n  display: flex;\n  justify-content: center;\n  color: #6c757d;\n}\n\n.status-icon .spinning {\n  animation: spin 2s linear infinite;\n}\n\n.status-icon .success {\n  color: #67C23A;\n}\n\n.status-icon .error {\n  color: #F56C6C;\n}\n\n.status-text {\n  text-align: center;\n  width: 100%;\n}\n\n.status-text h3 {\n  margin-bottom: 15px;\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.status-text p {\n  margin: 5px 0;\n}\n\n.progress-container {\n  margin: 20px 0;\n  width: 100%;\n}\n\n.info-container, .success-container, .error-container {\n  margin: 20px 0;\n  width: 100%;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style> "],"mappings":"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","ignoreList":[]}]}