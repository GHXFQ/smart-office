{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\Office3DAvatar.vue?vue&type=template&id=6b6e4916&scoped=true","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\Office3DAvatar.vue","mtime":1748693362508},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\babel.config.js","mtime":1748077811200},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1746431202000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlIH0gZnJvbSAidnVlIjsKY29uc3QgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImF2YXRhci1jb250YWluZXIiLAogIHJlZjogImNvbnRhaW5lciIKfTsKY29uc3QgX2hvaXN0ZWRfMiA9IHsKICByZWY6ICJjYW52YXMiLAogIGNsYXNzOiAiYXZhdGFyLWNhbnZhcyIKfTsKY29uc3QgX2hvaXN0ZWRfMyA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJhdmF0YXItbG9hZGluZyIKfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICBjb25zdCBfY29tcG9uZW50X2VsX2ljb24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtaWNvbiIpOwogIGNvbnN0IF9kaXJlY3RpdmVfbG9hZGluZyA9IF9yZXNvbHZlRGlyZWN0aXZlKCJsb2FkaW5nIik7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImNhbnZhcyIsIF9ob2lzdGVkXzIsIG51bGwsIDUxMiAvKiBORUVEX1BBVENIICovKSwgX2N0eC5sb2FkaW5nID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMywgW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9pY29uLCB7CiAgICBjbGFzczogImxvYWRpbmctaWNvbiIKICB9LCBudWxsLCA1MTIgLyogTkVFRF9QQVRDSCAqLyksIFtbX2RpcmVjdGl2ZV9sb2FkaW5nXV0pXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSwgNTEyIC8qIE5FRURfUEFUQ0ggKi8pOwp9"},{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_ctx","loading","_hoisted_3","_createVNode","_component_el_icon"],"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\Office3DAvatar.vue"],"sourcesContent":["<template>\n  <div class=\"avatar-container\" ref=\"container\">\n    <canvas ref=\"canvas\" class=\"avatar-canvas\"></canvas>\n    <div class=\"avatar-loading\" v-if=\"loading\">\n      <el-icon class=\"loading-icon\" v-loading></el-icon>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onBeforeUnmount, defineComponent } from 'vue'\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\nexport default defineComponent({\n  name: 'Office3DAvatar',\n  props: {\n    modelPath: {\n      type: String,\n      default: '/models/office_avatar.glb'\n    },\n    size: {\n      type: Number,\n      default: 120\n    },\n    animated: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: ['click'],\n  setup(props, { emit }) {\n    const container = ref(null)\n    const canvas = ref(null)\n    const loading = ref(true)\n    \n    let scene, camera, renderer, model, mixer, clock, controls\n    let animationFrameId = null\n    let defaultModelAnimate = null\n    \n    // 初始化3D场景\n    const initScene = () => {\n      // 创建场景\n      scene = new THREE.Scene()\n      // 将背景设置为透明\n      scene.background = null\n      \n      // 添加环境光和定向光\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.8)\n      scene.add(ambientLight)\n      \n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1)\n      directionalLight.position.set(0, 10, 10)\n      scene.add(directionalLight)\n      \n      // 创建相机\n      camera = new THREE.PerspectiveCamera(50, 1, 0.1, 1000)\n      camera.position.set(0, 1, 2.1)\n      camera.lookAt(0, 0.2, 0)\n      \n      // 创建渲染器\n      renderer = new THREE.WebGLRenderer({ \n        canvas: canvas.value,\n        antialias: true,\n        alpha: true\n      })\n      renderer.setSize(props.size, props.size)\n      renderer.setPixelRatio(window.devicePixelRatio)\n      renderer.outputEncoding = THREE.sRGBEncoding\n      \n      // 添加轨道控制器（允许用户旋转查看模型）\n      controls = new OrbitControls(camera, renderer.domElement)\n      controls.enableZoom = false\n      controls.enablePan = false\n      controls.enableRotate = false\n      controls.autoRotate = false\n      \n      // 设置时钟用于动画\n      clock = new THREE.Clock()\n      \n      // 加载3D模型\n      loadModel()\n    }\n    \n    // 创建默认的3D模型（当无法加载实际模型时使用）\n    const createDefaultModel = () => {\n      // 创建一个简单的办公桌面形象\n      const group = new THREE.Group()\n      \n      // 创建头部 - 使用球体\n      const headGeometry = new THREE.SphereGeometry(0.5, 32, 32)\n      const headMaterial = new THREE.MeshStandardMaterial({ color: 0x5B8FF9 })\n      const head = new THREE.Mesh(headGeometry, headMaterial)\n      head.position.y = 0.5\n      group.add(head)\n      \n      // 创建身体 - 使用圆柱体\n      const bodyGeometry = new THREE.CylinderGeometry(0.3, 0.4, 1, 32)\n      const bodyMaterial = new THREE.MeshStandardMaterial({ color: 0x2F54EB })\n      const body = new THREE.Mesh(bodyGeometry, bodyMaterial)\n      body.position.y = -0.3\n      group.add(body)\n      \n      // 创建眼睛\n      const eyeGeometry = new THREE.SphereGeometry(0.08, 16, 16)\n      const eyeMaterial = new THREE.MeshStandardMaterial({ color: 0xFFFFFF })\n      \n      // 左眼\n      const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial)\n      leftEye.position.set(-0.2, 0.6, 0.4)\n      group.add(leftEye)\n      \n      // 右眼\n      const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial)\n      rightEye.position.set(0.2, 0.6, 0.4)\n      group.add(rightEye)\n      \n      // 瞳孔\n      const pupilGeometry = new THREE.SphereGeometry(0.04, 16, 16)\n      const pupilMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 })\n      \n      // 左瞳孔\n      const leftPupil = new THREE.Mesh(pupilGeometry, pupilMaterial)\n      leftPupil.position.set(-0.2, 0.6, 0.48)\n      group.add(leftPupil)\n      \n      // 右瞳孔\n      const rightPupil = new THREE.Mesh(pupilGeometry, pupilMaterial)\n      rightPupil.position.set(0.2, 0.6, 0.48)\n      group.add(rightPupil)\n      \n      // 嘴巴\n      const mouthGeometry = new THREE.TorusGeometry(0.2, 0.05, 16, 16, Math.PI)\n      const mouthMaterial = new THREE.MeshStandardMaterial({ color: 0xFF5500 })\n      const mouth = new THREE.Mesh(mouthGeometry, mouthMaterial)\n      mouth.position.set(0, 0.3, 0.4)\n      mouth.rotation.set(Math.PI/2, 0, 0)\n      group.add(mouth)\n      \n      // 将组添加到场景\n      group.position.y = 0\n      scene.add(group)\n      \n      // 实现简单的动画\n      const animate = () => {\n        // 轻微摆动头部\n        if (group) {\n          group.rotation.y = Math.sin(Date.now() * 0.001) * 0.2\n          head.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.05\n        }\n      }\n      \n      return { group, animate }\n    }\n    \n    // 加载3D模型\n    const loadModel = () => {\n      const loader = new GLTFLoader()\n      \n      // 使用一个默认的3D办公人物模型\n      loader.load(\n        props.modelPath,\n        (gltf) => {\n          model = gltf.scene\n          \n          // 调整模型大小和位置\n          model.scale.set(0.8, 0.8, 0.8)\n          model.position.set(0, -0.8, 0)\n          scene.add(model)\n          \n          // 处理动画\n          if (props.animated && gltf.animations && gltf.animations.length) {\n            mixer = new THREE.AnimationMixer(model)\n            const action = mixer.clipAction(gltf.animations[0])\n            action.play()\n          }\n          \n          loading.value = false\n          animate()\n        },\n        (xhr) => {\n          console.log((xhr.loaded / xhr.total * 100) + '% loaded')\n        },\n        (error) => {\n          console.error('模型加载错误:', error)\n          loading.value = false\n          const { group, animate } = createDefaultModel()\n          model = group\n          defaultModelAnimate = animate\n          animate()\n        }\n      )\n    }\n    \n    // 动画循环\n    const animate = () => {\n      animationFrameId = requestAnimationFrame(animate)\n      \n      if (mixer) {\n        mixer.update(clock.getDelta())\n      }\n      \n      if (defaultModelAnimate) {\n        defaultModelAnimate()\n      }\n      \n      if (controls) {\n        controls.update()\n      }\n      \n      renderer.render(scene, camera)\n    }\n    \n    // 处理窗口大小变化\n    const handleResize = () => {\n      if (renderer) {\n        renderer.setSize(props.size, props.size)\n      }\n    }\n    \n    // 组件挂载后初始化3D场景\n    onMounted(() => {\n      initScene()\n      window.addEventListener('resize', handleResize)\n    })\n    \n    // 组件销毁前清理资源\n    onBeforeUnmount(() => {\n      if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId)\n      }\n      \n      window.removeEventListener('resize', handleResize)\n      \n      if (renderer) {\n        renderer.dispose()\n      }\n      \n      if (controls) {\n        controls.dispose()\n      }\n      \n      // 清理场景中的所有对象\n      if (scene) {\n        scene.traverse((object) => {\n          if (object.geometry) {\n            object.geometry.dispose()\n          }\n          \n          if (object.material) {\n            if (Array.isArray(object.material)) {\n              object.material.forEach(material => material.dispose())\n            } else {\n              object.material.dispose()\n            }\n          }\n        })\n      }\n    })\n    \n    // 点击3D模型触发事件\n    const handleClick = () => {\n      emit('click')\n    }\n    \n    return {\n      container,\n      canvas,\n      loading,\n      handleClick\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.avatar-container {\n  position: relative;\n  width: v-bind(size + 'px');\n  height: v-bind(size + 'px');\n  /* border-radius: 0; */\n  /* overflow: visible; */\n  /* box-shadow: 0 4px 12px var(--shadow-color); */\n  cursor: pointer;\n  transition: all 0.3s;\n  background: transparent;\n  /* 移除方框相关样式 */\n  &:hover {\n    transform: scale(1.1);\n    /* box-shadow: 0 6px 16px var(--shadow-color); */\n  }\n}\n\n.avatar-canvas {\n  width: 100%;\n  height: 100%;\n}\n\n.avatar-loading {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: transparent;\n  \n  .loading-icon {\n    font-size: 24px;\n    color: var(--primary-color);\n  }\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC,kBAAkB;EAACC,GAAG,EAAC;;;EACxBA,GAAG,EAAC,QAAQ;EAACD,KAAK,EAAC;;;;EACtBA,KAAK,EAAC;;;;;uBAFbE,mBAAA,CAKM,OALNC,UAKM,GAJJC,mBAAA,CAAoD,UAApDC,UAAoD,+BAClBC,IAAA,CAAAC,OAAO,I,cAAzCL,mBAAA,CAEM,OAFNM,UAEM,G,gBADJC,YAAA,CAAkDC,kBAAA;IAAzCV,KAAK,EAAC;EAAc,iC","ignoreList":[]}]}