{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\Office3DAvatar.vue?vue&type=template&id=6b6e4916&scoped=true","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\Office3DAvatar.vue","mtime":1748067517105},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\babel.config.js","mtime":1746431728000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1746431202000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlIH0gZnJvbSAidnVlIjsKY29uc3QgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImF2YXRhci1jb250YWluZXIiLAogIHJlZjogImNvbnRhaW5lciIKfTsKY29uc3QgX2hvaXN0ZWRfMiA9IHsKICByZWY6ICJjYW52YXMiLAogIGNsYXNzOiAiYXZhdGFyLWNhbnZhcyIKfTsKY29uc3QgX2hvaXN0ZWRfMyA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJhdmF0YXItbG9hZGluZyIKfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICBjb25zdCBfY29tcG9uZW50X2VsX2ljb24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtaWNvbiIpOwogIGNvbnN0IF9kaXJlY3RpdmVfbG9hZGluZyA9IF9yZXNvbHZlRGlyZWN0aXZlKCJsb2FkaW5nIik7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImNhbnZhcyIsIF9ob2lzdGVkXzIsIG51bGwsIDUxMiAvKiBORUVEX1BBVENIICovKSwgX2N0eC5sb2FkaW5nID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMywgW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9pY29uLCB7CiAgICBjbGFzczogImxvYWRpbmctaWNvbiIKICB9LCBudWxsLCA1MTIgLyogTkVFRF9QQVRDSCAqLyksIFtbX2RpcmVjdGl2ZV9sb2FkaW5nXV0pXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSwgNTEyIC8qIE5FRURfUEFUQ0ggKi8pOwp9"},{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_ctx","loading","_hoisted_3","_createVNode","_component_el_icon"],"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\components\\Office3DAvatar.vue"],"sourcesContent":["<template>\r\n  <div class=\"avatar-container\" ref=\"container\">\r\n    <canvas ref=\"canvas\" class=\"avatar-canvas\"></canvas>\r\n    <div class=\"avatar-loading\" v-if=\"loading\">\r\n      <el-icon class=\"loading-icon\" v-loading></el-icon>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount, defineComponent } from 'vue'\r\nimport * as THREE from 'three'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\n\r\nexport default defineComponent({\r\n  name: 'Office3DAvatar',\r\n  props: {\r\n    modelPath: {\r\n      type: String,\r\n      default: '/models/office_avatar.glb'\r\n    },\r\n    size: {\r\n      type: Number,\r\n      default: 60\r\n    },\r\n    animated: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  emits: ['click'],\r\n  setup(props, { emit }) {\r\n    const container = ref(null)\r\n    const canvas = ref(null)\r\n    const loading = ref(true)\r\n    \r\n    let scene, camera, renderer, model, mixer, clock, controls\r\n    let animationFrameId = null\r\n    let defaultModelAnimate = null\r\n    \r\n    // 初始化3D场景\r\n    const initScene = () => {\r\n      // 创建场景\r\n      scene = new THREE.Scene()\r\n      scene.background = new THREE.Color(0x5B8FF9)\r\n      \r\n      // 添加环境光和定向光\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.8)\r\n      scene.add(ambientLight)\r\n      \r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1)\r\n      directionalLight.position.set(0, 10, 10)\r\n      scene.add(directionalLight)\r\n      \r\n      // 创建相机\r\n      camera = new THREE.PerspectiveCamera(50, 1, 0.1, 1000)\r\n      camera.position.set(0, 1, 3)\r\n      camera.lookAt(0, 0, 0)\r\n      \r\n      // 创建渲染器\r\n      renderer = new THREE.WebGLRenderer({ \r\n        canvas: canvas.value,\r\n        antialias: true,\r\n        alpha: true\r\n      })\r\n      renderer.setSize(props.size, props.size)\r\n      renderer.setPixelRatio(window.devicePixelRatio)\r\n      renderer.outputEncoding = THREE.sRGBEncoding\r\n      \r\n      // 添加轨道控制器（允许用户旋转查看模型）\r\n      controls = new OrbitControls(camera, renderer.domElement)\r\n      controls.enableZoom = false\r\n      controls.enablePan = false\r\n      controls.rotateSpeed = 0.5\r\n      controls.autoRotate = true\r\n      controls.autoRotateSpeed = 2\r\n      \r\n      // 设置时钟用于动画\r\n      clock = new THREE.Clock()\r\n      \r\n      // 加载3D模型\r\n      loadModel()\r\n    }\r\n    \r\n    // 创建默认的3D模型（当无法加载实际模型时使用）\r\n    const createDefaultModel = () => {\r\n      // 创建一个简单的办公桌面形象\r\n      const group = new THREE.Group()\r\n      \r\n      // 创建头部 - 使用球体\r\n      const headGeometry = new THREE.SphereGeometry(0.5, 32, 32)\r\n      const headMaterial = new THREE.MeshStandardMaterial({ color: 0x5B8FF9 })\r\n      const head = new THREE.Mesh(headGeometry, headMaterial)\r\n      head.position.y = 0.5\r\n      group.add(head)\r\n      \r\n      // 创建身体 - 使用圆柱体\r\n      const bodyGeometry = new THREE.CylinderGeometry(0.3, 0.4, 1, 32)\r\n      const bodyMaterial = new THREE.MeshStandardMaterial({ color: 0x2F54EB })\r\n      const body = new THREE.Mesh(bodyGeometry, bodyMaterial)\r\n      body.position.y = -0.3\r\n      group.add(body)\r\n      \r\n      // 创建眼睛\r\n      const eyeGeometry = new THREE.SphereGeometry(0.08, 16, 16)\r\n      const eyeMaterial = new THREE.MeshStandardMaterial({ color: 0xFFFFFF })\r\n      \r\n      // 左眼\r\n      const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial)\r\n      leftEye.position.set(-0.2, 0.6, 0.4)\r\n      group.add(leftEye)\r\n      \r\n      // 右眼\r\n      const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial)\r\n      rightEye.position.set(0.2, 0.6, 0.4)\r\n      group.add(rightEye)\r\n      \r\n      // 瞳孔\r\n      const pupilGeometry = new THREE.SphereGeometry(0.04, 16, 16)\r\n      const pupilMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 })\r\n      \r\n      // 左瞳孔\r\n      const leftPupil = new THREE.Mesh(pupilGeometry, pupilMaterial)\r\n      leftPupil.position.set(-0.2, 0.6, 0.48)\r\n      group.add(leftPupil)\r\n      \r\n      // 右瞳孔\r\n      const rightPupil = new THREE.Mesh(pupilGeometry, pupilMaterial)\r\n      rightPupil.position.set(0.2, 0.6, 0.48)\r\n      group.add(rightPupil)\r\n      \r\n      // 嘴巴\r\n      const mouthGeometry = new THREE.TorusGeometry(0.2, 0.05, 16, 16, Math.PI)\r\n      const mouthMaterial = new THREE.MeshStandardMaterial({ color: 0xFF5500 })\r\n      const mouth = new THREE.Mesh(mouthGeometry, mouthMaterial)\r\n      mouth.position.set(0, 0.3, 0.4)\r\n      mouth.rotation.set(Math.PI/2, 0, 0)\r\n      group.add(mouth)\r\n      \r\n      // 将组添加到场景\r\n      group.position.y = 0\r\n      scene.add(group)\r\n      \r\n      // 实现简单的动画\r\n      const animate = () => {\r\n        // 轻微摆动头部\r\n        if (group) {\r\n          group.rotation.y = Math.sin(Date.now() * 0.001) * 0.2\r\n          head.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.05\r\n        }\r\n      }\r\n      \r\n      return { group, animate }\r\n    }\r\n    \r\n    // 加载3D模型\r\n    const loadModel = () => {\r\n      const loader = new GLTFLoader()\r\n      \r\n      // 使用一个默认的3D办公人物模型\r\n      loader.load(\r\n        props.modelPath,\r\n        (gltf) => {\r\n          model = gltf.scene\r\n          \r\n          // 调整模型大小和位置\r\n          model.scale.set(0.8, 0.8, 0.8)\r\n          model.position.set(0, -0.8, 0)\r\n          scene.add(model)\r\n          \r\n          // 处理动画\r\n          if (props.animated && gltf.animations && gltf.animations.length) {\r\n            mixer = new THREE.AnimationMixer(model)\r\n            const action = mixer.clipAction(gltf.animations[0])\r\n            action.play()\r\n          }\r\n          \r\n          loading.value = false\r\n          animate()\r\n        },\r\n        (xhr) => {\r\n          console.log((xhr.loaded / xhr.total * 100) + '% loaded')\r\n        },\r\n        (error) => {\r\n          console.error('模型加载错误:', error)\r\n          loading.value = false\r\n          const { group, animate } = createDefaultModel()\r\n          model = group\r\n          defaultModelAnimate = animate\r\n          animate()\r\n        }\r\n      )\r\n    }\r\n    \r\n    // 动画循环\r\n    const animate = () => {\r\n      animationFrameId = requestAnimationFrame(animate)\r\n      \r\n      if (mixer) {\r\n        mixer.update(clock.getDelta())\r\n      }\r\n      \r\n      if (defaultModelAnimate) {\r\n        defaultModelAnimate()\r\n      }\r\n      \r\n      if (controls) {\r\n        controls.update()\r\n      }\r\n      \r\n      renderer.render(scene, camera)\r\n    }\r\n    \r\n    // 处理窗口大小变化\r\n    const handleResize = () => {\r\n      if (renderer) {\r\n        renderer.setSize(props.size, props.size)\r\n      }\r\n    }\r\n    \r\n    // 组件挂载后初始化3D场景\r\n    onMounted(() => {\r\n      initScene()\r\n      window.addEventListener('resize', handleResize)\r\n    })\r\n    \r\n    // 组件销毁前清理资源\r\n    onBeforeUnmount(() => {\r\n      if (animationFrameId) {\r\n        cancelAnimationFrame(animationFrameId)\r\n      }\r\n      \r\n      window.removeEventListener('resize', handleResize)\r\n      \r\n      if (renderer) {\r\n        renderer.dispose()\r\n      }\r\n      \r\n      if (controls) {\r\n        controls.dispose()\r\n      }\r\n      \r\n      // 清理场景中的所有对象\r\n      if (scene) {\r\n        scene.traverse((object) => {\r\n          if (object.geometry) {\r\n            object.geometry.dispose()\r\n          }\r\n          \r\n          if (object.material) {\r\n            if (Array.isArray(object.material)) {\r\n              object.material.forEach(material => material.dispose())\r\n            } else {\r\n              object.material.dispose()\r\n            }\r\n          }\r\n        })\r\n      }\r\n    })\r\n    \r\n    // 点击3D模型触发事件\r\n    const handleClick = () => {\r\n      emit('click')\r\n    }\r\n    \r\n    return {\r\n      container,\r\n      canvas,\r\n      loading,\r\n      handleClick\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.avatar-container {\r\n  position: relative;\r\n  width: v-bind(size + 'px');\r\n  height: v-bind(size + 'px');\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 12px var(--shadow-color);\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  \r\n  &:hover {\r\n    transform: scale(1.1);\r\n    box-shadow: 0 6px 16px var(--shadow-color);\r\n  }\r\n}\r\n\r\n.avatar-canvas {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.avatar-loading {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: var(--primary-color);\r\n  \r\n  .loading-icon {\r\n    font-size: 24px;\r\n    color: white;\r\n  }\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC,kBAAkB;EAACC,GAAG,EAAC;;;EACxBA,GAAG,EAAC,QAAQ;EAACD,KAAK,EAAC;;;;EACtBA,KAAK,EAAC;;;;;uBAFbE,mBAAA,CAKM,OALNC,UAKM,GAJJC,mBAAA,CAAoD,UAApDC,UAAoD,+BAClBC,IAAA,CAAAC,OAAO,I,cAAzCL,mBAAA,CAEM,OAFNM,UAEM,G,gBADJC,YAAA,CAAkDC,kBAAA;IAAzCV,KAAK,EAAC;EAAc,iC","ignoreList":[]}]}