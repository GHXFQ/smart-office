{"remainingRequest":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\chat\\Index.vue?vue&type=template&id=1e4a549b&scoped=true","dependencies":[{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\chat\\Index.vue","mtime":1747741315815},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\babel.config.js","mtime":1746431728000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1746431219000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1746431202000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1746431218000},{"path":"C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1746431218000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["class","ref","style","_createElementBlock","_hoisted_1","_createVNode","_component_el_card","$setup","loading","_hoisted_2","_component_el_alert","title","type","closable","_createElementVNode","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_component_el_input","searchQuery","$event","placeholder","clearable","Search","_component_el_button","circle","size","onClick","refreshChatSessions","_component_el_icon","_component_Refresh","_hoisted_7","_Fragment","_renderList","tabs","tab","index","key","_normalizeClass","activeTab","_hoisted_8","_hoisted_9","Object","keys","groupedUsersByDepartment","length","_hoisted_10","departmentUsers","deptName","_hoisted_11","_toDisplayString","contact","id","selectedContact","selectContact","_hoisted_13","avatar","_normalizeStyle","backgroundColor","color","_hoisted_14","initial","src","alt","status","_hoisted_16","_hoisted_17","name","_hoisted_18","lastTime","_hoisted_19","lastMessage","unread","_createBlock","_component_el_badge","value","_hoisted_20","_component_el_skeleton","rows","animated","filteredContacts","_hoisted_22","_hoisted_23","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_component_el_empty","description","image","_withCtx","_component_UserFilled","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","currentContact","_hoisted_34","_hoisted_36","getStatusText","_hoisted_37","_component_el_tooltip","content","placement","_component_Phone","_component_VideoCamera","_component_InfoFilled","_hoisted_38","messages","message","sender","userId","_hoisted_39","_hoisted_40","getSenderColor","_hoisted_41","getSenderInitial","_hoisted_42","message_type","_hoisted_43","_hoisted_44","file","downloadFile","_component_Document","file_name","_hoisted_47","formatFileSize","file_size","viewKnowledge","_component_Reading","_hoisted_49","_hoisted_50","knowledge_detail","_hoisted_51","_hoisted_52","formatMessageTime","created_at","calendar_data","hiddenCalendarEvents","includes","_component_ChatCalendarEvent","messageId","eventData","onCalendarEventAdded","handleCalendarEventAdded","onCalendarEventHidden","handleCalendarEventHidden","_hoisted_53","_component_ChatLineSquare","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","openImageUpload","_component_PictureFilled","openFileUpload","_component_FolderOpened","openKnowledgeDialog","_component_Microphone","_hoisted_58","messageInput","resize","onKeyup","_withKeys","_withModifiers","sendMessage","_hoisted_59","_component_Position","_hoisted_60","_hoisted_61","_component_ChatDotSquare","onChange","_cache","args","handleFileUpload","accept","handleImageUpload","_component_el_dialog","knowledgeDialogVisible","width","footer","_hoisted_62","_component_el_table","data","knowledgeList","onRowClick","selectKnowledge","_component_el_table_column","prop","label","default","scope","_component_el_tag","row","file_type","formatDate","shareKnowledge","knowledgeLoading"],"sources":["C:\\Users\\18083\\Desktop\\CCIT\\office\\smart-office\\frontend\\src\\views\\chat\\Index.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n        <el-card class=\"chat-card\">\n          <div class=\"chat-header-actions\" v-if=\"loading\">\n            <el-alert\n              title=\"正在加载数据...\"\n              type=\"info\"\n              :closable=\"false\"\n              show-icon\n            />\n          </div>\n          <div class=\"chat-layout\">\n            <!-- 左侧联系人列表 -->\n            <div class=\"chat-sidebar\">\n              <!-- 搜索框 -->\n              <div class=\"search-box\">\n                <div class=\"search-header\">\n                  <el-input \n                    v-model=\"searchQuery\" \n                    placeholder=\"搜索联系人...\"\n                    clearable\n                    :prefix-icon=\"Search\"\n                  ></el-input>\n                  <el-button circle size=\"small\" @click=\"refreshChatSessions\" title=\"刷新列表\">\n                    <el-icon><Refresh /></el-icon>\n                  </el-button>\n                </div>\n              </div>\n              \n              <!-- 聊天标签页 -->\n              <div class=\"chat-tabs\">\n                <div \n                  v-for=\"(tab, index) in tabs\" \n                  :key=\"index\"\n                  class=\"chat-tab\"\n                  :class=\"{'active': activeTab === index}\"\n                  @click=\"activeTab = index\"\n                >\n                  {{ tab }}\n                </div>\n              </div>\n              \n              <!-- 联系人列表 -->\n              <div class=\"contacts-list\">\n                <!-- 部门分组显示 (仅在同事标签页显示) -->\n                <template v-if=\"activeTab === 1\">\n                  <div v-if=\"!loading && Object.keys(groupedUsersByDepartment).length > 0\">\n                    <div v-for=\"(departmentUsers, deptName) in groupedUsersByDepartment\" :key=\"deptName\" class=\"department-group\">\n                      <div class=\"department-header\">{{ deptName }}</div>\n                      <div \n                        v-for=\"contact in departmentUsers\" \n                        :key=\"contact.id\"\n                        class=\"contact-item\"\n                        :class=\"{'active': selectedContact === contact.id}\"\n                        @click=\"selectContact(contact)\"\n                      >\n                        <div class=\"contact-avatar\">\n                          <div \n                            v-if=\"!contact.avatar\" \n                            class=\"avatar\" \n                            :style=\"{backgroundColor: contact.color}\"\n                          >\n                            <span class=\"avatar-initial\">{{ contact.initial }}</span>\n                          </div>\n                          <img v-else :src=\"contact.avatar\" alt=\"avatar\" class=\"avatar\" />\n                          <div \n                            class=\"contact-status\" \n                            :class=\"'status-' + contact.status\"\n                          ></div>\n                        </div>\n                        <div class=\"contact-info\">\n                          <div class=\"contact-name\">\n                            <span>{{ contact.name }}</span>\n                            <span class=\"time\">{{ contact.lastTime }}</span>\n                          </div>\n                          <div class=\"contact-message\">\n                            <span>{{ contact.lastMessage }}</span>\n                            <el-badge \n                              v-if=\"contact.unread\" \n                              :value=\"contact.unread\" \n                              class=\"message-badge\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div v-else-if=\"!loading\" class=\"loading-container\">\n                    <el-skeleton :rows=\"5\" animated />\n                  </div>\n                </template>\n                \n                <!-- 最近聊天标签页 -->\n                <template v-else>\n                  <div \n                    v-for=\"contact in filteredContacts\" \n                    :key=\"contact.id\"\n                    class=\"contact-item\"\n                    :class=\"{'active': selectedContact === contact.id}\"\n                    @click=\"selectContact(contact)\"\n                  >\n                    <div class=\"contact-avatar\">\n                      <div \n                        v-if=\"!contact.avatar\" \n                        class=\"avatar\" \n                        :style=\"{backgroundColor: contact.color}\"\n                      >\n                        <span class=\"avatar-initial\">{{ contact.initial }}</span>\n                      </div>\n                      <img v-else :src=\"contact.avatar\" alt=\"avatar\" class=\"avatar\" />\n                      <div \n                        class=\"contact-status\" \n                        :class=\"'status-' + contact.status\"\n                      ></div>\n                    </div>\n                    <div class=\"contact-info\">\n                      <div class=\"contact-name\">\n                        <span>{{ contact.name }}</span>\n                        <span class=\"time\">{{ contact.lastTime }}</span>\n                      </div>\n                      <div class=\"contact-message\">\n                        <span>{{ contact.lastMessage }}</span>\n                        <el-badge \n                          v-if=\"contact.unread\" \n                          :value=\"contact.unread\" \n                          class=\"message-badge\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <!-- 在最近聊天标签页，如果没有聊天记录，显示提示 -->\n                  <div v-if=\"!loading && filteredContacts.length === 0\" class=\"empty-contacts\">\n                    <el-empty \n                      description=\"暂无联系人\" \n                      :image-size=\"100\"\n                    >\n                      <template #image>\n                        <el-icon :size=\"64\" class=\"empty-icon\"><UserFilled /></el-icon>\n                      </template>\n                    </el-empty>\n                  </div>\n                </template>\n\n                <!-- 无联系人提示 -->\n                <div v-if=\"loading\" class=\"loading-container\">\n                  <el-skeleton :rows=\"5\" animated />\n                </div>\n              </div>\n            </div>\n            \n            <!-- 右侧聊天内容 -->\n            <div class=\"chat-content\">\n              <!-- 聊天头部 -->\n              <div class=\"chat-header\" v-if=\"selectedContact !== null\">\n                <div class=\"contact-avatar\">\n                  <div \n                v-if=\"!currentContact.avatar\" \n                    class=\"avatar\" \n                :style=\"{backgroundColor: currentContact.color}\"\n                  >\n                <span class=\"avatar-initial\">{{ currentContact.initial || '?' }}</span>\n                  </div>\n                  <img \n                    v-else \n                :src=\"currentContact.avatar\" \n                    alt=\"avatar\" \n                    class=\"avatar\" \n                  />\n                  <div \n                    class=\"contact-status\" \n                :class=\"'status-' + (currentContact.status || 'online')\"\n                  ></div>\n                </div>\n                <div class=\"contact-info\">\n              <h6>{{ currentContact.name || '未命名联系人' }}</h6>\n              <p>{{ getStatusText(currentContact.status || 'online') }}</p>\n                </div>\n                <div class=\"chat-actions\">\n                  <el-tooltip content=\"语音通话\" placement=\"bottom\">\n                    <el-button circle>\n                      <el-icon><Phone /></el-icon>\n                    </el-button>\n                  </el-tooltip>\n                  <el-tooltip content=\"视频通话\" placement=\"bottom\">\n                    <el-button circle>\n                      <el-icon><VideoCamera /></el-icon>\n                    </el-button>\n                  </el-tooltip>\n                  <el-tooltip content=\"聊天信息\" placement=\"bottom\">\n                    <el-button circle>\n                      <el-icon><InfoFilled /></el-icon>\n                    </el-button>\n                  </el-tooltip>\n                </div>\n              </div>\n              \n              <!-- 聊天消息区域 -->\n              <div class=\"chat-messages\" v-if=\"selectedContact !== null\" ref=\"messageContainer\">\n                <!-- 有消息时显示消息列表 -->\n                <template v-if=\"messages.length > 0\">\n                  <div \n                    v-for=\"(message, index) in messages\" \n                    :key=\"message.id || index\"\n                    class=\"message\"\n                    :class=\"message.sender.id === userId ? 'message-sent' : 'message-received'\"\n                  >\n                    <div class=\"message-container\">\n                      <div v-if=\"message.sender.id !== userId\" class=\"message-avatar\">\n                        <div \n                          class=\"avatar small\" \n                          :style=\"{backgroundColor: getSenderColor(message.sender)}\"\n                        >\n                          <span class=\"avatar-initial\">{{ getSenderInitial(message.sender) }}</span>\n                        </div>\n                      </div>\n                      <div class=\"message-content-wrapper\">\n                        <div \n                          class=\"message-content\"\n                          :class=\"message.sender.id === userId ? 'sent' : 'received'\"\n                        >\n                          <span v-if=\"message.message_type === 'text'\">{{ message.content }}</span>\n                      \n                          <div v-else-if=\"message.message_type === 'image'\" class=\"message-image\">\n                            <img :src=\"message.file\" alt=\"image\" />\n                          </div>\n                      \n                          <div v-else-if=\"message.message_type === 'file'\" class=\"message-file\" @click=\"downloadFile(message)\">\n                            <el-icon><Document /></el-icon>\n                            <span>{{ message.file_name }}</span>\n                            <span class=\"file-size\">{{ formatFileSize(message.file_size) }}</span>\n                          </div>\n                      \n                          <div v-else-if=\"message.message_type === 'knowledge'\" class=\"message-knowledge\" @click=\"viewKnowledge(message)\">\n                            <el-icon><Reading /></el-icon>\n                            <div class=\"knowledge-info\">\n                              <div class=\"knowledge-title\">{{ message.knowledge_detail.title }}</div>\n                              <div class=\"knowledge-desc\">{{ message.knowledge_detail.description }}</div>\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"message-time\">{{ formatMessageTime(message.created_at) }}</div>\n                        \n                        <!-- 日程事件组件 -->\n                        <ChatCalendarEvent \n                          v-if=\"message.calendar_data && !hiddenCalendarEvents.includes(message.id)\"\n                          :messageId=\"message.id\"\n                          :eventData=\"message.calendar_data\"\n                          @calendar-event-added=\"handleCalendarEventAdded\"\n                          @calendar-event-hidden=\"handleCalendarEventHidden(message.id)\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </template>\n                \n                <!-- 没有消息时显示空提示 -->\n                <template v-else-if=\"!loading\">\n                  <div class=\"empty-messages\">\n                    <el-empty description=\"暂无消息记录\">\n                      <template #image>\n                        <el-icon :size=\"64\" class=\"empty-icon\"><ChatLineSquare /></el-icon>\n                      </template>\n                      <p>发送第一条消息开始对话吧</p>\n                    </el-empty>\n                  </div>\n                </template>\n                \n                <!-- 加载中显示骨架屏 -->\n                <template v-else>\n                  <div class=\"loading-messages\">\n                    <el-skeleton :rows=\"3\" animated />\n                    <el-skeleton style=\"margin-top: 20px\" :rows=\"2\" animated />\n                    <div style=\"text-align: right; margin-top: 20px\">\n                      <el-skeleton :rows=\"2\" animated />\n                    </div>\n                  </div>\n                </template>\n              </div>\n              \n              <!-- 聊天输入框 -->\n              <div class=\"chat-input\" v-if=\"selectedContact !== null\">\n                <div class=\"chat-tools\">\n                  <el-tooltip content=\"发送图片\" placement=\"top\">\n                    <el-button circle @click=\"openImageUpload\">\n                      <el-icon><PictureFilled /></el-icon>\n                    </el-button>\n                  </el-tooltip>\n                  <el-tooltip content=\"发送文件\" placement=\"top\">\n                    <el-button circle @click=\"openFileUpload\">\n                      <el-icon><FolderOpened /></el-icon>\n                    </el-button>\n                  </el-tooltip>\n                  <el-tooltip content=\"分享知识库文件\" placement=\"top\">\n                    <el-button circle @click=\"openKnowledgeDialog\">\n                      <el-icon><Reading /></el-icon>\n                    </el-button>\n                  </el-tooltip>\n                  <el-tooltip content=\"语音消息\" placement=\"top\">\n                    <el-button circle>\n                      <el-icon><Microphone /></el-icon>\n                    </el-button>\n                  </el-tooltip>\n                </div>\n                <div class=\"input-area\">\n                  <el-input\n                    v-model=\"messageInput\"\n                    type=\"textarea\"\n                    :rows=\"3\"\n                    placeholder=\"输入消息...\"\n                    resize=\"none\"\n                    @keyup.enter.prevent=\"sendMessage\"\n                  ></el-input>\n                </div>\n                <div class=\"send-button\">\n                  <el-button type=\"primary\" @click=\"sendMessage\">\n                    <el-icon><Position /></el-icon>\n                    发送\n                  </el-button>\n                </div>\n              </div>\n              \n              <!-- 无选中联系人提示 -->\n              <div class=\"empty-chat\" v-if=\"selectedContact === null\">\n                <div class=\"empty-illustration\">\n                  <el-icon :size=\"64\"><ChatDotSquare /></el-icon>\n                </div>\n                <h4>选择一个联系人开始聊天</h4>\n                <p>从左侧列表选择联系人开始对话</p>\n              </div>\n            </div>\n          </div>\n        </el-card>\n  \n  <!-- 隐藏的文件上传输入 -->\n  <input \n    type=\"file\" \n    ref=\"fileInput\" \n    style=\"display: none\" \n    @change=\"handleFileUpload\" \n  />\n  \n  <!-- 隐藏的图片上传输入 -->\n  <input \n    type=\"file\" \n    ref=\"imageInput\" \n    style=\"display: none\" \n    accept=\"image/*\" \n    @change=\"handleImageUpload\" \n  />\n  \n  <!-- 知识库选择对话框 -->\n  <el-dialog\n    v-model=\"knowledgeDialogVisible\"\n    title=\"选择知识库文件\"\n    width=\"50%\"\n  >\n    <el-table\n      v-loading=\"knowledgeLoading\"\n      :data=\"knowledgeList\"\n      style=\"width: 100%\"\n      @row-click=\"selectKnowledge\"\n    >\n      <el-table-column prop=\"title\" label=\"标题\"></el-table-column>\n      <el-table-column prop=\"file_type\" label=\"类型\">\n        <template #default=\"scope\">\n          <el-tag>{{ scope.row.file_type }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"created_at\" label=\"创建时间\">\n        <template #default=\"scope\">\n          {{ formatDate(scope.row.created_at) }}\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\">\n        <template #default=\"scope\">\n          <el-button type=\"primary\" size=\"small\" @click.stop=\"shareKnowledge(scope.row)\">\n            分享\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <template #footer>\n      <span class=\"dialog-footer\">\n        <el-button @click=\"knowledgeDialogVisible = false\">取消</el-button>\n      </span>\n    </template>\n  </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, nextTick, onMounted, onBeforeUnmount, watch } from 'vue'\nimport { useStore } from 'vuex'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { \n  Search, Phone, VideoCamera, InfoFilled, Document, PictureFilled, \n  FolderOpened, Microphone, Position, ChatDotSquare, Reading, UserFilled, ChatLineSquare,\n  Refresh, MoreFilled\n} from '@element-plus/icons-vue'\nimport { \n  getChatSessions, \n  getChatSession, \n  sendTextMessage, \n  sendFileMessage,\n  sendImageMessage,\n  sendKnowledgeMessage,\n  downloadMessageFile\n} from '@/api/chat'\nimport { getKnowledgeList } from '@/api/knowledge'\nimport { useRoute } from 'vue-router'\nimport request from '@/utils/request'\nimport ChatCalendarEvent from '@/components/ChatCalendarEvent.vue'\n\nexport default {\n  name: 'Chat',\n  components: {\n    ChatCalendarEvent\n  },\n  setup() {\n    const store = useStore()\n    const currentUser = computed(() => store.getters.user)\n    \n    // 添加本地用户数据存储\n    const userInfo = ref(null)\n    \n    const searchQuery = ref('')\n    const activeTab = ref(0)\n    const selectedContact = ref(null)\n    const messageInput = ref('')\n    const messageContainer = ref(null)\n    const fileInput = ref(null)\n    const imageInput = ref(null)\n    const messages = ref([])\n    const loading = ref(false)\n    const chatSessions = ref([])\n    const currentChatId = ref(null)\n    \n    // 知识库相关\n    const knowledgeDialogVisible = ref(false)\n    const knowledgeLoading = ref(false)\n    const knowledgeList = ref([])\n    const selectedKnowledge = ref(null)\n    \n    // 标签页\n    const tabs = ref(['最近聊天', '同事'])\n    \n    // 联系人列表\n    const contacts = ref([])\n    // 所有同事用户列表\n    const allColleagues = ref([])\n    \n    // 当前选中的联系人\n    const currentContact = computed(() => {\n      if (selectedContact.value === null) return {}\n      return contacts.value.find(c => c.id === selectedContact.value) || {}\n    })\n    \n    // 安全地获取用户ID，避免模板中的null错误\n    const userId = computed(() => {\n      return userInfo.value?.id || null\n    })\n    \n    // 根据搜索过滤联系人\n    const filteredContacts = computed(() => {\n      if (!searchQuery.value) return contacts.value\n      return contacts.value.filter(contact =>\n        contact.name.toLowerCase().includes(searchQuery.value.toLowerCase())\n      )\n    })\n    \n    // 根据当前激活的标签页获取要显示的联系人\n    const getActiveContacts = computed(() => {\n      if (activeTab.value === 0) {\n        return filteredContacts.value\n      } else if (activeTab.value === 1) {\n        return filteredContacts.value.filter(contact => !contact.isGroup)\n      }\n      return filteredContacts.value\n    })\n    \n    \n    // 按部门分组的用户\n    const groupedUsersByDepartment = computed(() => {\n      // 合并聊天联系人和所有同事\n      const usersMap = new Map();\n      \n      // 先添加聊天联系人（非群组）\n      filteredContacts.value\n        .filter(contact => !contact.isGroup)\n        .forEach(contact => {\n          // 跳过自己\n          if (userInfo.value && contact.userId === userInfo.value.id) {\n            return;\n          }\n          // 使用ID作为唯一键\n          usersMap.set(contact.userId || contact.id, contact);\n        });\n      \n      // 再添加所有同事，但避免重复\n      allColleagues.value.forEach(colleague => {\n        // 跳过自己\n        if (userInfo.value && colleague.id === userInfo.value.id) {\n          return;\n        }\n        \n        // 只有在不存在时才添加（避免覆盖现有联系人）\n        if (!usersMap.has(colleague.id)) {\n          // 构造兼容格式的用户对象\n          const contact = {\n            id: 'user_' + colleague.id, // 添加前缀以避免与现有会话ID冲突\n            userId: colleague.id,\n            name: ((colleague.first_name || '') + ' ' + (colleague.last_name || '')).trim() || colleague.username || '未命名联系人',\n            initial: ((colleague.first_name || colleague.username || '未命名联系人')[0]),\n            avatar: colleague.avatar || '',\n            color: getRandomColor(colleague.id),\n            status: 'online',\n            lastMessage: '',\n            lastTime: '',\n            unread: 0,\n            isGroup: false,\n            department: colleague.department || '其它'\n          };\n          usersMap.set(colleague.id, contact);\n        }\n      });\n      \n      // 按部门分组\n      const groupedUsers = {};\n      \n      // 将Map转为Array后分组\n      Array.from(usersMap.values()).forEach(user => {\n        const departmentName = user.department || '其它';\n        if (!groupedUsers[departmentName]) {\n          groupedUsers[departmentName] = [];\n        }\n        groupedUsers[departmentName].push(user);\n      });\n      \n      return groupedUsers;\n    })\n    \n    // 路由\n    const route = useRoute()\n    \n    // 定义一个refreshInterval的引用，以便在组件卸载时清除\n    let refreshInterval = null\n    \n    // 组件卸载时清除定时器\n    onBeforeUnmount(() => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval)\n      }\n    })\n    \n    // 路由相关操作\n    onMounted(async () => {\n      try {\n        // 先加载用户数据\n        const userData = await fetchCurrentUser()\n        \n        // 如果获取用户信息失败，显示错误并返回\n        if (!userData) {\n          ElMessage.error('无法加载用户信息，请刷新页面重试')\n          return\n        }\n        \n        console.log('组件挂载时获取的用户信息:', userData)\n        \n        // 确保用户数据已经更新\n        if (!userInfo.value || !userInfo.value.id) {\n          console.error('用户数据未正确加载:', userInfo.value)\n          ElMessage.error('用户数据加载异常，请刷新页面重试')\n          return\n        } else {\n          console.log('当前用户数据已正确加载:', userInfo.value)\n        }\n        \n        // 加载所有用户列表\n        await loadAllUsers()\n        \n        // 再加载聊天会话列表\n        await loadChatSessions()\n        \n        // 检查URL参数中是否有会话ID\n        const sessionId = route.query.session || route.query.id\n        if (sessionId) {\n          // 查找对应的联系人\n          const foundContact = contacts.value.find(c => c.id === parseInt(sessionId))\n          if (foundContact) {\n            // 选中该联系人\n            selectedContact.value = foundContact.id\n            // 加载聊天记录\n            await loadChatMessages(sessionId)\n          } else {\n            // 如果未找到对应联系人，尝试直接加载会话\n            console.log('通过ID直接加载聊天会话:', sessionId)\n            await loadChatMessages(sessionId)\n          }\n        }\n      \n        // 设置定时刷新\n        refreshInterval = setInterval(async () => {\n          if (selectedContact.value) {\n            await loadChatMessages(selectedContact.value)\n          }\n          await loadChatSessions()\n        }, 30000)\n        \n        // 初始滚动到底部\n        await nextTick()\n        scrollToBottom()\n      } catch (error) {\n        console.error('初始化聊天组件失败:', error)\n        ElMessage.error('初始化聊天组件失败: ' + error.message)\n      }\n    })\n    \n    // 获取当前用户信息\n    const fetchCurrentUser = async () => {\n      try {\n        console.log('开始获取当前用户信息...')\n        \n        // 检查localStorage中是否有token\n        const token = localStorage.getItem('token')\n        if (!token) {\n          console.warn('本地存储中没有找到认证token')\n          ElMessage.warning('未登录或登录已过期，请重新登录')\n          return null\n        }\n        \n        const response = await request({\n          url: '/api/auth/users/me/',\n          method: 'get'\n        })\n        \n        console.log('获取用户信息响应:', response)\n        \n        // 检查响应格式并获取用户数据\n        let userData = null\n        if (response.data && response.data.id) {\n          // 直接从data字段获取用户数据\n          userData = response.data\n          console.log('从data字段获取用户数据:', userData)\n        } else if (response.data && response.data.data && response.data.data.id) {\n          // 从嵌套data字段获取用户数据\n          userData = response.data.data\n          console.log('从嵌套data字段获取用户数据:', userData)\n        } else if (response.id) {\n          // 直接响应就是用户数据\n          userData = response\n          console.log('直接获取用户数据:', userData)\n        } else {\n          console.error('获取用户信息响应格式异常:', response)\n          throw new Error('用户信息格式异常')\n        }\n        \n        if (!userData || !userData.id) {\n          console.error('获取的用户数据无效:', userData)\n          throw new Error('无效的用户数据')\n        }\n        \n        // 不使用未定义的mutation，而是直接更新本地状态\n        userInfo.value = userData\n        \n        // 保存到localStorage以便持久化\n        localStorage.setItem('user', JSON.stringify(userData))\n        \n        console.log('用户数据已更新:', userInfo.value)\n        return userData\n      } catch (error) {\n        console.error('获取当前用户信息失败:', error)\n        ElMessage.error('获取用户信息失败: ' + (error.message || '未知错误'))\n        return null\n      }\n    }\n    \n    // 加载聊天会话列表\n    const loadChatSessions = async () => {\n      try {\n        loading.value = true\n        console.log('正在加载聊天会话列表...')\n        \n        const response = await getChatSessions()\n        console.log('获取聊天会话响应:', response)\n        \n        // 确保我们有响应数据\n        if (!response) {\n          console.error('获取聊天会话返回空响应')\n          contacts.value = []\n          return\n        }\n        \n        let data\n        if (response.success && response.data) {\n          data = response.data\n          console.log('使用包装格式的聊天数据:', data)\n        } else {\n          data = response\n          console.log('使用直接返回的聊天数据:', data)\n        }\n        \n        // 转换数据格式\n        chatSessions.value = data\n        \n        // 构建联系人列表\n        if (data && Array.isArray(data.results)) {\n          console.log('处理分页数据结构, 共有会话数:', data.results.length)\n          // 处理分页数据结构\n          contacts.value = data.results.map(session => {\n            // 找到对方用户（非当前用户）\n            let otherParticipant = null\n            if (session.participants && Array.isArray(session.participants)) {\n              if (userInfo.value && userInfo.value.id) {\n                otherParticipant = session.participants.find(\n                  p => p.user && p.user.id !== userInfo.value.id\n                )\n              } else {\n                // 如果没有当前用户信息，使用第一个参与者\n                otherParticipant = session.participants[0]\n              }\n            }\n            \n            // 如果是群聊，使用群聊信息\n            if (session.is_group) {\n              return {\n                id: session.id,\n                name: session.title || '群聊',\n                initial: (session.title || '群聊')[0],\n                avatar: '',\n                color: getRandomColor(session.id),\n                status: 'online',\n                lastMessage: session.last_message ? session.last_message.content : '',\n                lastTime: session.last_message ? formatMessageTime(session.last_message.created_at) : formatMessageTime(session.updated_at),\n                unread: session.unread_count,\n                isGroup: true\n              }\n            }\n            \n            // 单聊，使用对方信息\n            if (otherParticipant) {\n              const user = otherParticipant.user\n              return {\n                id: session.id,\n                userId: user.id, // 添加用户ID，用于检查是否是自己\n                name: ((user.first_name || '') + ' ' + (user.last_name || '')).trim() || user.username || '未命名联系人',\n                initial: ((user.first_name || user.username || '未命名联系人')[0]),\n                avatar: user.avatar || '',\n                color: getRandomColor(user.id),\n                status: 'online',\n                lastMessage: session.last_message ? session.last_message.content : '',\n                lastTime: session.last_message ? formatMessageTime(session.last_message.created_at) : formatMessageTime(session.updated_at),\n                unread: session.unread_count,\n                isGroup: false,\n                department: user.department // 添加部门信息\n              }\n            }\n            \n            // 如果没有其他参与者（理论上不应该发生）\n            return {\n              id: session.id,\n              name: session.title || '聊天',\n              initial: (session.title || '聊天')[0],\n              avatar: '',\n              color: getRandomColor(session.id),\n              status: 'online',\n              lastMessage: session.last_message ? session.last_message.content : '',\n              lastTime: session.last_message ? formatMessageTime(session.last_message.created_at) : formatMessageTime(session.updated_at),\n              unread: session.unread_count,\n              isGroup: session.is_group\n            }\n          })\n        } else if (data && Array.isArray(data)) {\n          console.log('处理非分页数据结构, 共有会话数:', data.length)\n          // 处理非分页数据结构\n          contacts.value = data.map(session => {\n            // 找到对方用户（非当前用户）\n            let otherParticipant = null\n            if (session.participants && Array.isArray(session.participants)) {\n              if (userInfo.value && userInfo.value.id) {\n                otherParticipant = session.participants.find(\n                  p => p.user && p.user.id !== userInfo.value.id\n                )\n              } else {\n                // 如果没有当前用户信息，使用第一个参与者\n                otherParticipant = session.participants[0]\n              }\n            }\n            \n            // 如果是群聊，使用群聊信息\n            if (session.is_group) {\n              return {\n                id: session.id,\n                name: session.title || '群聊',\n                initial: (session.title || '群聊')[0],\n                avatar: '',\n                color: getRandomColor(session.id),\n                status: 'online',\n                lastMessage: session.last_message ? session.last_message.content : '',\n                lastTime: session.last_message ? formatMessageTime(session.last_message.created_at) : formatMessageTime(session.updated_at),\n                unread: session.unread_count,\n                isGroup: true\n              }\n            }\n            \n            // 单聊，使用对方信息\n            if (otherParticipant) {\n              const user = otherParticipant.user\n              return {\n                id: session.id,\n                name: ((user.first_name || '') + ' ' + (user.last_name || '')).trim() || user.username || '未命名联系人',\n                initial: ((user.first_name || user.username || '未命名联系人')[0]),\n                avatar: user.avatar || '',\n                color: getRandomColor(user.id),\n                status: 'online',\n                lastMessage: session.last_message ? session.last_message.content : '',\n                lastTime: session.last_message ? formatMessageTime(session.last_message.created_at) : formatMessageTime(session.updated_at),\n                unread: session.unread_count,\n                isGroup: false\n              }\n            }\n            \n            // 如果没有其他参与者（理论上不应该发生）\n            return {\n              id: session.id,\n              name: session.title || '聊天',\n              initial: (session.title || '聊天')[0],\n              avatar: '',\n              color: getRandomColor(session.id),\n              status: 'online',\n              lastMessage: session.last_message ? session.last_message.content : '',\n              lastTime: session.last_message ? formatMessageTime(session.last_message.created_at) : formatMessageTime(session.updated_at),\n              unread: session.unread_count,\n              isGroup: session.is_group\n            }\n          })\n        } else {\n          // 如果没有有效数据\n          console.error('获取聊天会话格式异常或为空:', data)\n          contacts.value = []\n        }\n        \n        console.log('处理后的联系人列表:', contacts.value)\n        \n        // 如果有未读消息，按未读数量排序\n        if (contacts.value.length > 0) {\n          contacts.value.sort((a, b) => b.unread - a.unread)\n        }\n      } catch (error) {\n        console.error('加载聊天会话失败:', error)\n        ElMessage.error('加载聊天会话失败: ' + (error.message || '未知错误'))\n        contacts.value = []\n      } finally {\n        loading.value = false\n      }\n    }\n    \n    // 加载聊天消息\n    const loadChatMessages = async (chatId) => {\n      if (!chatId) {\n        console.error('无法加载消息: chatId为空')\n        return\n      }\n      \n      try {\n        loading.value = true\n        console.log(`正在加载聊天会话 ${chatId} 的消息...`)\n        \n        const response = await getChatSession(chatId)\n        console.log('聊天会话详情响应:', response)\n        \n        if (!response) {\n          console.error('获取聊天会话详情返回空响应')\n          messages.value = []\n          return\n        }\n        \n        // 处理不同的响应格式\n        let messageData = []\n        let sessionData = null\n        \n        if (response.data && response.data.messages) {\n          // 标准格式：响应直接包含messages字段\n          messageData = response.data.messages\n          sessionData = response.data\n          console.log('标准格式消息数据，消息数量:', messageData.length)\n        } else if (response.data && response.data.data && response.data.data.messages) {\n          // 包装格式：{success: true, data: {messages: [...]}}\n          messageData = response.data.data.messages\n          sessionData = response.data.data\n          console.log('包装格式消息数据，消息数量:', messageData.length)\n        } else if (response.messages) {\n          // 直接返回格式: {messages: [...]}\n          messageData = response.messages\n          sessionData = response\n          console.log('直接返回格式消息数据，消息数量:', messageData.length)\n        } else {\n          console.warn('无法识别的消息数据格式:', response)\n          console.log('尝试检查是否有其他可能的消息字段...')\n          \n          // 尝试查找其他可能的消息字段\n          const possibleMessageFields = ['message', 'chat_messages', 'chats', 'content']\n          for (const field of possibleMessageFields) {\n            if (response[field] && Array.isArray(response[field])) {\n              console.log(`找到可能的消息字段 ${field}，使用此字段数据`)\n              messageData = response[field]\n              sessionData = response\n              break\n            } else if (response.data && response.data[field] && Array.isArray(response.data[field])) {\n              console.log(`在data字段中找到可能的消息字段 ${field}，使用此字段数据`)\n              messageData = response.data[field]\n              sessionData = response.data\n              break\n            }\n          }\n          \n          if (messageData.length === 0) {\n            console.warn('未找到任何消息数据，使用空数组')\n          }\n        }\n        \n        // 记录会话和消息数据\n        console.log('处理后的会话数据:', sessionData)\n        console.log('处理后的消息数据:', messageData)\n        \n        // 如果会话不在联系人列表中，添加它\n        if (sessionData && !contacts.value.some(c => c.id === parseInt(chatId))) {\n          console.log('会话不在联系人列表中，添加它:', sessionData)\n          \n          // 创建临时联系人对象\n          const session = sessionData\n          // 找到对方用户（非当前用户）\n          let otherParticipant = null\n          \n          // 确保 session.participants 存在且是数组\n          if (session.participants && Array.isArray(session.participants) && session.participants.length > 0 && userInfo.value) {\n            otherParticipant = session.participants.find(p => p.user && p.user.id !== userInfo.value.id)\n          }\n          \n          let tempContact = null\n          \n          // 如果是群聊，使用群聊信息\n          if (session.is_group) {\n            tempContact = {\n              id: parseInt(chatId),\n              name: session.title || '群聊',\n              initial: (session.title || '群聊')[0],\n              avatar: '',\n              color: getRandomColor(parseInt(chatId)),\n              status: 'online',\n              lastMessage: session.last_message ? session.last_message.content : '',\n              lastTime: formatMessageTime(session.updated_at),\n              unread: 0,\n              isGroup: true\n            }\n          // 单聊，使用对方信息\n          } else if (otherParticipant && otherParticipant.user) {\n            const user = otherParticipant.user\n            tempContact = {\n              id: parseInt(chatId),\n              name: ((user.first_name || '') + ' ' + (user.last_name || '')).trim() || user.username || '未命名联系人',\n              initial: ((user.first_name || user.username || '未命名联系人')[0]),\n              avatar: user.avatar || '',\n              color: getRandomColor(user.id),\n              status: 'online',\n              lastMessage: session.last_message ? session.last_message.content : '',\n              lastTime: formatMessageTime(session.updated_at),\n              unread: 0,\n              isGroup: false\n            }\n          } else {\n            // 如果无法找到对方信息，使用默认值\n            tempContact = {\n              id: parseInt(chatId),\n              name: session.title || '聊天',\n              initial: (session.title || '聊天')[0],\n              avatar: '',\n              color: getRandomColor(parseInt(chatId)),\n              status: 'online',\n              lastMessage: '',\n              lastTime: formatMessageTime(session.updated_at),\n              unread: 0,\n              isGroup: session.is_group\n            }\n          }\n          \n          // 添加临时联系人到列表\n          if (tempContact) {\n            contacts.value.unshift(tempContact)\n            console.log('添加临时联系人:', tempContact)\n          }\n        }\n        \n        // 更新组件数据\n        messages.value = messageData || []\n        currentChatId.value = parseInt(chatId)\n        selectedContact.value = parseInt(chatId)\n        \n        // 滚动到底部\n        nextTick(() => {\n          scrollToBottom()\n        })\n      } catch (error) {\n        console.error('加载会话详情失败:', error)\n        \n        let errorMessage = '加载聊天消息失败'\n        if (error.response) {\n          const status = error.response.status\n          if (status === 404) {\n            errorMessage = '聊天会话不存在或已被删除'\n          } else if (status === 403) {\n            errorMessage = '无权访问此聊天会话'\n          } else if (error.response.data && error.response.data.message) {\n            errorMessage = error.response.data.message\n          }\n        } else if (error.message) {\n          errorMessage = error.message\n        }\n        \n        ElMessage.error(errorMessage)\n        messages.value = []\n      } finally {\n        loading.value = false\n      }\n    }\n    \n    // 刷新聊天会话列表\n    const refreshChatSessions = async () => {\n      // 更新用户列表\n      await loadAllUsers()\n      \n      // 更新聊天会话\n      await loadChatSessions()\n      \n      // 如果有当前聊天ID，确保选中正确的联系人\n      if (currentChatId.value) {\n        const contact = contacts.value.find(c => c.id === currentChatId.value)\n        if (contact) {\n          selectedContact.value = contact.id\n        }\n      }\n    }\n    \n    // 确保消息容器滚动到底部\n    const scrollToBottom = () => {\n      if (messageContainer.value) {\n        messageContainer.value.scrollTop = messageContainer.value.scrollHeight\n      }\n    }\n    \n    // 在选择联系人后，滚动到底部\n    const selectContact = async (contact) => {\n      // 检查是否尝试与自己聊天\n      if (!contact.isGroup && userInfo.value && contact.userId === userInfo.value.id) {\n        ElMessage.warning('不能与自己聊天')\n        return\n      }\n      \n      console.log('选择联系人:', contact)\n      \n      // 处理两种类型的ID：现有对话ID和用户ID前缀的情况\n      let contactId = contact.id\n      \n      // 检查是否已有该联系人的对话\n      if (typeof contactId === 'string' && contactId.startsWith('user_')) {\n        // 这是直接选择了用户，而不是现有的聊天会话\n        let userId = contact.userId || contact.id.replace('user_', '')\n        console.log('尝试查找与用户的现有对话:', userId)\n        \n        // 尝试在现有会话中查找与该用户的对话\n        const existingChat = contacts.value.find(c => \n          !c.isGroup && \n          ((c.userId && c.userId == userId) || \n          (c.user && c.user.id == userId))\n        )\n        \n        if (existingChat) {\n          console.log('找到与用户的现有对话:', existingChat)\n          contactId = existingChat.id\n        } else {\n          console.log('未找到与用户的现有对话，创建新对话')\n          \n          // 创建新的聊天会话\n          try {\n            const response = await request({\n              url: '/api/chat/sessions/',\n              method: 'post',\n              data: {\n                participant_ids: [userId],\n                is_group: false\n              }\n            })\n            \n            console.log('创建会话响应:', response)\n            \n            // 处理API响应\n            let newSession = null\n            \n            if (response && response.data) {\n              newSession = response.data\n            } else if (response && response.id) {\n              newSession = response\n            }\n            \n            if (newSession && newSession.id) {\n              // 创建临时联系人对象\n              const tempContact = {\n                id: newSession.id,\n                userId: userId,\n                name: contact.name,\n                initial: contact.initial,\n                avatar: contact.avatar,\n                color: contact.color || getRandomColor(userId),\n                status: 'online',\n                lastMessage: '',\n                lastTime: formatMessageTime(new Date()),\n                unread: 0,\n                isGroup: false,\n                department: contact.department\n              }\n              \n              // 添加到联系人列表\n              contacts.value.unshift(tempContact)\n              \n              // 更新选中的联系人\n              contactId = newSession.id\n              ElMessage.success('已创建新的对话')\n            } else {\n              throw new Error('创建会话返回无效数据')\n            }\n          } catch (error) {\n            console.error('创建新会话失败:', error)\n            ElMessage.error('无法创建新对话: ' + (error.message || '未知错误'))\n            return\n          }\n        }\n      }\n      \n      // 加载选中的联系人\n      selectedContact.value = contactId\n      messageInput.value = ''\n      messages.value = []\n      \n      // 加载消息\n      try {\n        await loadChatMessages(contactId)\n        \n        // 滚动到底部\n        nextTick(() => {\n          scrollToBottom()\n        })\n      } catch (error) {\n        console.error('加载聊天消息失败:', error)\n        ElMessage.error('无法加载对话内容：' + (error.message || '未知错误'))\n      }\n    }\n    \n    // 在消息列表更新后，滚动到底部\n    watch(messages, () => {\n      nextTick(() => {\n        scrollToBottom()\n      })\n    })\n    \n    // 发送消息\n    const sendMessage = async () => {\n      if (!messageInput.value.trim() || !currentChatId.value) return\n      \n      try {\n        // 检查当前用户信息是否存在\n        if (!userInfo.value || !userInfo.value.id) {\n          console.log('当前用户信息不存在，尝试重新获取...')\n          // 尝试重新获取用户信息\n          const userData = await fetchCurrentUser()\n          if (!userData || !userData.id) {\n            throw new Error('无法获取当前用户信息，请刷新页面重试')\n          }\n          \n          console.log('成功获取用户信息:', userData)\n        }\n        \n        // 创建临时消息对象\n        // 再次检查用户信息是否已更新\n        if (!userInfo.value || !userInfo.value.id) {\n          throw new Error('用户信息未更新，请刷新页面重试')\n        }\n        \n        // 记录当前会话ID\n        console.log('当前会话ID:', currentChatId.value, '类型:', typeof currentChatId.value)\n        \n        const tempMessage = {\n          id: 'temp-' + Date.now(),\n          content: messageInput.value.trim(),\n          sender: {\n            id: userInfo.value.id,\n            username: userInfo.value.username || '用户',\n            first_name: userInfo.value.first_name || '',\n            last_name: userInfo.value.last_name || ''\n          },\n          message_type: 'text',\n          created_at: new Date().toISOString(),\n          is_temp: true\n        }\n        \n        // 先将临时消息添加到列表中\n        messages.value.push(tempMessage)\n        \n        // 清空输入框\n        const messageCopy = messageInput.value\n        messageInput.value = ''\n        \n        // 滚动到底部\n        await nextTick()\n        scrollToBottom()\n        \n        // 详细记录发送信息\n        console.log('准备发送消息到服务器，会话ID:', currentChatId.value, '消息内容:', messageCopy)\n        \n        try {\n          // 发送消息到服务器\n          const response = await sendTextMessage({\n            chat: currentChatId.value,\n            content: messageCopy\n          })\n          console.log('发送消息响应:', response)\n          \n          // 适应不同的响应格式\n          let messageData = null\n          \n          if (response && response.success && response.data) {\n            // 标准包装格式: {success: true, data: {}}\n            messageData = response.data\n          } else if (response && response.id) {\n            // 包含ID的DRF格式\n            messageData = response\n          } else if (response && response.chat) {\n            // 新API格式: {chat, content, message_type, file, ...}\n            // 构造完整的消息对象\n            messageData = {\n              id: response.id || 'msg-' + Date.now(),\n              content: response.content,\n              message_type: response.message_type,\n              file: response.file,\n              created_at: response.created_at || new Date().toISOString(),\n              sender: {\n                id: userInfo.value.id,\n                username: userInfo.value.username || '用户',\n                first_name: userInfo.value.first_name || '',\n                last_name: userInfo.value.last_name || ''\n              }\n            }\n          } else {\n            console.warn('无法识别的消息响应格式:', response)\n            throw new Error('发送消息响应格式异常')\n          }\n          \n          // 用服务器返回的消息替换临时消息\n          const tempIndex = messages.value.findIndex(m => m.id === tempMessage.id)\n          if (tempIndex !== -1) {\n            messages.value.splice(tempIndex, 1, messageData)\n          } else {\n            messages.value.push(messageData)\n          }\n          \n          // 更新联系人最新消息\n          const contactIndex = contacts.value.findIndex(c => c.id === selectedContact.value)\n          if (contactIndex !== -1) {\n            contacts.value[contactIndex].lastMessage = messageCopy\n            contacts.value[contactIndex].lastTime = formatMessageTime(new Date())\n          }\n          \n          // 再次滚动到底部\n          await nextTick()\n          scrollToBottom()\n        } catch (error) {\n          // 详细记录发送消息错误\n          console.error('发送消息API调用失败:', error)\n          if (error.response) {\n            console.error('错误状态码:', error.response.status)\n            console.error('错误详情:', error.response.data)\n            console.error('请求URL:', error.response.config.url)\n            console.error('请求方法:', error.response.config.method)\n            console.error('请求数据:', error.response.config.data)\n            \n            if (error.response.status === 404) {\n              // 404错误处理\n              console.error('API端点不存在，检查URL配置是否正确')\n              ElMessage.error('消息发送失败: API端点不存在，请联系管理员')\n            } else {\n              throw error  // 将错误传递给外部catch\n            }\n          } else {\n            throw error  // 将错误传递给外部catch\n          }\n        }\n      } catch (error) {\n        console.error('发送消息失败:', error)\n        \n        // 移除临时消息\n        messages.value = messages.value.filter(m => !m.is_temp)\n        \n        // 将消息内容放回输入框\n        messageInput.value = error.savedMessage || messageInput.value\n        \n        ElMessage.error('发送消息失败，请重试')\n      }\n    }\n    \n    // 打开文件上传\n    const openFileUpload = () => {\n      fileInput.value.click()\n    }\n    \n    // 打开图片上传\n    const openImageUpload = () => {\n      imageInput.value.click()\n    }\n    \n    // 处理文件上传\n    const handleFileUpload = async (event) => {\n      const file = event.target.files[0]\n      if (!file || !currentChatId.value) return\n      \n      try {\n        await sendFileMessage(\n          currentChatId.value, \n          `发送文件: ${file.name}`, \n          file\n        )\n        \n        // 重新加载消息\n        loadChatMessages(currentChatId.value)\n        \n        // 清空文件输入\n        event.target.value = ''\n      } catch (error) {\n        console.error('发送文件失败:', error)\n        ElMessage.error('发送文件失败')\n      }\n    }\n    \n    // 处理图片上传\n    const handleImageUpload = async (event) => {\n      const file = event.target.files[0]\n      if (!file || !currentChatId.value) return\n      \n      try {\n        await sendImageMessage(\n          currentChatId.value, \n          `发送图片`, \n          file\n        )\n        \n        // 重新加载消息\n        loadChatMessages(currentChatId.value)\n        \n        // 清空文件输入\n        event.target.value = ''\n      } catch (error) {\n        console.error('发送图片失败:', error)\n        ElMessage.error('发送图片失败')\n      }\n    }\n    \n    // 打开知识库对话框\n    const openKnowledgeDialog = async () => {\n      knowledgeDialogVisible.value = true\n      await loadKnowledgeList()\n    }\n    \n    // 加载知识库列表\n    const loadKnowledgeList = async () => {\n      try {\n        knowledgeLoading.value = true\n        const { data } = await getKnowledgeList()\n        knowledgeList.value = data\n      } catch (error) {\n        console.error('加载知识库列表失败:', error)\n        ElMessage.error('加载知识库列表失败')\n      } finally {\n        knowledgeLoading.value = false\n      }\n    }\n    \n    // 选择知识库文件\n    const selectKnowledge = (row) => {\n      selectedKnowledge.value = row\n    }\n    \n    // 分享知识库文件\n    const shareKnowledge = async (knowledge) => {\n      if (!currentChatId.value) return\n      \n      try {\n        await sendKnowledgeMessage(\n          currentChatId.value,\n          `分享知识库文件: ${knowledge.title}`,\n          knowledge.id\n        )\n        \n        // 关闭对话框\n        knowledgeDialogVisible.value = false\n        \n        // 重新加载消息\n        loadChatMessages(currentChatId.value)\n      } catch (error) {\n        console.error('分享知识库文件失败:', error)\n        ElMessage.error('分享知识库文件失败')\n      }\n    }\n    \n    // 下载文件\n    const downloadFile = async (message) => {\n      try {\n        const response = await downloadMessageFile(message.id)\n        \n        // 创建下载链接\n        const url = window.URL.createObjectURL(new Blob([response.data]))\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', message.file_name || 'download')\n        document.body.appendChild(link)\n        link.click()\n        document.body.removeChild(link)\n      } catch (error) {\n        console.error('下载文件失败:', error)\n        ElMessage.error('下载文件失败')\n      }\n    }\n    \n    // 查看知识库文件\n    const viewKnowledge = (message) => {\n      if (message.knowledge_detail) {\n        // 可以跳转到知识库详情页面\n        ElMessageBox.alert(\n          `标题: ${message.knowledge_detail.title}<br>描述: ${message.knowledge_detail.description || '无'}`, \n          '知识库文件', \n          {\n            dangerouslyUseHTMLString: true,\n            confirmButtonText: '确定'\n          }\n        )\n      }\n    }\n    \n    // 获取发送者颜色\n    const getSenderColor = (sender) => {\n      return getRandomColor(sender.id)\n    }\n    \n    // 获取发送者首字母\n    const getSenderInitial = (sender) => {\n      return (sender.first_name || sender.username)[0]\n    }\n    \n    // 根据ID生成随机颜色\n    const getRandomColor = (id) => {\n      const colors = [\n        '#007bff', '#28a745', '#dc3545', '#fd7e14', \n        '#6f42c1', '#20c997', '#17a2b8', '#6c757d'\n      ]\n      \n      // 使用ID作为索引，确保同一用户颜色一致\n      const index = typeof id === 'number' ? id % colors.length : 0\n      return colors[index]\n    }\n    \n    // 格式化消息时间\n    const formatMessageTime = (timestamp) => {\n      if (!timestamp) return ''\n      \n      const date = new Date(timestamp)\n      const now = new Date()\n      const diff = now - date\n      \n      // 今天内的消息显示时间\n      if (diff < 24 * 60 * 60 * 1000) {\n      const hours = date.getHours().toString().padStart(2, '0')\n      const minutes = date.getMinutes().toString().padStart(2, '0')\n      return `${hours}:${minutes}`\n      }\n      \n      // 一周内的消息显示星期几\n      if (diff < 7 * 24 * 60 * 60 * 1000) {\n        const days = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n        return days[date.getDay()]\n      }\n      \n      // 更早的消息显示日期\n      return `${date.getMonth() + 1}月${date.getDate()}日`\n    }\n    \n    // 格式化日期\n    const formatDate = (timestamp) => {\n      if (!timestamp) return ''\n      \n      const date = new Date(timestamp)\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\n    }\n    \n    // 格式化文件大小\n    const formatFileSize = (sizeInKB) => {\n      if (sizeInKB < 1024) {\n        return `${sizeInKB} KB`\n      } else {\n        return `${(sizeInKB / 1024).toFixed(2)} MB`\n      }\n    }\n    \n    // 获取状态文字\n    const getStatusText = (status) => {\n      const statusMap = {\n        'online': '在线',\n        'offline': '离线',\n        'busy': '忙碌',\n        'away': '离开'\n      }\n      return statusMap[status] || status\n    }\n    \n    // 添加强制刷新方法\n    const forceRefresh = async () => {\n      try {\n        ElMessage.info('正在强制刷新数据...')\n        \n        // 重新获取用户信息\n        const userData = await fetchCurrentUser()\n        \n        if (!userData) {\n          ElMessage.error('无法获取用户信息，请尝试重新登录')\n          return\n        }\n        \n        // 重新加载聊天会话\n        await loadChatSessions()\n        \n        if (contacts.value.length === 0) {\n          ElMessage.warning('未找到任何聊天会话，您可能还没有开始任何对话')\n        } else {\n          ElMessage.success('刷新成功！找到 ' + contacts.value.length + ' 个聊天会话')\n        }\n      } catch (error) {\n        console.error('强制刷新失败:', error)\n        ElMessage.error('刷新失败: ' + (error.message || '未知错误'))\n      }\n    }\n    \n    // 加载所有用户\n    const loadAllUsers = async () => {\n      try {\n        console.log('正在加载所有用户列表...')\n        \n        // 尝试直接获取所有用户，不需要公司ID\n        try {\n          console.log('尝试直接获取所有用户...')\n          const response = await request({\n            url: '/api/auth/users/',\n            method: 'get'\n          })\n          \n          console.log('用户API响应:', response)\n          \n          // 处理响应数据\n          let users = []\n          if (response && response.results) {\n            users = response.results\n          } else if (Array.isArray(response)) {\n            users = response\n          } else if (response && response.data) {\n            if (Array.isArray(response.data)) {\n              users = response.data\n            } else if (response.data.results) {\n              users = response.data.results\n            }\n          }\n          \n          if (users && users.length > 0) {\n            console.log(`成功获取到${users.length}个用户`)\n            allColleagues.value = users\n            return\n          }\n        } catch (error) {\n          console.error('获取用户列表失败:', error)\n        }\n        \n        // 如果直接获取失败，使用模拟数据\n        console.warn('API获取用户列表失败，使用模拟数据')\n        allColleagues.value = [\n          {\n            id: 1,\n            username: 'zhangsan',\n            first_name: '张',\n            last_name: '三',\n            department: '技术部',\n            avatar: ''\n          },\n          {\n            id: 2,\n            username: 'lisi',\n            first_name: '李',\n            last_name: '四',\n            department: '市场部',\n            avatar: ''\n          },\n          {\n            id: 3,\n            username: 'wangwu',\n            first_name: '王',\n            last_name: '五',\n            department: '财务部',\n            avatar: ''\n          },\n          {\n            id: 4,\n            username: 'zhaoliu',\n            first_name: '赵',\n            last_name: '六',\n            department: '',\n            avatar: ''\n          }\n        ]\n        console.log('已加载模拟数据')\n      } catch (error) {\n        console.error('加载用户列表过程中出错:', error)\n        // 确保我们至少有一些数据\n        allColleagues.value = [\n          { id: 1, username: 'user1', first_name: '用户', last_name: '1', department: '技术部' },\n          { id: 2, username: 'user2', first_name: '用户', last_name: '2', department: '市场部' },\n          { id: 3, username: 'user3', first_name: '用户', last_name: '3', department: '财务部' },\n          { id: 4, username: 'user4', first_name: '用户', last_name: '4', department: '' }\n        ]\n      }\n    }\n    \n    // 日程事件相关\n    const hiddenCalendarEvents = ref([])\n    \n    // 处理日程事件添加成功\n    const handleCalendarEventAdded = () => {\n      // 可以在这里做一些额外处理，例如通知其他人等\n    }\n    \n    // 处理日程事件隐藏\n    const handleCalendarEventHidden = (messageId) => {\n      hiddenCalendarEvents.value.push(messageId)\n    }\n    \n    return {\n      searchQuery,\n      activeTab,\n      selectedContact,\n      tabs,\n      contacts,\n      currentContact,\n      filteredContacts,\n      messages,\n      messageInput,\n      messageContainer,\n      fileInput,\n      imageInput,\n      currentUser,\n      userInfo,\n      userId,\n      knowledgeDialogVisible,\n      knowledgeLoading,\n      knowledgeList,\n      loading,\n      // 图标\n      Search,\n      Phone,\n      VideoCamera,\n      InfoFilled,\n      Document,\n      PictureFilled,\n      FolderOpened,\n      Microphone,\n      Position,\n      ChatDotSquare,\n      Reading,\n      UserFilled,\n      ChatLineSquare,\n      Refresh,\n      MoreFilled,\n      // 方法\n      sendMessage,\n      getStatusText,\n      selectContact,\n      openFileUpload,\n      openImageUpload,\n      handleFileUpload,\n      handleImageUpload,\n      openKnowledgeDialog,\n      selectKnowledge,\n      shareKnowledge,\n      downloadFile,\n      viewKnowledge,\n      getSenderColor,\n      getSenderInitial,\n      formatMessageTime,\n      formatDate,\n      formatFileSize,\n      refreshChatSessions,\n      forceRefresh,\n      groupedUsersByDepartment,\n      getActiveContacts,\n      loadAllUsers,\n      hiddenCalendarEvents,\n      handleCalendarEventAdded,\n      handleCalendarEventHidden\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  height: calc(100vh - 64px); /* 减去顶部导航栏的高度 */\n  width: 100%;\n  padding: 20px;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n\n.chat-card {\n  height: 100%;\n  width: 100%;\n  border-radius: 8px;\n  margin: 0;\n  overflow: hidden;\n  box-shadow: 0 2px 12px var(--shadow-color) !important;\n}\n\n.chat-card :deep(.el-card__body) {\n  height: 100%;\n  padding: 0;\n}\n\n.chat-layout {\n  display: flex;\n  height: 100%;\n  width: 100%;\n}\n\n/* 侧边栏样式 */\n.chat-sidebar {\n  width: 280px;\n  border-right: 1px solid var(--border-color);\n  display: flex;\n  flex-direction: column;\n  background-color: var(--bg-color);\n  height: 100%;\n  overflow: hidden;\n}\n\n.search-box {\n  padding: 15px;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.chat-tabs {\n  display: flex;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.chat-tab {\n  flex: 1;\n  text-align: center;\n  padding: 12px;\n  cursor: pointer;\n  font-weight: 500;\n  color: var(--text-color-secondary);\n  transition: all 0.3s ease;\n}\n\n.chat-tab.active {\n  color: var(--el-color-primary);\n  border-bottom: 2px solid var(--el-color-primary);\n}\n\n.contacts-list {\n  flex: 1;\n  overflow-y: auto;\n  padding: 0;\n}\n\n.contact-item {\n  display: flex;\n  padding: 15px;\n  border-bottom: 1px solid var(--border-color-light);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border-color: var(--border-color);\n}\n\n.contact-item:hover {\n  background-color: var(--hover-color);\n}\n\n.contact-item.active {\n  background-color: var(--primary-color-light, #f0f7ff);\n}\n\n.contact-avatar {\n  position: relative;\n  margin-right: 12px;\n}\n\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-weight: bold;\n}\n\n.avatar.small {\n  width: 32px;\n  height: 32px;\n  font-size: 12px;\n}\n\n.avatar-initial {\n  font-size: 16px;\n}\n\n.contact-status {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  border: 2px solid var(--bg-color);\n}\n\n.status-online {\n  background-color: #28a745;\n}\n\n.status-offline {\n  background-color: #6c757d;\n}\n\n.status-busy {\n  background-color: #dc3545;\n}\n\n.status-away {\n  background-color: #fd7e14;\n}\n\n.contact-info {\n  flex: 1;\n  overflow: hidden;\n}\n\n.contact-name {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n}\n\n.contact-name span {\n  font-weight: 500;\n}\n\n.time {\n  font-size: 12px;\n  color: var(--text-color-tertiary);\n}\n\n.contact-message {\n  display: flex;\n  justify-content: space-between;\n  color: var(--text-color-secondary);\n  font-size: 13px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.message-badge {\n  margin-left: 5px;\n}\n\n/* 聊天内容样式 */\n.chat-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--bg-color-secondary);\n  height: 100%;\n  overflow: hidden;\n}\n\n.chat-header {\n  display: flex;\n  align-items: center;\n  padding: 15px;\n  border-bottom: 1px solid var(--border-color);\n  background-color: var(--bg-color);\n}\n\n.chat-header .contact-info {\n  margin-right: auto;\n}\n\n.chat-header h6 {\n  margin: 0;\n  font-size: 16px;\n  color: var(--text-color);\n}\n\n.chat-header p {\n  margin: 0;\n  font-size: 12px;\n  color: var(--text-color-tertiary);\n}\n\n.chat-actions {\n  display: flex;\n  gap: 10px;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  max-height: calc(100% - 150px); /* 调整聊天框高度 */\n  display: flex;\n  flex-direction: column;\n}\n\n.message {\n  margin-bottom: 20px;\n}\n\n.message-container {\n  display: flex;\n}\n\n.message-sent .message-container {\n  flex-direction: row-reverse;\n}\n\n.message-avatar {\n  margin-right: 10px;\n  flex-shrink: 0;\n}\n\n.message-sent .message-avatar {\n  margin-right: 0;\n  margin-left: 10px;\n}\n\n.message-content-wrapper {\n  max-width: 70%;\n}\n\n.message-content {\n  padding: 12px 15px;\n  border-radius: 18px;\n  position: relative;\n  word-break: break-word;\n}\n\n.message-content.received {\n  background-color: var(--bg-color-tertiary);\n  border-top-left-radius: 4px;\n  color: var(--text-color);\n}\n\n.message-content.sent {\n  background-color: var(--el-color-primary);\n  color: white;\n  border-top-right-radius: 4px;\n}\n\n.message-time {\n  font-size: 12px;\n  color: var(--text-color-tertiary);\n  margin-top: 5px;\n  text-align: right;\n}\n\n.message-sent .message-time {\n  text-align: right;\n}\n\n.message-received .message-time {\n  text-align: left;\n}\n\n.message-image img {\n  max-width: 100%;\n  max-height: 300px;\n  border-radius: 8px;\n}\n\n.message-file {\n  display: flex;\n  align-items: center;\n  background-color: var(--bg-color-tertiary);\n  padding: 8px 12px;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.message-file .el-icon {\n  font-size: 24px;\n  margin-right: 10px;\n}\n\n.file-size {\n  margin-left: 8px;\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.message-knowledge {\n  display: flex;\n  align-items: center;\n  background-color: var(--bg-color-tertiary);\n  padding: 10px;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.message-knowledge .el-icon {\n  font-size: 24px;\n  margin-right: 10px;\n}\n\n.knowledge-info {\n  flex: 1;\n}\n\n.knowledge-title {\n  font-weight: 500;\n  margin-bottom: 5px;\n}\n\n.knowledge-desc {\n  font-size: 12px;\n  opacity: 0.8;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 200px;\n}\n\n.chat-input {\n  padding: 15px;\n  background-color: var(--bg-color);\n  border-top: 1px solid var(--border-color);\n  display: flex;\n  flex-direction: column;\n  min-height: 150px; /* 确保输入框有足够高度 */\n}\n\n.chat-tools {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n\n.input-area {\n  margin-bottom: 10px;\n  flex: 1;\n}\n\n.send-button {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.empty-chat {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #999;\n}\n\n.empty-illustration {\n  margin-bottom: 20px;\n  color: #ddd;\n}\n\n.empty-chat h4 {\n  margin: 0 0 10px;\n}\n\n.empty-chat p {\n  margin: 0;\n  font-size: 14px;\n}\n\n.empty-contacts {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #999;\n}\n\n.empty-icon {\n  margin-bottom: 20px;\n  color: #ddd;\n}\n\n.empty-contacts h4 {\n  margin: 0 0 10px;\n}\n\n.empty-contacts p {\n  margin: 0;\n  font-size: 14px;\n}\n\n.loading-container {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.empty-messages {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n}\n\n.loading-messages {\n  flex: 1;\n  padding: 20px;\n}\n\n.mt-3 {\n  margin-top: 15px;\n}\n\n.search-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.search-header .el-input {\n  flex: 1;\n}\n\n.chat-header-actions {\n  margin-bottom: 10px;\n}\n\n.refresh-action {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 5px;\n}\n\n.department-group {\n  margin-bottom: 10px;\n  border-color: var(--border-color);\n}\n\n.department-header {\n  padding: 5px 15px;\n  font-size: 13px;\n  color: var(--text-color-secondary);\n  background-color: var(--bg-color-tertiary);\n  border-radius: 4px;\n  margin-bottom: 5px;\n  font-weight: 500;\n  background-color: var(--bg-color-tertiary) !important;\n}\n\n.group-actions {\n  display: flex;\n  align-items: center;\n  margin-left: auto;\n  margin-right: 5px;\n}\n\n.group-action-btn {\n  padding: 6px;\n  color: #909399;\n}\n\n.group-action-btn:hover {\n  color: #409EFF;\n}\n\n/* 添加对话框全局样式以适配深色模式 */\n:deep(.el-dialog) {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n}\n\n:deep(.el-dialog__title) {\n  color: var(--text-color);\n}\n\n:deep(.el-dialog__body) {\n  color: var(--text-color);\n}\n\n/* 表格样式适配深色模式 */\n:deep(.el-table) {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n}\n\n:deep(.el-table th.el-table__cell) {\n  background-color: var(--bg-color-tertiary);\n}\n\n:deep(.el-table tr) {\n  background-color: var(--bg-color);\n}\n\n:deep(.el-table td.el-table__cell) {\n  background-color: var(--bg-color);\n  border-bottom: 1px solid var(--border-color);\n}\n\n/* 修复输入框和下拉菜单 */\n:deep(.el-select .el-input__wrapper) {\n  background-color: var(--bg-color-secondary);\n}\n\n:deep(.el-select-dropdown) {\n  background-color: var(--bg-color-secondary);\n  border-color: var(--border-color);\n}\n\n:deep(.el-select-dropdown__item) {\n  color: var(--text-color);\n}\n\n:deep(.el-select-dropdown__item.hover),\n:deep(.el-select-dropdown__item:hover) {\n  background-color: var(--hover-color);\n}\n\n:deep(.el-input__wrapper) {\n  background-color: var(--bg-color-secondary) !important;\n  box-shadow: 0 0 0 1px var(--border-color) inset;\n}\n\n:deep(.el-input__inner) {\n  color: var(--text-color);\n}\n\n:deep(.el-select__input) {\n  color: var(--text-color) !important;\n}\n\n:deep(.el-textarea__inner) {\n  background-color: var(--bg-color-secondary);\n  color: var(--text-color);\n  border-color: var(--border-color);\n}\n\n/* 修复空白提示和图标颜色 */\n.empty-icon {\n  color: var(--text-color-tertiary);\n}\n\n:deep(.el-icon) {\n  color: inherit;\n}\n\n:deep(.el-button--primary) {\n  color: white;\n}\n\n.chat-header h6 {\n  color: var(--text-color);\n}\n\n/* 修复badge和标签 */\n:deep(.el-badge__content) {\n  background-color: var(--error-color, #ef4444);\n}\n\n:deep(.el-tag) {\n  background-color: var(--primary-color-light);\n  border-color: var(--primary-color-light);\n  color: var(--primary-color);\n}\n\n/* 修复下拉菜单的样式 */\n:deep(.el-popper.is-light) {\n  background-color: var(--bg-color-tertiary);\n  border-color: var(--border-color);\n}\n\n:deep(.el-popper__arrow::before) {\n  background-color: var(--bg-color-tertiary);\n  border-color: var(--border-color);\n}\n\n/* 修复搜索框内图标颜色 */\n.search-box :deep(.el-input__prefix-inner) {\n  color: var(--text-color-tertiary);\n}\n\n/* 修复表单组件 */\n:deep(.el-input),\n:deep(.el-select) {\n  --el-fill-color-blank: var(--bg-color-tertiary);\n  --el-text-color-regular: var(--text-color);\n  --el-border-color: var(--border-color);\n  --el-border-color-hover: var(--primary-color);\n  --el-fill-color-light: var(--bg-color-tertiary);\n}\n\n/* 修复部门组标题 */\n.department-header {\n  background-color: var(--bg-color-tertiary) !important;\n}\n\n/* 修复El-Card组件样式 */\n:deep(.el-card) {\n  --el-card-bg-color: var(--bg-color);\n  background-color: var(--bg-color);\n  color: var(--text-color);\n  border-color: var(--border-color);\n}\n\n/* 修复El-Alert样式 */\n:deep(.el-alert) {\n  --el-alert-bg-color: var(--bg-color-tertiary);\n  color: var(--text-color);\n}\n\n:deep(.el-alert--info) {\n  --el-alert-bg-color: var(--bg-color-tertiary);\n}\n\n:deep(.el-empty__image svg) {\n  fill: var(--text-color-tertiary);\n}\n\n/* 修复下拉菜单 */\n:deep(.el-dropdown-menu) {\n  background-color: var(--bg-color-tertiary);\n  border-color: var(--border-color);\n}\n\n:deep(.el-dropdown-menu__item) {\n  color: var(--text-color);\n}\n\n:deep(.el-dropdown-menu__item:hover) {\n  background-color: var(--hover-color);\n}\n\n:deep(.el-dropdown-menu__item--divided:before) {\n  background-color: var(--border-color);\n}\n\n:deep(.el-dropdown-menu__item.is-disabled) {\n  color: var(--text-color-tertiary);\n}\n\n:deep(.el-divider) {\n  background-color: var(--border-color);\n}\n\n/* 修复消息框 */\n:deep(.el-message-box) {\n  background-color: var(--bg-color);\n  border-color: var(--border-color);\n}\n\n:deep(.el-message-box__title) {\n  color: var(--text-color);\n}\n\n:deep(.el-message-box__message) {\n  color: var(--text-color);\n}\n\n:deep(.el-message) {\n  background-color: var(--bg-color);\n  border-color: var(--border-color);\n}\n\n:deep(.el-message__content) {\n  color: var(--text-color);\n}\n\n/* 修复输入区域的阴影 */\n.el-textarea__wrapper {\n  box-shadow: 0 0 0 1px var(--border-color) inset !important;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;;EAEdA,KAAK,EAAC;;;EAQNA,KAAK,EAAC;AAAa;;EAEjBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAe;;EAcvBA,KAAK,EAAC;AAAW;;;EAajBA,KAAK,EAAC;AAAe;;;;;EAKbA,KAAK,EAAC;AAAmB;;;EAQvBA,KAAK,EAAC;AAAgB;;EAMjBA,KAAK,EAAC;AAAgB;;;EAQ3BA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAc;;EAEjBA,KAAK,EAAC;AAAM;;EAEfA,KAAK,EAAC;AAAiB;;;EAaVA,KAAK,EAAC;;;;EAczBA,KAAK,EAAC;AAAgB;;EAMjBA,KAAK,EAAC;AAAgB;;;EAQ3BA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAc;;EAEjBA,KAAK,EAAC;AAAM;;EAEfA,KAAK,EAAC;AAAiB;;;EAYsBA,KAAK,EAAC;;;;EAa1CA,KAAK,EAAC;;;EAOzBA,KAAK,EAAC;AAAc;;;EAElBA,KAAK,EAAC;;;EACJA,KAAK,EAAC;AAAgB;;EAMrBA,KAAK,EAAC;AAAgB;;;EAavBA,KAAK,EAAC;AAAc;;EAIpBA,KAAK,EAAC;AAAc;;;EAoBtBA,KAAK,EAAC,eAAe;EAAiCC,GAAG,EAAC;;;EASpDD,KAAK,EAAC;AAAmB;;;EACaA,KAAK,EAAC;;;EAKrCA,KAAK,EAAC;AAAgB;;EAG3BA,KAAK,EAAC;AAAyB;;;;;;EAOkBA,KAAK,EAAC;;;;;EAOhDA,KAAK,EAAC;AAAW;;;EAKlBA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAiB;;EACvBA,KAAK,EAAC;AAAgB;;EAI5BA,KAAK,EAAC;AAAc;;;EAiB1BA,KAAK,EAAC;;;;EAYNA,KAAK,EAAC;;;EAGJE,KAA2C,EAA3C;IAAA;IAAA;EAAA;AAA2C;;;EAQjDF,KAAK,EAAC;;;EACJA,KAAK,EAAC;AAAY;;EAsBlBA,KAAK,EAAC;AAAY;;EAUlBA,KAAK,EAAC;AAAa;;;EASrBA,KAAK,EAAC;;;EACJA,KAAK,EAAC;AAAoB;;EA2DnCA,KAAK,EAAC;AAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA/X/BG,mBAAA,CAoYM,OApYNC,UAoYM,GAnYAC,YAAA,CA2UUC,kBAAA;IA3UDN,KAAK,EAAC;EAAW;sBACxB,MAOM,CAPiCO,MAAA,CAAAC,OAAO,I,cAA9CL,mBAAA,CAOM,OAPNM,UAOM,GANJJ,YAAA,CAKEK,mBAAA;MAJAC,KAAK,EAAC,WAAW;MACjBC,IAAI,EAAC,MAAM;MACVC,QAAQ,EAAE,KAAK;MAChB,WAAS,EAAT;2CAGJC,mBAAA,CAiUM,OAjUNC,UAiUM,GA/TJD,mBAAA,CAyIM,OAzINE,UAyIM,GAvIJF,mBAAA,CAYM,OAZNG,UAYM,GAXJH,mBAAA,CAUM,OAVNI,UAUM,GATJb,YAAA,CAKYc,mBAAA;kBAJDZ,MAAA,CAAAa,WAAW;iEAAXb,MAAA,CAAAa,WAAW,GAAAC,MAAA;MACpBC,WAAW,EAAC,UAAU;MACtBC,SAAS,EAAT,EAAS;MACR,aAAW,EAAEhB,MAAA,CAAAiB;gDAEhBnB,YAAA,CAEYoB,oBAAA;MAFDC,MAAM,EAAN,EAAM;MAACC,IAAI,EAAC,OAAO;MAAEC,OAAK,EAAErB,MAAA,CAAAsB,mBAAmB;MAAElB,KAAK,EAAC;;wBAChE,MAA8B,CAA9BN,YAAA,CAA8ByB,kBAAA;0BAArB,MAAW,CAAXzB,YAAA,CAAW0B,kBAAA,E;;;;4BAM1BjB,mBAAA,CAUM,OAVNkB,UAUM,I,kBATJ7B,mBAAA,CAQM8B,SAAA,QAAAC,WAAA,CAPmB3B,MAAA,CAAA4B,IAAI,GAAnBC,GAAG,EAAEC,KAAK;2BADpBlC,mBAAA,CAQM;QANHmC,GAAG,EAAED,KAAK;QACXrC,KAAK,EAAAuC,eAAA,EAAC,UAAU;UAAA,UACGhC,MAAA,CAAAiC,SAAS,KAAKH;QAAK;QACrCT,OAAK,EAAAP,MAAA,IAAEd,MAAA,CAAAiC,SAAS,GAAGH;0BAEjBD,GAAG,OAAAK,UAAA;iBAKV3B,mBAAA,CA0GM,OA1GN4B,UA0GM,GAxGYnC,MAAA,CAAAiC,SAAS,U,cAAzBrC,mBAAA,CA8CW8B,SAAA;MAAAK,GAAA;IAAA,I,CA7CG/B,MAAA,CAAAC,OAAO,IAAImC,MAAM,CAACC,IAAI,CAACrC,MAAA,CAAAsC,wBAAwB,EAAEC,MAAM,Q,cAAnE3C,mBAAA,CAwCM,OAAA4C,WAAA,I,kBAvCJ5C,mBAAA,CAsCM8B,SAAA,QAAAC,WAAA,CAtCqC3B,MAAA,CAAAsC,wBAAwB,GAAtDG,eAAe,EAAEC,QAAQ;2BAAtC9C,mBAAA,CAsCM;QAtCgEmC,GAAG,EAAEW,QAAQ;QAAEjD,KAAK,EAAC;UACzFc,mBAAA,CAAmD,OAAnDoC,WAAmD,EAAAC,gBAAA,CAAjBF,QAAQ,Q,kBAC1C9C,mBAAA,CAmCM8B,SAAA,QAAAC,WAAA,CAlCcc,eAAe,EAA1BI,OAAO;6BADhBjD,mBAAA,CAmCM;UAjCHmC,GAAG,EAAEc,OAAO,CAACC,EAAE;UAChBrD,KAAK,EAAAuC,eAAA,EAAC,cAAc;YAAA,UACDhC,MAAA,CAAA+C,eAAe,KAAKF,OAAO,CAACC;UAAE;UAChDzB,OAAK,EAAAP,MAAA,IAAEd,MAAA,CAAAgD,aAAa,CAACH,OAAO;YAE7BtC,mBAAA,CAaM,OAbN0C,WAaM,G,CAXKJ,OAAO,CAACK,MAAM,I,cADvBtD,mBAAA,CAMM;;UAJJH,KAAK,EAAC,QAAQ;UACbE,KAAK,EAAAwD,eAAA;YAAAC,eAAA,EAAoBP,OAAO,CAACQ;UAAK;YAEvC9C,mBAAA,CAAyD,QAAzD+C,WAAyD,EAAAV,gBAAA,CAAzBC,OAAO,CAACU,OAAO,M,uBAEjD3D,mBAAA,CAAgE;;UAAnD4D,GAAG,EAAEX,OAAO,CAACK,MAAM;UAAEO,GAAG,EAAC,QAAQ;UAAChE,KAAK,EAAC;mCACrDc,mBAAA,CAGO;UAFLd,KAAK,EAAAuC,eAAA,EAAC,gBAAgB,cACFa,OAAO,CAACa,MAAM;uBAGtCnD,mBAAA,CAaM,OAbNoD,WAaM,GAZJpD,mBAAA,CAGM,OAHNqD,WAGM,GAFJrD,mBAAA,CAA+B,cAAAqC,gBAAA,CAAtBC,OAAO,CAACgB,IAAI,OACrBtD,mBAAA,CAAgD,QAAhDuD,WAAgD,EAAAlB,gBAAA,CAA1BC,OAAO,CAACkB,QAAQ,M,GAExCxD,mBAAA,CAOM,OAPNyD,WAOM,GANJzD,mBAAA,CAAsC,cAAAqC,gBAAA,CAA7BC,OAAO,CAACoB,WAAW,OAEpBpB,OAAO,CAACqB,MAAM,I,cADtBC,YAAA,CAIEC,mBAAA;;UAFCC,KAAK,EAAExB,OAAO,CAACqB,MAAM;UACtBzE,KAAK,EAAC;;;oBAQDO,MAAA,CAAAC,OAAO,I,cAAxBL,mBAAA,CAEM,OAFN0E,WAEM,GADJxE,YAAA,CAAkCyE,sBAAA;MAApBC,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAR;kEAK3B7E,mBAAA,CAiDW8B,SAAA;MAAAK,GAAA;IAAA,K,kBAhDTnC,mBAAA,CAmCM8B,SAAA,QAAAC,WAAA,CAlCc3B,MAAA,CAAA0E,gBAAgB,EAA3B7B,OAAO;2BADhBjD,mBAAA,CAmCM;QAjCHmC,GAAG,EAAEc,OAAO,CAACC,EAAE;QAChBrD,KAAK,EAAAuC,eAAA,EAAC,cAAc;UAAA,UACDhC,MAAA,CAAA+C,eAAe,KAAKF,OAAO,CAACC;QAAE;QAChDzB,OAAK,EAAAP,MAAA,IAAEd,MAAA,CAAAgD,aAAa,CAACH,OAAO;UAE7BtC,mBAAA,CAaM,OAbNoE,WAaM,G,CAXK9B,OAAO,CAACK,MAAM,I,cADvBtD,mBAAA,CAMM;;QAJJH,KAAK,EAAC,QAAQ;QACbE,KAAK,EAAAwD,eAAA;UAAAC,eAAA,EAAoBP,OAAO,CAACQ;QAAK;UAEvC9C,mBAAA,CAAyD,QAAzDqE,WAAyD,EAAAhC,gBAAA,CAAzBC,OAAO,CAACU,OAAO,M,uBAEjD3D,mBAAA,CAAgE;;QAAnD4D,GAAG,EAAEX,OAAO,CAACK,MAAM;QAAEO,GAAG,EAAC,QAAQ;QAAChE,KAAK,EAAC;iCACrDc,mBAAA,CAGO;QAFLd,KAAK,EAAAuC,eAAA,EAAC,gBAAgB,cACFa,OAAO,CAACa,MAAM;qBAGtCnD,mBAAA,CAaM,OAbNsE,WAaM,GAZJtE,mBAAA,CAGM,OAHNuE,WAGM,GAFJvE,mBAAA,CAA+B,cAAAqC,gBAAA,CAAtBC,OAAO,CAACgB,IAAI,OACrBtD,mBAAA,CAAgD,QAAhDwE,WAAgD,EAAAnC,gBAAA,CAA1BC,OAAO,CAACkB,QAAQ,M,GAExCxD,mBAAA,CAOM,OAPNyE,WAOM,GANJzE,mBAAA,CAAsC,cAAAqC,gBAAA,CAA7BC,OAAO,CAACoB,WAAW,OAEpBpB,OAAO,CAACqB,MAAM,I,cADtBC,YAAA,CAIEC,mBAAA;;QAFCC,KAAK,EAAExB,OAAO,CAACqB,MAAM;QACtBzE,KAAK,EAAC;;gBAOFO,MAAA,CAAAC,OAAO,IAAID,MAAA,CAAA0E,gBAAgB,CAACnC,MAAM,U,cAA9C3C,mBAAA,CASM,OATNqF,WASM,GARJnF,YAAA,CAOWoF,mBAAA;MANTC,WAAW,EAAC,OAAO;MAClB,YAAU,EAAE;;MAEFC,KAAK,EAAAC,QAAA,CACd,MAA+D,CAA/DvF,YAAA,CAA+DyB,kBAAA;QAArDH,IAAI,EAAE,EAAE;QAAE3B,KAAK,EAAC;;0BAAa,MAAc,CAAdK,YAAA,CAAcwF,qBAAA,E;;;;kDAOlDtF,MAAA,CAAAC,OAAO,I,cAAlBL,mBAAA,CAEM,OAFN2F,WAEM,GADJzF,YAAA,CAAkCyE,sBAAA;MAApBC,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAR;+CAM7BlE,mBAAA,CAkLM,OAlLNiF,WAkLM,GAhL2BxF,MAAA,CAAA+C,eAAe,a,cAA9CnD,mBAAA,CAyCM,OAzCN6F,WAyCM,GAxCJlF,mBAAA,CAkBM,OAlBNmF,WAkBM,G,CAhBC1F,MAAA,CAAA2F,cAAc,CAACzC,MAAM,I,cAD1BtD,mBAAA,CAMM;;MAJJH,KAAK,EAAC,QAAQ;MACjBE,KAAK,EAAAwD,eAAA;QAAAC,eAAA,EAAoBpD,MAAA,CAAA2F,cAAc,CAACtC;MAAK;QAE9C9C,mBAAA,CAAuE,QAAvEqF,WAAuE,EAAAhD,gBAAA,CAAvC5C,MAAA,CAAA2F,cAAc,CAACpC,OAAO,a,uBAEpD3D,mBAAA,CAKE;;MAHH4D,GAAG,EAAExD,MAAA,CAAA2F,cAAc,CAACzC,MAAM;MACvBO,GAAG,EAAC,QAAQ;MACZhE,KAAK,EAAC;+BAERc,mBAAA,CAGO;MAFLd,KAAK,EAAAuC,eAAA,EAAC,gBAAgB,eACLhC,MAAA,CAAA2F,cAAc,CAACjC,MAAM;mBAG1CnD,mBAAA,CAGM,OAHNsF,WAGM,GAFRtF,mBAAA,CAA8C,YAAAqC,gBAAA,CAAvC5C,MAAA,CAAA2F,cAAc,CAAC9B,IAAI,mBAC1BtD,mBAAA,CAA6D,WAAAqC,gBAAA,CAAvD5C,MAAA,CAAA8F,aAAa,CAAC9F,MAAA,CAAA2F,cAAc,CAACjC,MAAM,mB,GAEvCnD,mBAAA,CAgBM,OAhBNwF,WAgBM,GAfJjG,YAAA,CAIakG,qBAAA;MAJDC,OAAO,EAAC,MAAM;MAACC,SAAS,EAAC;;wBACnC,MAEY,CAFZpG,YAAA,CAEYoB,oBAAA;QAFDC,MAAM,EAAN;MAAM;0BACf,MAA4B,CAA5BrB,YAAA,CAA4ByB,kBAAA;4BAAnB,MAAS,CAATzB,YAAA,CAASqG,gBAAA,E;;;;;;QAGtBrG,YAAA,CAIakG,qBAAA;MAJDC,OAAO,EAAC,MAAM;MAACC,SAAS,EAAC;;wBACnC,MAEY,CAFZpG,YAAA,CAEYoB,oBAAA;QAFDC,MAAM,EAAN;MAAM;0BACf,MAAkC,CAAlCrB,YAAA,CAAkCyB,kBAAA;4BAAzB,MAAe,CAAfzB,YAAA,CAAesG,sBAAA,E;;;;;;QAG5BtG,YAAA,CAIakG,qBAAA;MAJDC,OAAO,EAAC,MAAM;MAACC,SAAS,EAAC;;wBACnC,MAEY,CAFZpG,YAAA,CAEYoB,oBAAA;QAFDC,MAAM,EAAN;MAAM;0BACf,MAAiC,CAAjCrB,YAAA,CAAiCyB,kBAAA;4BAAxB,MAAc,CAAdzB,YAAA,CAAcuG,qBAAA,E;;;;;;6CAOErG,MAAA,CAAA+C,eAAe,a,cAAhDnD,mBAAA,CAgFM,OAhFN0G,WAgFM,GA9EYtG,MAAA,CAAAuG,QAAQ,CAAChE,MAAM,Q,kBAC7B3C,mBAAA,CAoDM8B,SAAA;MAAAK,GAAA;IAAA,GAAAJ,WAAA,CAnDuB3B,MAAA,CAAAuG,QAAQ,GAA3BC,OAAO,EAAE1E,KAAK;2BADxBlC,mBAAA,CAoDM;QAlDHmC,GAAG,EAAEyE,OAAO,CAAC1D,EAAE,IAAIhB,KAAK;QACzBrC,KAAK,EAAAuC,eAAA,EAAC,SAAS,EACPwE,OAAO,CAACC,MAAM,CAAC3D,EAAE,KAAK9C,MAAA,CAAA0G,MAAM;UAEpCnG,mBAAA,CA6CM,OA7CNoG,WA6CM,GA5COH,OAAO,CAACC,MAAM,CAAC3D,EAAE,KAAK9C,MAAA,CAAA0G,MAAM,I,cAAvC9G,mBAAA,CAOM,OAPNgH,WAOM,GANJrG,mBAAA,CAKM;QAJJd,KAAK,EAAC,cAAc;QACnBE,KAAK,EAAAwD,eAAA;UAAAC,eAAA,EAAoBpD,MAAA,CAAA6G,cAAc,CAACL,OAAO,CAACC,MAAM;QAAA;UAEvDlG,mBAAA,CAA0E,QAA1EuG,WAA0E,EAAAlE,gBAAA,CAA1C5C,MAAA,CAAA+G,gBAAgB,CAACP,OAAO,CAACC,MAAM,O,yCAGnElG,mBAAA,CAmCM,OAnCNyG,WAmCM,GAlCJzG,mBAAA,CAuBM;QAtBJd,KAAK,EAAAuC,eAAA,EAAC,iBAAiB,EACfwE,OAAO,CAACC,MAAM,CAAC3D,EAAE,KAAK9C,MAAA,CAAA0G,MAAM;UAExBF,OAAO,CAACS,YAAY,e,cAAhCrH,mBAAA,CAAyE,QAAAsH,WAAA,EAAAtE,gBAAA,CAAzB4D,OAAO,CAACP,OAAO,SAE/CO,OAAO,CAACS,YAAY,gB,cAApCrH,mBAAA,CAEM,OAFNuH,WAEM,GADJ5G,mBAAA,CAAuC;QAAjCiD,GAAG,EAAEgD,OAAO,CAACY,IAAI;QAAE3D,GAAG,EAAC;oCAGf+C,OAAO,CAACS,YAAY,e,cAApCrH,mBAAA,CAIM;;QAJ2CH,KAAK,EAAC,cAAc;QAAE4B,OAAK,EAAAP,MAAA,IAAEd,MAAA,CAAAqH,YAAY,CAACb,OAAO;UAChG1G,YAAA,CAA+ByB,kBAAA;0BAAtB,MAAY,CAAZzB,YAAA,CAAYwH,mBAAA,E;;UACrB/G,mBAAA,CAAoC,cAAAqC,gBAAA,CAA3B4D,OAAO,CAACe,SAAS,OAC1BhH,mBAAA,CAAsE,QAAtEiH,WAAsE,EAAA5E,gBAAA,CAA3C5C,MAAA,CAAAyH,cAAc,CAACjB,OAAO,CAACkB,SAAS,O,qBAG7ClB,OAAO,CAACS,YAAY,oB,cAApCrH,mBAAA,CAMM;;QANgDH,KAAK,EAAC,mBAAmB;QAAE4B,OAAK,EAAAP,MAAA,IAAEd,MAAA,CAAA2H,aAAa,CAACnB,OAAO;UAC3G1G,YAAA,CAA8ByB,kBAAA;0BAArB,MAAW,CAAXzB,YAAA,CAAW8H,kBAAA,E;;UACpBrH,mBAAA,CAGM,OAHNsH,WAGM,GAFJtH,mBAAA,CAAuE,OAAvEuH,WAAuE,EAAAlF,gBAAA,CAAvC4D,OAAO,CAACuB,gBAAgB,CAAC3H,KAAK,OAC9DG,mBAAA,CAA4E,OAA5EyH,WAA4E,EAAApF,gBAAA,CAA7C4D,OAAO,CAACuB,gBAAgB,CAAC5C,WAAW,M,2DAIzE5E,mBAAA,CAA2E,OAA3E0H,WAA2E,EAAArF,gBAAA,CAA9C5C,MAAA,CAAAkI,iBAAiB,CAAC1B,OAAO,CAAC2B,UAAU,QAIzD3B,OAAO,CAAC4B,aAAa,KAAKpI,MAAA,CAAAqI,oBAAoB,CAACC,QAAQ,CAAC9B,OAAO,CAAC1D,EAAE,K,cAD1EqB,YAAA,CAMEoE,4BAAA;;QAJCC,SAAS,EAAEhC,OAAO,CAAC1D,EAAE;QACrB2F,SAAS,EAAEjC,OAAO,CAAC4B,aAAa;QAChCM,oBAAoB,EAAE1I,MAAA,CAAA2I,wBAAwB;QAC9CC,qBAAqB,EAAA9H,MAAA,IAAEd,MAAA,CAAA6I,yBAAyB,CAACrC,OAAO,CAAC1D,EAAE;;iBAQhD9C,MAAA,CAAAC,OAAO,I,cAC3BL,mBAAA,CAOM,OAPNkJ,WAOM,GANJhJ,YAAA,CAKWoF,mBAAA;MALDC,WAAW,EAAC;IAAQ;MACjBC,KAAK,EAAAC,QAAA,CACd,MAAmE,CAAnEvF,YAAA,CAAmEyB,kBAAA;QAAzDH,IAAI,EAAE,EAAE;QAAE3B,KAAK,EAAC;;0BAAa,MAAkB,CAAlBK,YAAA,CAAkBiJ,yBAAA,E;;;wBAE3D,MAAmB,C,0BAAnBxI,mBAAA,CAAmB,WAAhB,cAAY,O;;2BAOnBX,mBAAA,CAMM,OANNoJ,WAMM,GALJlJ,YAAA,CAAkCyE,sBAAA;MAApBC,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAR;QACvB3E,YAAA,CAA2DyE,sBAAA;MAA9C5E,KAAwB,EAAxB;QAAA;MAAA,CAAwB;MAAE6E,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAR;QAChDlE,mBAAA,CAEM,OAFN0I,WAEM,GADJnJ,YAAA,CAAkCyE,sBAAA;MAApBC,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAR;qDAODzE,MAAA,CAAA+C,eAAe,a,cAA7CnD,mBAAA,CAuCM,OAvCNsJ,WAuCM,GAtCJ3I,mBAAA,CAqBM,OArBN4I,WAqBM,GApBJrJ,YAAA,CAIakG,qBAAA;MAJDC,OAAO,EAAC,MAAM;MAACC,SAAS,EAAC;;wBACnC,MAEY,CAFZpG,YAAA,CAEYoB,oBAAA;QAFDC,MAAM,EAAN,EAAM;QAAEE,OAAK,EAAErB,MAAA,CAAAoJ;;0BACxB,MAAoC,CAApCtJ,YAAA,CAAoCyB,kBAAA;4BAA3B,MAAiB,CAAjBzB,YAAA,CAAiBuJ,wBAAA,E;;;;;;QAG9BvJ,YAAA,CAIakG,qBAAA;MAJDC,OAAO,EAAC,MAAM;MAACC,SAAS,EAAC;;wBACnC,MAEY,CAFZpG,YAAA,CAEYoB,oBAAA;QAFDC,MAAM,EAAN,EAAM;QAAEE,OAAK,EAAErB,MAAA,CAAAsJ;;0BACxB,MAAmC,CAAnCxJ,YAAA,CAAmCyB,kBAAA;4BAA1B,MAAgB,CAAhBzB,YAAA,CAAgByJ,uBAAA,E;;;;;;QAG7BzJ,YAAA,CAIakG,qBAAA;MAJDC,OAAO,EAAC,SAAS;MAACC,SAAS,EAAC;;wBACtC,MAEY,CAFZpG,YAAA,CAEYoB,oBAAA;QAFDC,MAAM,EAAN,EAAM;QAAEE,OAAK,EAAErB,MAAA,CAAAwJ;;0BACxB,MAA8B,CAA9B1J,YAAA,CAA8ByB,kBAAA;4BAArB,MAAW,CAAXzB,YAAA,CAAW8H,kBAAA,E;;;;;;QAGxB9H,YAAA,CAIakG,qBAAA;MAJDC,OAAO,EAAC,MAAM;MAACC,SAAS,EAAC;;wBACnC,MAEY,CAFZpG,YAAA,CAEYoB,oBAAA;QAFDC,MAAM,EAAN;MAAM;0BACf,MAAiC,CAAjCrB,YAAA,CAAiCyB,kBAAA;4BAAxB,MAAc,CAAdzB,YAAA,CAAc2J,qBAAA,E;;;;;;UAI7BlJ,mBAAA,CASM,OATNmJ,WASM,GARJ5J,YAAA,CAOYc,mBAAA;kBANDZ,MAAA,CAAA2J,YAAY;iEAAZ3J,MAAA,CAAA2J,YAAY,GAAA7I,MAAA;MACrBT,IAAI,EAAC,UAAU;MACdmE,IAAI,EAAE,CAAC;MACRzD,WAAW,EAAC,SAAS;MACrB6I,MAAM,EAAC,MAAM;MACZC,OAAK,EAAAC,SAAA,CAAAC,cAAA,CAAgB/J,MAAA,CAAAgK,WAAW;8CAGrCzJ,mBAAA,CAKM,OALN0J,WAKM,GAJJnK,YAAA,CAGYoB,oBAAA;MAHDb,IAAI,EAAC,SAAS;MAAEgB,OAAK,EAAErB,MAAA,CAAAgK;;wBAChC,MAA+B,CAA/BlK,YAAA,CAA+ByB,kBAAA;0BAAtB,MAAY,CAAZzB,YAAA,CAAYoK,mBAAA,E;;qDAAU,MAEjC,G;;6DAK0BlK,MAAA,CAAA+C,eAAe,a,cAA7CnD,mBAAA,CAMM,OANNuK,WAMM,GALJ5J,mBAAA,CAEM,OAFN6J,WAEM,GADJtK,YAAA,CAA+CyB,kBAAA;MAArCH,IAAI,EAAE;IAAE;wBAAE,MAAiB,CAAjBtB,YAAA,CAAiBuK,wBAAA,E;;oCAEvC9J,mBAAA,CAAoB,YAAhB,aAAW,Q,0BACfA,mBAAA,CAAqB,WAAlB,gBAAc,O;;MAO/BA,mBAAA,CAKE;IAJAF,IAAI,EAAC,MAAM;IACXX,GAAG,EAAC,WAAW;IACfC,KAAqB,EAArB;MAAA;IAAA,CAAqB;IACpB2K,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAExK,MAAA,CAAAyK,gBAAA,IAAAzK,MAAA,CAAAyK,gBAAA,IAAAD,IAAA,CAAgB;iBAI3BjK,mBAAA,CAME;IALAF,IAAI,EAAC,MAAM;IACXX,GAAG,EAAC,YAAY;IAChBC,KAAqB,EAArB;MAAA;IAAA,CAAqB;IACrB+K,MAAM,EAAC,SAAS;IACfJ,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAExK,MAAA,CAAA2K,iBAAA,IAAA3K,MAAA,CAAA2K,iBAAA,IAAAH,IAAA,CAAiB;iBAI5B1K,YAAA,CAmCY8K,oBAAA;gBAlCD5K,MAAA,CAAA6K,sBAAsB;+DAAtB7K,MAAA,CAAA6K,sBAAsB,GAAA/J,MAAA;IAC/BV,KAAK,EAAC,SAAS;IACf0K,KAAK,EAAC;;IA2BKC,MAAM,EAAA1F,QAAA,CACf,MAEO,CAFP9E,mBAAA,CAEO,QAFPyK,WAEO,GADLlL,YAAA,CAAiEoB,oBAAA;MAArDG,OAAK,EAAAkJ,MAAA,QAAAA,MAAA,MAAAzJ,MAAA,IAAEd,MAAA,CAAA6K,sBAAsB;;wBAAU,MAAEN,MAAA,SAAAA,MAAA,Q,iBAAF,IAAE,E;;;sBA3BzD,MAwBW,C,+BAxBXpG,YAAA,CAwBW8G,mBAAA;MAtBRC,IAAI,EAAElL,MAAA,CAAAmL,aAAa;MACpBxL,KAAmB,EAAnB;QAAA;MAAA,CAAmB;MAClByL,UAAS,EAAEpL,MAAA,CAAAqL;;wBAEZ,MAA2D,CAA3DvL,YAAA,CAA2DwL,0BAAA;QAA1CC,IAAI,EAAC,OAAO;QAACC,KAAK,EAAC;UACpC1L,YAAA,CAIkBwL,0BAAA;QAJDC,IAAI,EAAC,WAAW;QAACC,KAAK,EAAC;;QAC3BC,OAAO,EAAApG,QAAA,CAAEqG,KAAK,KACvB5L,YAAA,CAA0C6L,iBAAA;4BAAlC,MAAyB,C,kCAAtBD,KAAK,CAACE,GAAG,CAACC,SAAS,M;;;;UAGlC/L,YAAA,CAIkBwL,0BAAA;QAJDC,IAAI,EAAC,YAAY;QAACC,KAAK,EAAC;;QAC5BC,OAAO,EAAApG,QAAA,CAAEqG,KAAK,K,kCACpB1L,MAAA,CAAA8L,UAAU,CAACJ,KAAK,CAACE,GAAG,CAACzD,UAAU,O;;UAGtCrI,YAAA,CAMkBwL,0BAAA;QANDE,KAAK,EAAC;MAAI;QACdC,OAAO,EAAApG,QAAA,CAAEqG,KAAK,KACvB5L,YAAA,CAEYoB,oBAAA;UAFDb,IAAI,EAAC,SAAS;UAACe,IAAI,EAAC,OAAO;UAAEC,OAAK,EAAA0I,cAAA,CAAAjJ,MAAA,IAAOd,MAAA,CAAA+L,cAAc,CAACL,KAAK,CAACE,GAAG;;4BAAG,MAE/ErB,MAAA,SAAAA,MAAA,Q,iBAF+E,MAE/E,E;;;;;;0DApBOvK,MAAA,CAAAgM,gBAAgB,E","ignoreList":[]}]}