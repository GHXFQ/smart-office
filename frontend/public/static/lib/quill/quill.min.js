/**
 * 简化版的Quill实现，只提供基本的接口以防CDN加载失败时显示错误
 */
(function(global) {
  // 拦截并重写DOM变化事件APIs - 修复DOMNodeInserted警告
  const originalAddEventListener = Node.prototype.addEventListener;
  Node.prototype.addEventListener = function(type, listener, options) {
    // 如果是DOMNodeInserted事件，替换为使用MutationObserver
    if (type === 'DOMNodeInserted' || type === 'DOMNodeRemoved') {
      console.warn(`检测到已弃用的${type}事件，正在转换为MutationObserver...`);
      
      const element = this;
      // 保存原始监听器引用
      if (!element._mutationListeners) {
        element._mutationListeners = [];
      }
      
      // 创建MutationObserver实例
      const observer = new MutationObserver((mutations) => {
        for (let mutation of mutations) {
          if (mutation.type === 'childList') {
            // 模拟DOMNodeInserted事件
            if (type === 'DOMNodeInserted' && mutation.addedNodes.length > 0) {
              mutation.addedNodes.forEach(node => {
                const event = new Event('DOMNodeInserted', {bubbles: true});
                event.relatedNode = element;
                event.target = node;
                // 调用原始监听器
                try {
                  listener.call(element, event);
                } catch (e) {
                  console.error('执行监听器时出错:', e);
                }
              });
            }
            
            // 模拟DOMNodeRemoved事件
            if (type === 'DOMNodeRemoved' && mutation.removedNodes.length > 0) {
              mutation.removedNodes.forEach(node => {
                const event = new Event('DOMNodeRemoved', {bubbles: true});
                event.relatedNode = element;
                event.target = node;
                // 调用原始监听器
                try {
                  listener.call(element, event);
                } catch (e) {
                  console.error('执行监听器时出错:', e);
                }
              });
            }
          }
        }
      });
      
      // 保存需要的信息以便后续清理
      const listenerInfo = {
        type: type,
        originalListener: listener,
        observer: observer
      };
      
      // 开始观察DOM变化
      observer.observe(element, {
        childList: true,
        subtree: true
      });
      
      // 保存监听器信息
      element._mutationListeners.push(listenerInfo);
      
      // 不要继续注册已废弃的事件
      return;
    }
    
    // 对于其他类型的事件，使用原始方法
    return originalAddEventListener.apply(this, arguments);
  };
  
  // 重写removeEventListener方法，处理MutationObserver的清理
  const originalRemoveEventListener = Node.prototype.removeEventListener;
  Node.prototype.removeEventListener = function(type, listener, options) {
    // 如果是转换后的事件类型，处理相应的MutationObserver
    if ((type === 'DOMNodeInserted' || type === 'DOMNodeRemoved') && 
        this._mutationListeners) {
      const index = this._mutationListeners.findIndex(info => 
        info.type === type && info.originalListener === listener);
      
      if (index !== -1) {
        // 找到匹配的监听器，断开对应的Observer
        const listenerInfo = this._mutationListeners[index];
        if (listenerInfo.observer) {
          listenerInfo.observer.disconnect();
        }
        
        // 从数组中移除
        this._mutationListeners.splice(index, 1);
        return;
      }
    }
    
    // 对于其他事件，使用原始方法
    return originalRemoveEventListener.apply(this, arguments);
  };
  
  // 创建简化版的Quill对象
  const Quill = function(container, options) {
    this.container = typeof container === 'string' 
      ? document.querySelector(container) 
      : container;
    this.options = options || {};
    this.modules = {};
    this.root = this.container;

    // 初始化编辑器内容
    if (this.container) {
      this.container.classList.add('ql-container');
      // 如果配置了工具栏，添加工具栏
      if (options && options.modules && options.modules.toolbar) {
        const toolbarContainer = document.createElement('div');
        toolbarContainer.className = 'ql-toolbar ql-snow';
        this.container.appendChild(toolbarContainer);
        
        // 添加简单的工具栏按钮
        this._createSimpleToolbar(toolbarContainer, options.modules.toolbar);
      }
      
      // 创建编辑区域
      const editorContainer = document.createElement('div');
      editorContainer.className = 'ql-editor';
      editorContainer.contentEditable = true;
      editorContainer.setAttribute('data-placeholder', options.placeholder || '请输入内容...');
      
      this.container.appendChild(editorContainer);
      this.root = editorContainer;
      
      // 初始内容
      if (options.defaultValue) {
        this.root.innerHTML = options.defaultValue;
      }
    }

    console.warn('使用简化版Quill（本地备份），某些功能可能不可用');
    
    // 初始化内联建议模块
    if (options && options.modules && options.modules.suggestion) {
      this._initSuggestionModule(options.modules.suggestion);
    }
  };
  
  // 创建简单工具栏
  Quill.prototype._createSimpleToolbar = function(container, toolbarOptions) {
    const basicButtons = [
      { format: 'bold', icon: 'B' },
      { format: 'italic', icon: 'I' },
      { format: 'underline', icon: 'U' }
    ];
    
    basicButtons.forEach(btn => {
      const button = document.createElement('button');
      button.className = `ql-${btn.format}`;
      button.innerHTML = btn.icon;
      button.addEventListener('click', () => {
        document.execCommand(btn.format, false, null);
      });
      container.appendChild(button);
    });
  };
  
  // 初始化建议模块
  Quill.prototype._initSuggestionModule = function(options) {
    const suggestionModule = {
      suggestions: options.suggestions || [],
      onAdopt: options.onAdopt || function() {},
      onIgnore: options.onIgnore || function() {},
      
      // 应用建议到编辑器
      applySuggestions: (suggestions) => {
        this._clearSuggestions();
        
        if (!suggestions || !suggestions.length) return;
        
        // 创建标记
        const text = this.getText();
        suggestions.forEach(suggestion => {
          const index = text.indexOf(suggestion.original);
          if (index !== -1) {
            this._highlightText(suggestion.original, suggestion);
          }
        });
      },
      
      // 清除所有建议
      clearAllSuggestionFormats: () => {
        this._clearSuggestions();
      },
      
      // 销毁模块
      destroy: () => {
        // 清理逻辑...
        this._clearSuggestions();
        this._removeSuggestionListeners();
      }
    };
    
    // 保存模块引用
    this.modules.suggestion = suggestionModule;
    
    // 添加点击监听器
    this._addSuggestionClickListener();
  };
  
  // 添加建议点击监听
  Quill.prototype._addSuggestionClickListener = function() {
    this._suggestionClickListener = (e) => {
      if (e.target && e.target.classList.contains('suggestion-highlight')) {
        this._showSuggestionTooltip(e.target);
      } else {
        this._hideSuggestionTooltip();
      }
    };
    
    this.root.addEventListener('click', this._suggestionClickListener);
  };
  
  // 移除建议监听器
  Quill.prototype._removeSuggestionListeners = function() {
    if (this._suggestionClickListener) {
      this.root.removeEventListener('click', this._suggestionClickListener);
    }
  };
  
  // 高亮文本
  Quill.prototype._highlightText = function(text, suggestion) {
    const innerHTML = this.root.innerHTML;
    const textNode = this.root.textContent;
    
    // 查找文本在HTML中的位置
    const startIndex = textNode.indexOf(text);
    if (startIndex === -1) return;
    
    // 创建高亮标记
    const span = document.createElement('span');
    span.className = 'suggestion-highlight';
    span.setAttribute('data-suggestion-id', suggestion.id);
    span.setAttribute('data-original', suggestion.original);
    span.setAttribute('data-suggested', suggestion.suggested);
    span.textContent = text;
    
    // 尝试使用DOM Range替换文本
    try {
      const range = document.createRange();
      const selection = window.getSelection();
      
      // 查找文本节点
      let currentNode = this.root.firstChild;
      let charCount = 0;
      let foundNode = null;
      let foundOffset = 0;
      
      // 遍历节点查找目标文本位置
      const findTextPosition = function(node) {
        if (node.nodeType === 3) { // 文本节点
          const nodeLength = node.length;
          if (charCount <= startIndex && startIndex < charCount + nodeLength) {
            foundNode = node;
            foundOffset = startIndex - charCount;
            return true;
          }
          charCount += nodeLength;
        } else if (node.nodeType === 1) { // 元素节点
          for (let i = 0; i < node.childNodes.length; i++) {
            if (findTextPosition(node.childNodes[i])) {
              return true;
            }
          }
        }
        return false;
      };
      
      // 如果找到节点，执行替换
      if (findTextPosition(this.root)) {
        range.setStart(foundNode, foundOffset);
        range.setEnd(foundNode, foundOffset + text.length);
        range.deleteContents();
        range.insertNode(span);
      }
    } catch (e) {
      console.error('标记建议文本失败:', e);
    }
  };
  
  // 清除所有建议
  Quill.prototype._clearSuggestions = function() {
    const highlights = this.root.querySelectorAll('.suggestion-highlight');
    highlights.forEach(el => {
      const parent = el.parentNode;
      if (parent) {
        parent.replaceChild(document.createTextNode(el.textContent), el);
      }
    });
  };
  
  // 显示建议工具提示
  Quill.prototype._showSuggestionTooltip = function(element) {
    // 移除旧的提示
    this._hideSuggestionTooltip();
    
    const rect = element.getBoundingClientRect();
    const id = element.getAttribute('data-suggestion-id');
    const original = element.getAttribute('data-original');
    const suggested = element.getAttribute('data-suggested');
    
    // 创建工具提示
    const tooltip = document.createElement('div');
    tooltip.className = 'ql-suggestion-tooltip';
    tooltip.innerHTML = `
      <div class="suggestion-tooltip-content">
        <div class="suggestion-original">${original}</div>
        <div class="suggestion-arrow">→</div>
        <div class="suggestion-suggested">${suggested}</div>
        <div class="suggestion-actions">
          <button class="btn-adopt" data-id="${id}">采纳</button>
          <button class="btn-ignore" data-id="${id}">忽略</button>
        </div>
      </div>
    `;
    
    // 定位工具提示
    tooltip.style.position = 'absolute';
    tooltip.style.top = `${rect.bottom + window.scrollY + 5}px`;
    tooltip.style.left = `${rect.left + window.scrollX}px`;
    tooltip.style.display = 'block';
    tooltip.style.zIndex = 1100;
    
    // 保存引用
    this._suggestionTooltip = tooltip;
    document.body.appendChild(tooltip);
    
    // 添加按钮事件
    const module = this.getModule('suggestion');
    
    const adoptBtn = tooltip.querySelector('.btn-adopt');
    if (adoptBtn) {
      adoptBtn.addEventListener('click', () => {
        if (module && module.onAdopt) {
          module.onAdopt(id);
        }
        this._hideSuggestionTooltip();
      });
    }
    
    const ignoreBtn = tooltip.querySelector('.btn-ignore');
    if (ignoreBtn) {
      ignoreBtn.addEventListener('click', () => {
        if (module && module.onIgnore) {
          module.onIgnore(id);
        }
        this._hideSuggestionTooltip();
      });
    }
  };
  
  // 隐藏工具提示
  Quill.prototype._hideSuggestionTooltip = function() {
    if (this._suggestionTooltip && this._suggestionTooltip.parentNode) {
      this._suggestionTooltip.parentNode.removeChild(this._suggestionTooltip);
      this._suggestionTooltip = null;
    }
  };

  // 为简化版Quill添加最基本的方法
  Quill.prototype = {
    constructor: Quill,

    // 文本操作方法
    setText: function(text) {
      if (this.root) this.root.textContent = text;
      return this;
    },

    getText: function() {
      return this.root ? this.root.textContent || '' : '';
    },

    // 格式化方法
    formatText: function(index, length, formats, source) {
      // 简化实现：处理建议格式
      if (formats && formats.suggestion === false) {
        this._clearSuggestions();
      }
      return this;
    },

    // 获取内容
    getContents: function() {
      return { ops: [{ insert: this.getText() }] };
    },

    // 设置内容
    setContents: function(delta) {
      if (delta && delta.ops && delta.ops.length) {
        let text = '';
        delta.ops.forEach(op => {
          if (op.insert) text += op.insert;
        });
        this.setText(text);
      }
      return this;
    },

    // 事件
    on: function(eventName, callback) {
      if (this.root && callback) {
        // 为文本变化事件添加基本支持
        if (eventName === 'text-change') {
          this._textChangeCallback = callback;
          
          // 使用MutationObserver监听文本变化
          if (window.MutationObserver) {
            this._observer = new MutationObserver(() => {
              if (this._textChangeCallback) {
                this._textChangeCallback();
              }
            });
            
            this._observer.observe(this.root, {
              childList: true,
              characterData: true,
              subtree: true
            });
          }
        }
      }
      return this;
    },

    off: function(eventName, callback) {
      if (eventName === 'text-change') {
        this._textChangeCallback = null;
        if (this._observer) {
          this._observer.disconnect();
        }
      }
      return this;
    },

    // 获取模块
    getModule: function(name) {
      return this.modules[name] || null;
    },

    // 用于拉取Delta
    deleteText: function(index, length, source) {
      // 尝试使用原生API删除文本
      try {
        const range = document.createRange();
        const sel = window.getSelection();
        
        // 获取文本节点并设置范围
        let start = 0;
        let foundStart = false;
        let currentNode = this.root.firstChild;
        
        while (currentNode && !foundStart) {
          if (currentNode.nodeType === 3) { // 文本节点
            const nextStart = start + currentNode.length;
            if (start <= index && index < nextStart) {
              range.setStart(currentNode, index - start);
              foundStart = true;
            }
            start = nextStart;
          } else if (currentNode.nodeType === 1) { // 元素节点
            // 处理复杂结构...
          }
          currentNode = currentNode.nextSibling;
        }
        
        if (foundStart) {
          range.setEnd(range.startContainer, range.startOffset + length);
          range.deleteContents();
        }
      } catch (e) {
        console.error('删除文本失败:', e);
      }
      
      return this;
    },

    insertText: function(index, text, source) {
      // 尝试使用原生API插入文本
      try {
        const range = document.createRange();
        const sel = window.getSelection();
        
        // 尝试设置插入点...
        sel.removeAllRanges();
        sel.addRange(range);
        document.execCommand('insertText', false, text);
      } catch (e) {
        console.error('插入文本失败:', e);
        // 备用方法：直接修改HTML
        if (this.root) {
          const content = this.root.innerHTML;
          this.root.innerHTML = content.slice(0, index) + text + content.slice(index);
        }
      }
      
      return this;
    },
    
    // 附加我们自己定义的方法
    _createSimpleToolbar: Quill.prototype._createSimpleToolbar,
    _initSuggestionModule: Quill.prototype._initSuggestionModule,
    _addSuggestionClickListener: Quill.prototype._addSuggestionClickListener,
    _removeSuggestionListeners: Quill.prototype._removeSuggestionListeners,
    _highlightText: Quill.prototype._highlightText,
    _clearSuggestions: Quill.prototype._clearSuggestions,
    _showSuggestionTooltip: Quill.prototype._showSuggestionTooltip,
    _hideSuggestionTooltip: Quill.prototype._hideSuggestionTooltip
  };

  // 导入/导出功能
  Quill.import = function(moduleName) {
    console.warn(`简化版Quill不支持导入${moduleName}`);
    
    // 返回一个模拟的基类，避免出错
    return class {
      static create() { return document.createElement('span'); }
      static formats() { return {}; }
      static blotName = 'base';
      static tagName = 'span';
    };
  };

  // 注册功能
  Quill.register = function(item) {
    console.warn('简化版Quill不支持register方法');
  };

  // 导出到全局
  global.Quill = Quill;
})(window); 