# Generated by Django 4.2.10 on 2025-07-03 18:33

import apps.knowledge.models
import apps.knowledge.storage
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='KnowledgeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('icon', models.CharField(default='Document', max_length=50, verbose_name='Icon')),
                ('color', models.CharField(default='#007bff', max_length=20, verbose_name='Color')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_categories', to='users.company')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_knowledge_categories', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
            ],
            options={
                'verbose_name': 'Knowledge Category',
                'verbose_name_plural': 'Knowledge Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('file', models.FileField(blank=True, null=True, storage=apps.knowledge.storage.GraphRAGStorage(), upload_to=apps.knowledge.models.knowledge_file_path, verbose_name='File')),
                ('original_file', models.FileField(blank=True, null=True, upload_to=apps.knowledge.models.original_file_path, verbose_name='Original File')),
                ('original_filename', models.CharField(blank=True, max_length=512, null=True, verbose_name='Original Filename')),
                ('file_type', models.CharField(choices=[('pdf', 'PDF Document'), ('doc', 'Word Document'), ('xls', 'Excel Spreadsheet'), ('ppt', 'PowerPoint Presentation'), ('txt', 'Text File'), ('md', 'Markdown File'), ('img', 'Image'), ('other', 'Other')], default='other', max_length=10, verbose_name='File Type')),
                ('file_size', models.PositiveIntegerField(default=0, verbose_name='File Size (KB)')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=255, null=True, verbose_name='Tags')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20, verbose_name='Status')),
                ('processing_message', models.TextField(blank=True, null=True, verbose_name='Processing Message')),
                ('chunk_size', models.PositiveIntegerField(default=1000, help_text='Size of text chunks for processing', verbose_name='Chunk Size')),
                ('chunk_overlap', models.PositiveIntegerField(default=200, help_text='Overlap between chunks', verbose_name='Chunk Overlap')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_public', models.BooleanField(default=False, verbose_name='Is Public')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='View Count')),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='Download Count')),
                ('metadata', models.JSONField(blank=True, default=dict, null=True, verbose_name='Metadata')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='knowledge_documents', to='knowledge.knowledgecategory')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_base_documents', to='users.company')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_base_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Knowledge Base',
                'verbose_name_plural': 'Knowledge Bases',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CompanyKnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20, verbose_name='Status')),
                ('processing_message', models.TextField(blank=True, null=True, verbose_name='Processing Message')),
                ('total_documents', models.PositiveIntegerField(default=0, verbose_name='Total Documents')),
                ('total_chunks', models.PositiveIntegerField(default=0, verbose_name='Total Chunks')),
                ('index_path', models.CharField(blank=True, max_length=512, null=True, verbose_name='Index Path')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('last_built_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Built At')),
                ('metadata', models.JSONField(blank=True, default=dict, null=True, verbose_name='Metadata')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_bases', to='users.company')),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='triggered_knowledge_bases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Company Knowledge Base',
                'verbose_name_plural': 'Company Knowledge Bases',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Content')),
                ('chunk_index', models.PositiveIntegerField(verbose_name='Chunk Index')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadata')),
                ('embedding', models.BinaryField(blank=True, null=True, verbose_name='Vector Embedding')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='knowledge.knowledgebase')),
            ],
            options={
                'verbose_name': 'Knowledge Chunk',
                'verbose_name_plural': 'Knowledge Chunks',
                'ordering': ['knowledge_base', 'chunk_index'],
                'unique_together': {('knowledge_base', 'chunk_index')},
            },
        ),
    ]
